{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board;\n    }\n  }\n  while (t) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst getHeuristic = node => {\n  var board = getBoard(node);\n};\nconst getBestMove = (node, extrem, depth) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[`${nbNode}`]) {\n    if (bestHeuristic === false || extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic || extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic) {\n      bestHeuristic = node[`${nbNode}`].heuristic;\n    }\n  }\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  var bestMove = [];\n  while (node[`${nbNode}`]) {\n    if (node[`${nbNode}`].heuristic === bestHeuristic) {\n      bestMove.push({\n        x: node[`${nbNode}`].x,\n        y: node[`${nbNode}`].y\n      });\n    }\n  }\n  var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length);\n  return {\n    heuristic: bestHeuristic,\n    bestMove: {\n      x: bestMove[moveChoosen].x,\n      y: bestMove[moveChoosen].y\n    }\n  };\n};\nconst minmax = (node, depth) => {\n  var nbNode;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color: data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor\n        };\n        if (depth > 1) {\n          minmax(node, depth - 1);\n        } else node[`${nbNode}`].heuristic = getHeuristic(node);\n        nbNode++;\n      }\n    }\n  }\n  if (data.depth % 2 !== depth % 2) node = {\n    ...node,\n    ...getBestMove(node, 'min', depth)\n  };else node = {\n    ...node,\n    ...getBestMove(node, 'max', depth)\n  };\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.board = board;\n  data.depth = 1;\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  var tree = {};\n  minmax(tree, data.depth);\n  getHeuristic(tree);\n  return getBestMove(tree);\n};\nexport default ia;","map":{"version":3,"names":["getRandomInt","data","getBoard","node","res","y","x","board","t","color","parent","noStones","getHeuristic","getBestMove","extrem","depth","nbNode","bestHeuristic","heuristic","bestMove","push","moveChoosen","length","minmax","iaColor","playerColor","initData","ia","tree"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board\n        }\n    }\n    while (t){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst getHeuristic = (node) => {\n    var board = getBoard(node)\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[`${nbNode}`]){\n        if (\n            bestHeuristic === false ||\n            (extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic) ||\n            (extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[`${nbNode}`].heuristic\n        }\n    }\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    var bestMove = []\n    while (node[`${nbNode}`]){\n        if (node[`${nbNode}`].heuristic === bestHeuristic){\n            bestMove.push({\n                x : node[`${nbNode}`].x,\n                y : node[`${nbNode}`].y\n            })\n        }\n    }\n    var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length)\n    return {\n        heuristic : bestHeuristic,\n        bestMove : {\n            x : bestMove[moveChoosen].x,\n            y : bestMove[moveChoosen].y\n        }\n    }\n}\n\nconst minmax = (node, depth) => {\n    var nbNode\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n                }\n                if (depth > 1){\n                    minmax(node, depth - 1)\n                }\n                else\n                    node[`${nbNode}`].heuristic = getHeuristic(node)\n                nbNode++\n            }\n        }\n    }\n    if ((data.depth % 2) !== (depth % 2))\n        node = {...node, ...getBestMove(node, 'min', depth)}\n    else\n        node = {...node, ...getBestMove(node, 'max', depth)}\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.board = board\n    data.depth = 1\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    var tree = {}\n    minmax(tree, data.depth)\n    getHeuristic(tree)\n    return (getBestMove(tree))\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}