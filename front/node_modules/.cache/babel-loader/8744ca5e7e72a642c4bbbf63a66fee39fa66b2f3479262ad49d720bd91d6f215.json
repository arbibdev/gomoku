{"ast":null,"code":"import getAiPath from \"./getAiPath\";\nimport { checkWinner } from \"../../tools/checkEndGame\";\nimport getHeuristic from \"./heuristic1\";\nimport { fillBufferMemory, freeBufferMemory } from \"./tools\";\nimport printBoard from '../printBoard';\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\nvar data;\nconst heuristic = ['align5', 'block4', 'align4Free', 'block3Free', 'align4', 'block3', 'align3Free', 'block2Free', 'align3', 'block2', 'align2Free', 'block1Free', 'align2', 'block1'];\n\n// const noStones = (node, x, y) => {\n//     var start = window.performance.now()\n//     var end\n//     while (node.parent){\n//         if (node.x === x && node.y === y){\n//             end = window.performance.now()\n//             data.noStonesTime += end - start\n//             return false\n//         }\n//         node = node.parent\n//     }\n//     end = window.performance.now()\n//     data.noStonesTime += end - start\n//     return true\n// }\n\nconst noStones = (putStones, x, y) => {\n  for (var c = 0; c < putStones.length; c++) {\n    if (putStones[c][0] === x && putStones[c][1] === y) {\n      return false;\n    }\n  }\n  return true;\n};\nconst getAlphaBetaPruning = (node, heuristic, aiTurn) => {\n  if (aiTurn) {\n    if (heuristic > node.alpha) node.alpha = heuristic;\n  } else {\n    if (heuristic < node.beta) node.beta = heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst getChild = (pos, node, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\n// const cancelForward = (node) => {\n//     var start = window.performance.now()\n//     getBoard(node, data.bufferMemory)\n//     var endGame = checkWinner(data.bufferMemory)\n//     freeBufferMemory(node, data.bufferMemory)\n//     var end = window.performance.now()\n//     data.cancelForwardTime += end - start\n//     if (endGame === data.aiColor){\n//         node.heuristic = Infinity\n//         return true\n//     }\n//     if (endGame === data.playerColor){\n//         node.heuristic = -Infinity\n//         return true\n//     }\n//     return false\n// }\n\nconst uploadHeuristic = (node, child, depth, aiTurn) => {\n  if (aiTurn) {\n    if (node.heuristic === undefined || child.heuristic > node.heuristic) {\n      node.heuristic = child.heuristic;\n      if (data.depth === depth) {\n        node.bestPos = {\n          x: child.x,\n          y: child.y\n        };\n      }\n    }\n  } else {\n    if (node.heuristic === undefined || child.heuristic < node.heuristic) node.heuristic = child.heuristic;\n  }\n};\nconst getWinnerHeuristic = putStones => {\n  fillBufferMemory(putStones, data);\n  var endGame = checkWinner(data.bufferMemory);\n  freeBufferMemory(putStones, data);\n  if (endGame === data.aiColor) return Infinity;\n  if (endGame === data.playerColor) return -Infinity;\n  return false;\n};\nconst min = (bestHeuristic, heuristic) => {\n  if (bestHeuristic === false || heuristic < bestHeuristic) return heuristic;\n  return bestHeuristic;\n};\nconst max = (bestHeuristic, heuristic, pos) => {\n  if (bestHeuristic === false || heuristic > bestHeuristic) {\n    if (pos) data.pos = pos;\n    return heuristic;\n  }\n  return bestHeuristic;\n};\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     var winnerHeuristic\n//     if (depth === 0)\n//         return data.heuristics[data.heuristicsCounter++]\n//     if ((winnerHeuristic = getWinnerHeuristic(putStones)))\n//         return winnerHeuristic\n//     if (depth % 2 === data.depth % 2){\n//         for (var c = 0; c < 2; c++){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//             if (heuristic > alpha){\n//                 alpha = heuristic\n//                 if (beta <= alpha)\n//                     break\n//             }\n//         }\n//     }\n//     else{\n//         for (var c = 0; c < 2; c++){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             bestHeuristic = min(bestHeuristic, heuristic)\n//             if (heuristic < beta){\n//                 beta = heuristic\n//                 if (beta <= alpha)\n//                     break\n//             }   \n//         }\n//     }\n//     console.log(bestHeuristic)\n//     return bestHeuristic\n// }\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     var winnerHeuristic\n//     if (depth === 0)\n//         return getHeuristic(putStones, data)\n//     if ((winnerHeuristic = getWinnerHeuristic(putStones)))\n//         return winnerHeuristic\n//     if (depth % 2 === data.depth % 2){\n//         for (var c = 0; c < data.aiPath.length; c++){\n//             if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n//                 heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//                 bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//                 if (heuristic > alpha){\n//                     alpha = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n//             }\n//         }\n//     }\n//     else{\n//         for (var c = 0; c < data.aiPath.length; c++){\n//             if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n//                 heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//                 bestHeuristic = min(bestHeuristic, heuristic)\n//                 if (heuristic < beta){\n//                     beta = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }   \n//             }\n//         }\n//     }\n//     return bestHeuristic\n// }\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     if (depth === 0)\n//         return getHeuristic(putStones, data)\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             if (depth % 2 === data.depth % 2){\n//                 bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//                 if (heuristic > alpha){\n//                     alpha = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n//             }\n//             else{\n//                 bestHeuristic = min(bestHeuristic, heuristic)\n//                 if (heuristic < beta){\n//                     beta = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n\n//             }\n//         }\n//     }\n//     return bestHeuristic\n// }\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var aiTurn = data.depth % 2 === depth % 2 ? true : false\n//     var color = aiTurn ? data.aiColor : data.playerColor\n//     if (cancelForward(node)){\n//         // console.log(`Cancel forward ${node.heuristic} aiTurn: ${aiTurn}`)\n//         return\n//     }\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(node, data.aiPath[c].x, data.aiPath[c].y)){\n//             node[nbNode] = getChild(data.aiPath[c], node, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode], data)\n//             uploadHeuristic(node, node[nbNode], depth,aiTurn)\n//             if (getAlphaBetaPruning(node, node[nbNode].heuristic, aiTurn))\n//                 break\n//             node[nbNode] = undefined // À remettre\n//             nbNode++\n//         }\n//     }\n// }\n\nconst getBufferMemory = board => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  return res;\n};\nconst initHeuristic = () => {\n  var res = {};\n  var pow = 0;\n  for (var c = heuristic.length - 1; c >= 0; c--) {\n    res[heuristic[c]] = Math.pow(10, pow);\n    pow++;\n  }\n  return res;\n};\nconst initData = mainData => {\n  var start = window.performance.now();\n  data = {};\n  data.depth = 3;\n  data.treatmentSpace = 3;\n  if (361 - data.piecesOnBoard < data.depth) data.depth = 361 - data.piecesOnBoard;\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = mainData.playerColor;\n  data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  console.log(`${data.aiColor === data.WHITE ? 'WHITE\\'S' : 'BLACK\\'S'} TURN`);\n  data.board = mainData.board;\n  data.aiPath = getAiPath(mainData.board, data.treatmentSpace);\n  if (data.aiPath.length < data.depth) data.depth = data.aiPath.length;\n  data.bufferMemory = getBufferMemory(mainData.board);\n  data.heuristicAiDiviser = 1;\n  // if (data.depth % 2)\n  //     data.heuristicAiDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n  data.heuristic = initHeuristic(); // A NE PAS FAIRE A CHAQUE APPEL DE L'IA\n  data.heuristicTime = 0; // TMP\n  data.cancelForwardTime = 0; // TMP\n  data.noStonesTime = 0; // TMP\n  var end = window.performance.now();\n  data.initDataTime = end - start; // TMP\n  data.saveMinMax = []; // TMP\n  data.ctx = mainData.ctx; // TMP\n  data.images = mainData.images; // TMP\n  data.canvas = mainData.canvas; // TMP\n  data.heuristics = [-1, 3, 5, -6, -4];\n  data.heuristicsCounter = 0;\n};\nconst printTime = data => {\n  console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`);\n  console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`);\n  console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`);\n  console.log(`init data time: ${Math.floor(data.initDataTime)}ms`);\n  console.log(`total time: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`);\n};\nconst printChoosenStones = (node, line) => {\n  var nbNode = 0;\n  if (!node || !node[0]) return;\n  while (node[nbNode].heuristic !== node.heuristic) nbNode++;\n  var color = line % 2 ? data.playerColor : data.aiColor;\n  var stringColor = color === data.BLACK ? 'black' : 'white';\n  console.log(`${stringColor} in ${node[nbNode].x} ${node[nbNode].y}`);\n  if (node[nbNode].heuristicInfos) console.log(node[nbNode].heuristicInfos);\n  printChoosenStones(node[nbNode], line + 1);\n};\nconst printSaveMinMax = (tree, data) => {\n  var count = 0;\n  window.onkeydown = e => {\n    if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft') return;\n    data.board = data.saveMinMax[count].board;\n    console.clear();\n    console.log(`final heuristic: ${tree.heuristic}`);\n    printChoosenStones(tree, 0);\n    console.log(`current heuristic : ${data.saveMinMax[count].heuristic}`);\n    console.log(data.saveMinMax[count].heuristicInfos);\n    printBoard(data);\n    if (e.key === 'ArrowRight' && count < data.saveMinMax.length - 1) count += 1;else if (e.key === 'ArrowLeft' && count > 0) count -= 1;\n  };\n};\nvar saveGame = [];\nconst printSaveGame = data => {\n  var count = 0;\n  window.onkeydown = e => {\n    if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft') return;\n    data.board = saveGame[count];\n    printBoard(data);\n    if (e.key === 'ArrowRight' && count < saveGame.length - 1) count += 1;else if (e.key === 'ArrowLeft' && count > 0) count -= 1;\n  };\n};\nconst copyBoard = board => {\n  var ret = [];\n  for (var y = 0; y < 19; y++) {\n    ret[y] = [];\n    for (var x = 0; x < 19; x++) {\n      ret[y][x] = board[y][x];\n    }\n  }\n  return ret;\n};\nconst ai = mainData => {\n  initData(mainData);\n  minmax([], data.depth, -Infinity, Infinity);\n  console.log('----------------');\n  var pos = {\n    ...data.pos\n  };\n  data = undefined;\n  return pos;\n};\nexport default ai;","map":{"version":3,"names":["getAiPath","checkWinner","getHeuristic","fillBufferMemory","freeBufferMemory","printBoard","data","heuristic","noStones","putStones","x","y","c","length","getAlphaBetaPruning","node","aiTurn","alpha","beta","getChild","pos","color","parent","uploadHeuristic","child","depth","undefined","bestPos","getWinnerHeuristic","endGame","bufferMemory","aiColor","Infinity","playerColor","min","bestHeuristic","max","getBufferMemory","board","res","initHeuristic","pow","Math","initData","mainData","start","window","performance","now","treatmentSpace","piecesOnBoard","WHITE","BLACK","MIN","MAX","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","FORBIDDEN","console","log","aiPath","heuristicAiDiviser","heuristicTime","cancelForwardTime","noStonesTime","end","initDataTime","saveMinMax","ctx","images","canvas","heuristics","heuristicsCounter","printTime","floor","printChoosenStones","line","nbNode","stringColor","heuristicInfos","printSaveMinMax","tree","count","onkeydown","e","key","clear","saveGame","printSaveGame","copyBoard","ret","ai","minmax"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/ai.js"],"sourcesContent":["import getAiPath from \"./getAiPath\"\nimport { checkWinner } from \"../../tools/checkEndGame\"\nimport getHeuristic from \"./heuristic1\"\nimport { fillBufferMemory, freeBufferMemory } from \"./tools\"\nimport printBoard from '../printBoard'\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\nvar data\n\n\n\nconst heuristic = [\n    'align5',\n    'block4',\n    'align4Free',\n    'block3Free',\n    'align4',\n    'block3',\n    'align3Free',\n    'block2Free',\n    'align3',\n    'block2',\n    'align2Free',\n    'block1Free',\n    'align2',\n    'block1',\n]\n\n// const noStones = (node, x, y) => {\n//     var start = window.performance.now()\n//     var end\n//     while (node.parent){\n//         if (node.x === x && node.y === y){\n//             end = window.performance.now()\n//             data.noStonesTime += end - start\n//             return false\n//         }\n//         node = node.parent\n//     }\n//     end = window.performance.now()\n//     data.noStonesTime += end - start\n//     return true\n// }\n\nconst noStones = (putStones, x, y) => {\n    for (var c = 0; c < putStones.length; c++){\n        if (putStones[c][0] === x && putStones[c][1] === y){\n            return false\n        }\n    }\n    return true\n}\n\nconst getAlphaBetaPruning = (node, heuristic, aiTurn) => {\n    if (aiTurn){\n        if (heuristic > node.alpha)\n            node.alpha = heuristic\n    }\n    else{\n        if ((heuristic < node.beta))\n            node.beta = heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst getChild = (pos, node, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\n// const cancelForward = (node) => {\n//     var start = window.performance.now()\n//     getBoard(node, data.bufferMemory)\n//     var endGame = checkWinner(data.bufferMemory)\n//     freeBufferMemory(node, data.bufferMemory)\n//     var end = window.performance.now()\n//     data.cancelForwardTime += end - start\n//     if (endGame === data.aiColor){\n//         node.heuristic = Infinity\n//         return true\n//     }\n//     if (endGame === data.playerColor){\n//         node.heuristic = -Infinity\n//         return true\n//     }\n//     return false\n// }\n\nconst uploadHeuristic = (node, child, depth, aiTurn) => {\n    if (aiTurn){\n        if (node.heuristic === undefined || child.heuristic > node.heuristic){\n            node.heuristic = child.heuristic\n            if (data.depth === depth){\n                node.bestPos = {\n                    x : child.x,\n                    y : child.y\n                }\n            }\n        }\n    }\n    else{\n        if (node.heuristic === undefined || child.heuristic < node.heuristic)\n            node.heuristic = child.heuristic\n    }\n}\n\nconst getWinnerHeuristic = putStones => {\n    fillBufferMemory(putStones, data)\n    var endGame = checkWinner(data.bufferMemory)\n    freeBufferMemory(putStones, data)\n    if (endGame === data.aiColor)\n        return Infinity\n    if (endGame === data.playerColor)\n        return -Infinity\n    return false\n}\n\nconst min = (bestHeuristic, heuristic) => {\n    if (bestHeuristic === false || heuristic < bestHeuristic)\n        return heuristic\n    return bestHeuristic\n}\n\nconst max = (bestHeuristic, heuristic, pos) => {\n    if (bestHeuristic === false || heuristic > bestHeuristic){\n        if (pos)\n            data.pos = pos\n        return heuristic\n    }\n    return bestHeuristic\n}\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     var winnerHeuristic\n//     if (depth === 0)\n//         return data.heuristics[data.heuristicsCounter++]\n//     if ((winnerHeuristic = getWinnerHeuristic(putStones)))\n//         return winnerHeuristic\n//     if (depth % 2 === data.depth % 2){\n//         for (var c = 0; c < 2; c++){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//             if (heuristic > alpha){\n//                 alpha = heuristic\n//                 if (beta <= alpha)\n//                     break\n//             }\n//         }\n//     }\n//     else{\n//         for (var c = 0; c < 2; c++){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             bestHeuristic = min(bestHeuristic, heuristic)\n//             if (heuristic < beta){\n//                 beta = heuristic\n//                 if (beta <= alpha)\n//                     break\n//             }   \n//         }\n//     }\n//     console.log(bestHeuristic)\n//     return bestHeuristic\n// }\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     var winnerHeuristic\n//     if (depth === 0)\n//         return getHeuristic(putStones, data)\n//     if ((winnerHeuristic = getWinnerHeuristic(putStones)))\n//         return winnerHeuristic\n//     if (depth % 2 === data.depth % 2){\n//         for (var c = 0; c < data.aiPath.length; c++){\n//             if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n//                 heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//                 bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//                 if (heuristic > alpha){\n//                     alpha = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n//             }\n//         }\n//     }\n//     else{\n//         for (var c = 0; c < data.aiPath.length; c++){\n//             if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n//                 heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//                 bestHeuristic = min(bestHeuristic, heuristic)\n//                 if (heuristic < beta){\n//                     beta = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }   \n//             }\n//         }\n//     }\n//     return bestHeuristic\n// }\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     if (depth === 0)\n//         return getHeuristic(putStones, data)\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             if (depth % 2 === data.depth % 2){\n//                 bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//                 if (heuristic > alpha){\n//                     alpha = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n//             }\n//             else{\n//                 bestHeuristic = min(bestHeuristic, heuristic)\n//                 if (heuristic < beta){\n//                     beta = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n                \n//             }\n//         }\n//     }\n//     return bestHeuristic\n// }\n\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var aiTurn = data.depth % 2 === depth % 2 ? true : false\n//     var color = aiTurn ? data.aiColor : data.playerColor\n//     if (cancelForward(node)){\n//         // console.log(`Cancel forward ${node.heuristic} aiTurn: ${aiTurn}`)\n//         return\n//     }\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(node, data.aiPath[c].x, data.aiPath[c].y)){\n//             node[nbNode] = getChild(data.aiPath[c], node, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode], data)\n//             uploadHeuristic(node, node[nbNode], depth,aiTurn)\n//             if (getAlphaBetaPruning(node, node[nbNode].heuristic, aiTurn))\n//                 break\n//             node[nbNode] = undefined // À remettre\n//             nbNode++\n//         }\n//     }\n// }\n\nconst getBufferMemory = (board) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    return res\n}\n\nconst initHeuristic = () => {\n    var res = {}\n    var pow = 0\n    for (var c = heuristic.length - 1; c >= 0; c--){\n        res[heuristic[c]] = Math.pow(10, pow)\n        pow++\n    }\n    return res\n}\n\nconst initData = (mainData) => {\n    var start = window.performance.now()\n    data = {}\n    data.depth = 3\n    data.treatmentSpace = 3\n    if (361 - data.piecesOnBoard < data.depth)\n        data.depth = 361 - data.piecesOnBoard\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = mainData.playerColor\n    data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n    console.log(`${data.aiColor === data.WHITE ? 'WHITE\\'S' : 'BLACK\\'S'} TURN`)\n    data.board = mainData.board\n    data.aiPath = getAiPath(mainData.board, data.treatmentSpace)\n    if (data.aiPath.length < data.depth)\n        data.depth = data.aiPath.length\n    data.bufferMemory = getBufferMemory(mainData.board)\n    data.heuristicAiDiviser = 1\n    // if (data.depth % 2)\n    //     data.heuristicAiDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n    data.heuristic = initHeuristic() // A NE PAS FAIRE A CHAQUE APPEL DE L'IA\n    data.heuristicTime = 0 // TMP\n    data.cancelForwardTime = 0 // TMP\n    data.noStonesTime = 0 // TMP\n    var end = window.performance.now()\n    data.initDataTime = end - start // TMP\n    data.saveMinMax = [] // TMP\n    data.ctx = mainData.ctx // TMP\n    data.images = mainData.images // TMP\n    data.canvas = mainData.canvas // TMP\n    data.heuristics = [-1, 3, 5, -6, -4]\n    data.heuristicsCounter = 0\n}\n\nconst printTime = data => {\n    console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`)\n    console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`)\n    console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`)\n    console.log(`init data time: ${Math.floor(data.initDataTime)}ms`)\n    console.log(`total time: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`)\n}\n\nconst printChoosenStones = (node, line) => {\n    var nbNode = 0\n    if (!node || !node[0])\n        return\n    while (node[nbNode].heuristic !== node.heuristic)\n        nbNode++\n    var color = line % 2 ? data.playerColor : data.aiColor\n    var stringColor = color === data.BLACK ? 'black' : 'white'\n    console.log(`${stringColor} in ${node[nbNode].x} ${node[nbNode].y}`)\n    if (node[nbNode].heuristicInfos)\n        console.log(node[nbNode].heuristicInfos)\n    printChoosenStones(node[nbNode], line + 1)\n}\n\nconst printSaveMinMax = (tree, data) => {\n    var count = 0\n    window.onkeydown = e => {\n        if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft')\n            return\n        data.board = data.saveMinMax[count].board\n        console.clear()\n        console.log(`final heuristic: ${tree.heuristic}`)\n        printChoosenStones(tree, 0)\n        console.log(`current heuristic : ${data.saveMinMax[count].heuristic}`)\n        console.log(data.saveMinMax[count].heuristicInfos)\n        printBoard(data)\n        if (e.key === 'ArrowRight' && count < data.saveMinMax.length - 1)\n            count += 1\n        else if (e.key === 'ArrowLeft' && count > 0)\n            count -= 1\n    }\n}\n\nvar saveGame = []\nconst printSaveGame = data => {\n    var count = 0\n    window.onkeydown = e => {\n        if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft')\n            return\n        data.board = saveGame[count]\n        printBoard(data)\n        if (e.key === 'ArrowRight' && count < saveGame.length - 1)\n            count += 1\n        else if (e.key === 'ArrowLeft' && count > 0)\n            count -= 1\n    }\n}\n\nconst copyBoard = board => {\n    var ret = []\n    for (var y = 0; y < 19; y++){\n        ret[y] = []\n        for (var x = 0; x < 19; x++){\n            ret[y][x] = board[y][x]\n        }\n    }\n    return ret\n}\n\nconst ai = (mainData) => {\n    initData(mainData)\n    minmax([], data.depth, -Infinity, Infinity)\n    console.log('----------------')\n    var pos = {...data.pos}\n    data = undefined\n    return pos\n}\n\nexport default ai"],"mappings":"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SAAS,KAAK;EACtC,IAAI4B,aAAa,KAAK,KAAK,IAAI5B,SAAS,GAAG4B,aAAa,EACpD,OAAO5B,SAAS;EACpB,OAAO4B,aAAa;AACxB,CAAC;AAED,MAAMC,GAAG,GAAG,CAACD,aAAa,EAAE5B,SAAS,EAAEa,GAAG,KAAK;EAC3C,IAAIe,aAAa,KAAK,KAAK,IAAI5B,SAAS,GAAG4B,aAAa,EAAC;IACrD,IAAIf,GAAG,EACHd,IAAI,CAACc,GAAG,GAAGA,GAAG;IAClB,OAAOb,SAAS;EACpB;EACA,OAAO4B,aAAa;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,eAAe,GAAIC,KAAK,IAAK;EAC/B,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;IACxB4B,GAAG,CAAC5B,CAAC,CAAC,GAAG,EAAE;IACX,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;MACxB6B,GAAG,CAAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}