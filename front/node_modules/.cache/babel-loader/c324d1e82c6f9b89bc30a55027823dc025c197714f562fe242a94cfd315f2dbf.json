{"ast":null,"code":"import ia from '../../tools/ia/ia';\nimport checkEndGame from './checkEndGame';\nconst printBackground = (data, images) => {\n  data.ctx.fillStyle = '#a6683e';\n  data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height);\n  for (var y = 0; y < 18; y++) {\n    for (var x = 0; x < 18; x++) data.ctx.drawImage(images.gomokuBoard, x * images.gomokuBoard.width + images.blackPiece.width / 2, y * images.gomokuBoard.height + images.blackPiece.width / 2);\n  }\n};\nconst initBoard = () => {\n  var board = [];\n  for (var y = 0; y < 19; y++) {\n    board[y] = [];\n    for (var x = 0; x < 19; x++) {\n      board[y][x] = 0;\n    }\n  }\n  return board;\n};\nconst printStones = (data, images) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (data.board[y][x]) {\n        var stone = data.board[y][x] === data.BLACK ? images.blackPiece : images.whitePiece;\n        data.ctx.drawImage(stone, images.gomokuBoard.width * x, images.gomokuBoard.height * y);\n      }\n    }\n  }\n};\nconst printBoard = (data, images) => {\n  printBackground(data, images);\n  printStones(data, images);\n};\nconst getStonePosition = (data, e, canvasOffsetWidth, canvasOffsetHeight) => {\n  return {\n    x: Math.floor(e.offsetX * data.canvas.width / canvasOffsetWidth / (data.canvas.width / 19)),\n    y: Math.floor(e.offsetY * data.canvas.height / canvasOffsetHeight / (data.canvas.height / 19))\n  };\n};\nconst canvasOnMouseMove = (e, data, images, playerColor) => {\n  if (data.endGame || data.turn === 'ia') return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data, images);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(playerColor === data.WHITE ? images.whitePiece : images.blackPiece, images.gomokuBoard.width * stone.x, images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else printBoard(data, images);\n};\nconst setEndGame = data => {\n  var params = {\n    draw: {\n      text: 'END OF GAME, NO WINNER',\n      color: 'orange'\n    },\n    human: {\n      text: 'YOU WON THE GAME !',\n      color: 'green'\n    },\n    ia: {\n      text: 'YOU LOST THE GAME',\n      color: 'red'\n    }\n  };\n  document.getElementById('endGame').style.color = params[data.endGame].color;\n  document.getElementById('endGame').innerHTML = params[data.endGame].text;\n  document.getElementById('newGame').style.display = 'block';\n};\nconst launchIa = (data, images, playerColor) => {\n  const startIa = Date.now();\n  var pos = ia(data);\n  const timeIa = Date.now() - startIa;\n  data.board[pos.y][pos.x] = playerColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeIa / 1000) % 1000;\n  var nbMilliSeconds = `${timeIa % 1000}`.padStart(3, '0');\n  data.iaMoves += 1;\n  data.iaTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`;\n  document.getElementById('timerAverage').innerHTML = `${(data.iaTotalTime / data.iaMoves).toFixed(3)}s`;\n  printBoard(data, images);\n  if (data.endGame = checkEndGame(data, playerColor)) {\n    setEndGame(data);\n    return;\n  }\n  data.turn = 'human';\n};\nconst canvasOnClick = (e, data, images, playerColor) => {\n  if (data.endGame || data.turn === 'ia') return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = playerColor;\n    data.piecesOnBoard += 1;\n    printBoard(data, images);\n    if (data.endGame = checkEndGame(data, playerColor)) {\n      setEndGame(data);\n      return;\n    }\n    data.turn = 'ia';\n    launchIa(data, images, playerColor);\n  }\n};\nconst canvasOnMouseLeave = (e, data, images) => {\n  if (data.endGame || data.turn === 'ia') return;\n  printBoard(data, images);\n};\nconst initGame = (images, playerColor, firstPlayer) => {\n  var data = {};\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayer;\n  data.iaMoves = 0;\n  data.iaTotalTime = 0;\n  data.piecesOnBoard = 0;\n  data.playerColor = playerColor;\n  data.images = images;\n  printBoard(data, images);\n  if (data.turn === 'ia') launchIa(data, images, playerColor);\n  data.canvas.onmousemove = e => canvasOnMouseMove(e, data, images, playerColor);\n  data.canvas.onclick = e => canvasOnClick(e, data, images, playerColor);\n  data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data, images);\n};\nexport default initGame;","map":{"version":3,"names":["ia","checkEndGame","printBackground","data","images","ctx","fillStyle","fillRect","canvas","width","height","y","x","drawImage","gomokuBoard","blackPiece","initBoard","board","printStones","stone","BLACK","whitePiece","printBoard","getStonePosition","e","canvasOffsetWidth","canvasOffsetHeight","Math","floor","offsetX","offsetY","canvasOnMouseMove","playerColor","endGame","turn","offsetWidth","offsetHeight","globalAlpha","WHITE","setEndGame","params","draw","text","color","human","document","getElementById","style","innerHTML","display","launchIa","startIa","Date","now","pos","timeIa","piecesOnBoard","nbSeconds","nbMilliSeconds","padStart","iaMoves","iaTotalTime","parseFloat","toFixed","canvasOnClick","canvasOnMouseLeave","initGame","firstPlayer","DRAW","getContext","onmousemove","onclick","onmouseleave"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/pages/humanvsia/initGame.js"],"sourcesContent":["import ia from '../../tools/ia/ia'\nimport checkEndGame from './checkEndGame'\n\nconst printBackground = (data, images) => {\n    data.ctx.fillStyle = '#a6683e'\n    data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height)\n    for (var y = 0; y < 18; y++){\n        for (var x = 0; x < 18; x++)\n            data.ctx.drawImage(\n                images.gomokuBoard,\n                x * images.gomokuBoard.width + images.blackPiece.width / 2,\n                y * images.gomokuBoard.height + images.blackPiece.width / 2\n            )\n    }\n}\n\nconst initBoard = () => {\n    var board = []\n    for (var y = 0; y < 19; y++){\n        board[y] = []\n        for (var x = 0; x < 19; x++){\n            board[y][x] = 0\n        }\n    }\n    return board\n}\n\nconst printStones = (data, images) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (data.board[y][x]){\n                var stone = data.board[y][x] === data.BLACK ? images.blackPiece : images.whitePiece\n                data.ctx.drawImage(\n                    stone,\n                    images.gomokuBoard.width * x,\n                    images.gomokuBoard.height * y\n                )\n            }\n        }\n    }\n}\n\nconst printBoard = (data, images) => {\n    printBackground(data, images)\n    printStones(data, images)\n}\n\nconst getStonePosition = (data, e, canvasOffsetWidth, canvasOffsetHeight) => {\n    return {\n        x : Math.floor(((e.offsetX * data.canvas.width) / canvasOffsetWidth) / (data.canvas.width / 19)),\n        y : Math.floor(((e.offsetY * data.canvas.height) / canvasOffsetHeight) / (data.canvas.height / 19))\n    }\n}\n\nconst canvasOnMouseMove = (e, data, images, playerColor) => {\n    if (data.endGame || data.turn === 'ia')\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data, images)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            playerColor === data.WHITE ? images.whitePiece : images.blackPiece,\n            images.gomokuBoard.width * stone.x,\n            images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else\n        printBoard(data, images)\n}\n\nconst setEndGame = (data) => {\n    var params = {\n        draw : {\n            text : 'END OF GAME, NO WINNER',\n            color : 'orange'\n        },\n        human : {\n            text : 'YOU WON THE GAME !',\n            color : 'green'\n        },\n        ia : {\n            text : 'YOU LOST THE GAME',\n            color : 'red'\n        }\n    }\n    document.getElementById('endGame').style.color = params[data.endGame].color\n    document.getElementById('endGame').innerHTML = params[data.endGame].text\n    document.getElementById('newGame').style.display = 'block'\n}\n\nconst launchIa = (data, images, playerColor) => {\n    const startIa = Date.now();\n    var pos = ia(data)\n    const timeIa = Date.now() - startIa\n    data.board[pos.y][pos.x] = playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeIa / 1000) % 1000\n    var nbMilliSeconds = `${timeIa % 1000}`.padStart(3, '0')\n    data.iaMoves += 1\n    data.iaTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`\n    document.getElementById('timerAverage').innerHTML = `${(data.iaTotalTime / data.iaMoves).toFixed(3)}s`\n    printBoard(data, images)\n    if ((data.endGame = checkEndGame(data, playerColor))){\n        setEndGame(data)\n        return\n    }\n    data.turn = 'human'\n}\n\nconst canvasOnClick = (e, data, images, playerColor) => {\n    if (data.endGame || data.turn === 'ia')\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = playerColor\n        data.piecesOnBoard += 1\n        printBoard(data, images)\n        if ((data.endGame = checkEndGame(data, playerColor))){\n            setEndGame(data)\n            return\n        }\n        data.turn = 'ia'\n        launchIa(data, images, playerColor)\n    }\n}\n\nconst canvasOnMouseLeave = (e, data, images) => {\n    if (data.endGame || data.turn === 'ia')\n            return\n        printBoard(data, images)\n}\n\nconst initGame = (images, playerColor, firstPlayer) => {\n    var data = {}\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayer\n    data.iaMoves = 0\n    data.iaTotalTime = 0\n    data.piecesOnBoard = 0\n    data.playerColor = playerColor\n    data.images = images\n    printBoard(data, images)\n    if (data.turn === 'ia')\n        launchIa(data, images, playerColor)\n    data.canvas.onmousemove = e => canvasOnMouseMove(e, data, images, playerColor)\n    data.canvas.onclick = e => canvasOnClick(e, data, images, playerColor)\n    data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data, images)\n}\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}