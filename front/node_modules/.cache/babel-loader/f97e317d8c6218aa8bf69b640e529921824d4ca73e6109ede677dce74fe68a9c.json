{"ast":null,"code":"import getAiPath from \"./getAiPath\";\nimport { checkWinner } from \"../../tools/checkEndGame\";\nimport getHeuristic from \"./heuristic1\";\nimport { getBoard, freeBufferMemory } from \"./tools\";\nimport printBoard from '../printBoard';\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\nvar data;\nconst heuristic = ['align5', 'block4', 'align4Free', 'block3Free', 'align4', 'block3', 'align3Free', 'block2Free', 'align3', 'block2', 'align2Free', 'block1Free', 'align2', 'block1'];\nconst noStones = (node, x, y) => {\n  var start = window.performance.now();\n  var end;\n  while (node.parent) {\n    if (node.x === x && node.y === y) {\n      end = window.performance.now();\n      data.noStonesTime += end - start;\n      return false;\n    }\n    node = node.parent;\n  }\n  end = window.performance.now();\n  data.noStonesTime += end - start;\n  return true;\n};\nconst getAlphaBetaPruning = (node, heuristic, aiTurn) => {\n  if (aiTurn) {\n    if (heuristic > node.alpha) node.alpha = heuristic;\n  } else {\n    if (heuristic < node.beta) node.beta = heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst getChild = (pos, node, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst cancelForward = node => {\n  var start = window.performance.now();\n  getBoard(node, data.bufferMemory);\n  var endGame = checkWinner(data.bufferMemory);\n  freeBufferMemory(node, data.bufferMemory);\n  var end = window.performance.now();\n  data.cancelForwardTime += end - start;\n  if (endGame === data.aiColor) {\n    node.heuristic = Infinity;\n    return true;\n  }\n  if (endGame === data.playerColor) {\n    node.heuristic = -Infinity;\n    return true;\n  }\n  return false;\n};\nconst uploadHeuristic = (node, child, depth, aiTurn) => {\n  if (aiTurn) {\n    if (node.heuristic === undefined || child.heuristic > node.heuristic) {\n      node.heuristic = child.heuristic;\n      if (data.depth === depth) {\n        node.bestPos = {\n          x: child.x,\n          y: child.y\n        };\n      }\n    }\n  } else {\n    if (node.heuristic === undefined || child.heuristic < node.heuristic) node.heuristic = child.heuristic;\n  }\n};\nconst minmax2 = (node, depth) => {};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var aiTurn = data.depth % 2 === depth % 2 ? true : false;\n  var color = aiTurn ? data.aiColor : data.playerColor;\n  if (cancelForward(node)) {\n    // console.log(`Cancel forward ${node.heuristic} aiTurn: ${aiTurn}`)\n    return;\n  }\n  for (var c = 0; c < data.aiPath.length; c++) {\n    if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(node, data.aiPath[c].x, data.aiPath[c].y)) {\n      node[nbNode] = getChild(data.aiPath[c], node, color);\n      if (depth > 1) minmax(node[nbNode], depth - 1);else node[nbNode].heuristic = getHeuristic(node[nbNode], data);\n      uploadHeuristic(node, node[nbNode], depth, aiTurn);\n      if (getAlphaBetaPruning(node, node[nbNode].heuristic, aiTurn)) break;\n      node[nbNode] = undefined; // À remettre\n      nbNode++;\n    }\n  }\n};\nconst getBufferMemory = board => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  return res;\n};\nconst initHeuristic = () => {\n  var res = {};\n  var pow = 0;\n  for (var c = heuristic.length - 1; c >= 0; c--) {\n    res[heuristic[c]] = Math.pow(10, pow);\n    pow++;\n  }\n  return res;\n};\nconst initData = mainData => {\n  var start = window.performance.now();\n  data = {};\n  data.depth = 3;\n  data.treatmentSpace = 3;\n  if (361 - data.piecesOnBoard < data.depth) data.depth = 361 - data.piecesOnBoard;\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = mainData.playerColor;\n  data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  console.log(`${data.aiColor === data.WHITE ? 'WHITE\\'S' : 'BLACK\\'S'} TURN`);\n  data.board = mainData.board;\n  data.aiPath = getAiPath(mainData.board, data.treatmentSpace);\n  data.bufferMemory = getBufferMemory(mainData.board);\n  data.heuristicAiDiviser = 1;\n  // if (data.depth % 2)\n  //     data.heuristicAiDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n  data.heuristic = initHeuristic(); // A NE PAS FAIRE A CHAQUE APPEL DE L'IA\n  data.heuristicTime = 0; // TMP\n  data.cancelForwardTime = 0; // TMP\n  data.noStonesTime = 0; // TMP\n  var end = window.performance.now();\n  data.initDataTime = end - start; // TMP\n  data.saveMinMax = []; // TMP\n  data.ctx = mainData.ctx; // TMP\n  data.images = mainData.images; // TMP\n  data.canvas = mainData.canvas; // TMP\n};\n\nconst printTime = data => {\n  console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`);\n  console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`);\n  console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`);\n  console.log(`init data time: ${Math.floor(data.initDataTime)}ms`);\n  console.log(`total time: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`);\n};\nconst printChoosenStones = (node, line) => {\n  var nbNode = 0;\n  if (!node || !node[0]) return;\n  while (node[nbNode].heuristic !== node.heuristic) nbNode++;\n  var color = line % 2 ? data.playerColor : data.aiColor;\n  var stringColor = color === data.BLACK ? 'black' : 'white';\n  console.log(`${stringColor} in ${node[nbNode].x} ${node[nbNode].y}`);\n  if (node[nbNode].heuristicInfos) console.log(node[nbNode].heuristicInfos);\n  printChoosenStones(node[nbNode], line + 1);\n};\nconst printSaveMinMax = (tree, data) => {\n  var count = 0;\n  window.onkeydown = e => {\n    if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft') return;\n    data.board = data.saveMinMax[count].board;\n    console.clear();\n    console.log(`final heuristic: ${tree.heuristic}`);\n    printChoosenStones(tree, 0);\n    console.log(`current heuristic : ${data.saveMinMax[count].heuristic}`);\n    console.log(data.saveMinMax[count].heuristicInfos);\n    printBoard(data);\n    if (e.key === 'ArrowRight' && count < data.saveMinMax.length - 1) count += 1;else if (e.key === 'ArrowLeft' && count > 0) count -= 1;\n  };\n};\nvar saveGame = [];\nconst printSaveGame = data => {\n  var count = 0;\n  window.onkeydown = e => {\n    if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft') return;\n    data.board = saveGame[count];\n    printBoard(data);\n    if (e.key === 'ArrowRight' && count < saveGame.length - 1) count += 1;else if (e.key === 'ArrowLeft' && count > 0) count -= 1;\n  };\n};\nconst copyBoard = board => {\n  var ret = [];\n  for (var y = 0; y < 19; y++) {\n    ret[y] = [];\n    for (var x = 0; x < 19; x++) {\n      ret[y][x] = board[y][x];\n    }\n  }\n  return ret;\n};\nconst ai = mainData => {\n  saveGame.push(copyBoard(mainData.board));\n  initData(mainData);\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  minmax(tree, data.depth);\n  printTime(data, tree);\n  // console.log(`heuristic: ${tree.heuristic}`)\n  // printChoosenStones(tree, 0)\n  // printSaveMinMax(tree, data)\n  // printSaveGame(data)\n  console.log('----------------');\n  var pos = {\n    ...tree.bestPos\n  };\n  // data = undefined // À remettre\n  tree = undefined;\n  return pos;\n};\nexport default ai;","map":{"version":3,"names":["getAiPath","checkWinner","getHeuristic","getBoard","freeBufferMemory","printBoard","data","heuristic","noStones","node","x","y","start","window","performance","now","end","parent","noStonesTime","getAlphaBetaPruning","aiTurn","alpha","beta","getChild","pos","color","cancelForward","bufferMemory","endGame","cancelForwardTime","aiColor","Infinity","playerColor","uploadHeuristic","child","depth","undefined","bestPos","minmax2","minmax","callsToMinMax","nbNode","c","aiPath","length","board","getBufferMemory","res","initHeuristic","pow","Math","initData","mainData","treatmentSpace","piecesOnBoard","WHITE","BLACK","MIN","MAX","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","FORBIDDEN","console","log","heuristicAiDiviser","heuristicTime","initDataTime","saveMinMax","ctx","images","canvas","printTime","floor","printChoosenStones","line","stringColor","heuristicInfos","printSaveMinMax","tree","count","onkeydown","e","key","clear","saveGame","printSaveGame","copyBoard","ret","ai","push"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/ai.js"],"sourcesContent":["import getAiPath from \"./getAiPath\"\nimport { checkWinner } from \"../../tools/checkEndGame\"\nimport getHeuristic from \"./heuristic1\"\nimport { getBoard, freeBufferMemory } from \"./tools\"\nimport printBoard from '../printBoard'\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\nvar data\n\n\n\nconst heuristic = [\n    'align5',\n    'block4',\n    'align4Free',\n    'block3Free',\n    'align4',\n    'block3',\n    'align3Free',\n    'block2Free',\n    'align3',\n    'block2',\n    'align2Free',\n    'block1Free',\n    'align2',\n    'block1',\n]\n\nconst noStones = (node, x, y) => {\n    var start = window.performance.now()\n    var end\n    while (node.parent){\n        if (node.x === x && node.y === y){\n            end = window.performance.now()\n            data.noStonesTime += end - start\n            return false\n        }\n        node = node.parent\n    }\n    end = window.performance.now()\n    data.noStonesTime += end - start\n    return true\n}\n\nconst getAlphaBetaPruning = (node, heuristic, aiTurn) => {\n    if (aiTurn){\n        if (heuristic > node.alpha)\n            node.alpha = heuristic\n    }\n    else{\n        if ((heuristic < node.beta))\n            node.beta = heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst getChild = (pos, node, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst cancelForward = (node) => {\n    var start = window.performance.now()\n    getBoard(node, data.bufferMemory)\n    var endGame = checkWinner(data.bufferMemory)\n    freeBufferMemory(node, data.bufferMemory)\n    var end = window.performance.now()\n    data.cancelForwardTime += end - start\n    if (endGame === data.aiColor){\n        node.heuristic = Infinity\n        return true\n    }\n    if (endGame === data.playerColor){\n        node.heuristic = -Infinity\n        return true\n    }\n    return false\n}\n\nconst uploadHeuristic = (node, child, depth, aiTurn) => {\n    if (aiTurn){\n        if (node.heuristic === undefined || child.heuristic > node.heuristic){\n            node.heuristic = child.heuristic\n            if (data.depth === depth){\n                node.bestPos = {\n                    x : child.x,\n                    y : child.y\n                }\n            }\n        }\n    }\n    else{\n        if (node.heuristic === undefined || child.heuristic < node.heuristic)\n            node.heuristic = child.heuristic\n    }\n}\n\nconst minmax2 = (node, depth) => {\n    \n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var aiTurn = data.depth % 2 === depth % 2 ? true : false\n    var color = aiTurn ? data.aiColor : data.playerColor\n    if (cancelForward(node)){\n        // console.log(`Cancel forward ${node.heuristic} aiTurn: ${aiTurn}`)\n        return\n    }\n    for (var c = 0; c < data.aiPath.length; c++){\n        if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(node, data.aiPath[c].x, data.aiPath[c].y)){\n            node[nbNode] = getChild(data.aiPath[c], node, color)\n            if (depth > 1)\n                minmax(node[nbNode], depth - 1)\n            else\n                node[nbNode].heuristic = getHeuristic(node[nbNode], data)\n            uploadHeuristic(node, node[nbNode], depth,aiTurn)\n            if (getAlphaBetaPruning(node, node[nbNode].heuristic, aiTurn))\n                break\n            node[nbNode] = undefined // À remettre\n            nbNode++\n        }\n    }\n}\n\nconst getBufferMemory = (board) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    return res\n}\n\nconst initHeuristic = () => {\n    var res = {}\n    var pow = 0\n    for (var c = heuristic.length - 1; c >= 0; c--){\n        res[heuristic[c]] = Math.pow(10, pow)\n        pow++\n    }\n    return res\n}\n\nconst initData = (mainData) => {\n    var start = window.performance.now()\n    data = {}\n    data.depth = 3\n    data.treatmentSpace = 3\n    if (361 - data.piecesOnBoard < data.depth)\n        data.depth = 361 - data.piecesOnBoard\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = mainData.playerColor\n    data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n    console.log(`${data.aiColor === data.WHITE ? 'WHITE\\'S' : 'BLACK\\'S'} TURN`)\n    data.board = mainData.board\n    data.aiPath = getAiPath(mainData.board, data.treatmentSpace)\n    data.bufferMemory = getBufferMemory(mainData.board)\n    data.heuristicAiDiviser = 1\n    // if (data.depth % 2)\n    //     data.heuristicAiDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n    data.heuristic = initHeuristic() // A NE PAS FAIRE A CHAQUE APPEL DE L'IA\n    data.heuristicTime = 0 // TMP\n    data.cancelForwardTime = 0 // TMP\n    data.noStonesTime = 0 // TMP\n    var end = window.performance.now()\n    data.initDataTime = end - start // TMP\n    data.saveMinMax = [] // TMP\n    data.ctx = mainData.ctx // TMP\n    data.images = mainData.images // TMP\n    data.canvas = mainData.canvas // TMP\n}\n\nconst printTime = data => {\n    console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`)\n    console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`)\n    console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`)\n    console.log(`init data time: ${Math.floor(data.initDataTime)}ms`)\n    console.log(`total time: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`)\n}\n\nconst printChoosenStones = (node, line) => {\n    var nbNode = 0\n    if (!node || !node[0])\n        return\n    while (node[nbNode].heuristic !== node.heuristic)\n        nbNode++\n    var color = line % 2 ? data.playerColor : data.aiColor\n    var stringColor = color === data.BLACK ? 'black' : 'white'\n    console.log(`${stringColor} in ${node[nbNode].x} ${node[nbNode].y}`)\n    if (node[nbNode].heuristicInfos)\n        console.log(node[nbNode].heuristicInfos)\n    printChoosenStones(node[nbNode], line + 1)\n}\n\nconst printSaveMinMax = (tree, data) => {\n    var count = 0\n    window.onkeydown = e => {\n        if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft')\n            return\n        data.board = data.saveMinMax[count].board\n        console.clear()\n        console.log(`final heuristic: ${tree.heuristic}`)\n        printChoosenStones(tree, 0)\n        console.log(`current heuristic : ${data.saveMinMax[count].heuristic}`)\n        console.log(data.saveMinMax[count].heuristicInfos)\n        printBoard(data)\n        if (e.key === 'ArrowRight' && count < data.saveMinMax.length - 1)\n            count += 1\n        else if (e.key === 'ArrowLeft' && count > 0)\n            count -= 1\n    }\n}\n\nvar saveGame = []\nconst printSaveGame = data => {\n    var count = 0\n    window.onkeydown = e => {\n        if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft')\n            return\n        data.board = saveGame[count]\n        printBoard(data)\n        if (e.key === 'ArrowRight' && count < saveGame.length - 1)\n            count += 1\n        else if (e.key === 'ArrowLeft' && count > 0)\n            count -= 1\n    }\n}\n\nconst copyBoard = board => {\n    var ret = []\n    for (var y = 0; y < 19; y++){\n        ret[y] = []\n        for (var x = 0; x < 19; x++){\n            ret[y][x] = board[y][x]\n        }\n    }\n    return ret\n}\n\nconst ai = (mainData) => {\n    saveGame.push(copyBoard(mainData.board))\n    initData(mainData)\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    minmax(tree, data.depth)\n    printTime(data,tree)\n    // console.log(`heuristic: ${tree.heuristic}`)\n    // printChoosenStones(tree, 0)\n    // printSaveMinMax(tree, data)\n    // printSaveGame(data)\n    console.log('----------------')\n    var pos = {...tree.bestPos}\n    // data = undefined // À remettre\n    tree = undefined\n    return pos\n}\n\nexport default ai"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}