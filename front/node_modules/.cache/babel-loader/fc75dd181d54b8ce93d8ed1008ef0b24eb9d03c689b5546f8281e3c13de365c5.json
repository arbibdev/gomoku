{"ast":null,"code":"import { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\nimport ai from '../../tools/ai/ai';\nconst getSuggestion = data => {\n  data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n  return ai(data);\n};\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst setEndGame = data => {};\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tlaunchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     printBoard(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n// CLICK WITH C ALGO\n\n// const printSuggestion = data => {\n// \tlaunchAi\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame || data.aiLaunched)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// launchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.canvas.onclick = e => canvasOnClick(e, data)\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","serverIp","printBoard","checkEndGame","io","ai","getSuggestion","data","playerColor","turn","WHITE","BLACK","printSuggestion","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","setEndGame","initGame"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\nimport ai from '../../tools/ai/ai'\n\nconst getSuggestion = data => {\n    data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n    return ai(data)\n}\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst setEndGame = (data) => {\n}\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tlaunchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     printBoard(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n\n\n\n\n// CLICK WITH C ALGO\n\n\n\n\n// const printSuggestion = data => {\n// \tlaunchAi\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame || data.aiLaunched)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// launchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.canvas.onclick = e => canvasOnClick(e, data)\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n\nexport default initGame"],"mappings":"AACA,SAASA,gBAAgB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,mBAAmB;AACzE,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,EAAE,MAAM,mBAAmB;AAElC,MAAMC,aAAa,GAAGC,IAAI,IAAI;EAC1BA,IAAI,CAACC,WAAW,GAAGD,IAAI,CAACE,IAAI,KAAKF,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACI,KAAK,GAAGJ,IAAI,CAACG,KAAK;EACrE,OAAOL,EAAE,CAACE,IAAI,CAAC;AACnB,CAAC;AAED,MAAMK,eAAe,GAAGL,IAAI,IAAI;EAC5BA,IAAI,CAACM,GAAG,CAACC,SAAS,CACdP,IAAI,CAACQ,MAAM,CAACC,UAAU,EACtBT,IAAI,CAACQ,MAAM,CAACE,WAAW,CAACC,KAAK,GAAGX,IAAI,CAACS,UAAU,CAACG,CAAC,GAAG,EAAE,EACtDZ,IAAI,CAACQ,MAAM,CAACE,WAAW,CAACG,MAAM,GAAGb,IAAI,CAACS,UAAU,CAACK,CAAC,GAAG,EAAE,CAC1D;AACL,CAAC;AAED,MAAMC,UAAU,GAAIf,IAAI,IAAK,CAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAegB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}