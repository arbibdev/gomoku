{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\nimport drawTree from \"./drawTree\";\nimport getIaPath from \"./getIaPath\";\nconst checkEndGame = (data, playerColor) => {\n  const checkStones = (x, y, board, playerColor, orientation) => {\n    var nb = 0;\n    var color = board[y][x];\n    while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color) nb++;\n    while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color) nb++;\n    while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color) nb++;\n    while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color) nb++;\n    if (nb >= 5) return color === playerC;\n    return false;\n  };\n  const checkAlignment = (x, y, board, playerColor) => {\n    var winner;\n    if ((winner = checkStones(x, y, board, playerColor, 'vertical')) || (winner = checkStones(x, y, board, playerColor, 'horizontal')) || (winner = checkStones(x, y, board, playerColor, 'diagonal1')) || (winner = checkStones(x, y, board, playerColor, 'diagonal2'))) return winner;\n    return false;\n  };\n  const checkWinner = (data, playerColor) => {\n    var winner;\n    for (var y = 0; y < 19; y++) {\n      for (var x = 0; x < 19; x++) {\n        if (data.board[y][x] && (winner = checkAlignment(x, y, data.board, playerColor))) return winner;\n      }\n    }\n    return false;\n  };\n  var winner = checkWinner(data, playerColor);\n  if (winner) return winner;\n  return false;\n};\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board[y][x];\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst singleStonesHeuristic = board => {\n  var heuristic = 0;\n  var localHeuristic;\n  var freeNeighbour;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        localHeuristic = 10;\n        freeNeighbour = 1;\n        if (y - 1 >= 0 && !board[y - 1][x]) freeNeighbour += 1;\n        if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && !board[y][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1]) freeNeighbour += 1;\n        if (y + 1 < 19 && !board[y + 1][x]) freeNeighbour += 1;\n        if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && !board[y][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) localHeuristic *= freeNeighbour;\n        if (localHeuristic > 10) {\n          if (board[y][x] === data.iaColor) heuristic += localHeuristic;else heuristic -= localHeuristic;\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getNeighbour1 = (x, y, board, orientation) => {\n  if (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x] || orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1] || orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1] || orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1]) return 1;\n  return 0;\n};\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n  if (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x] || orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb] || orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb] || orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb]) return 1;\n  return 0;\n};\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL) {\n    checkedBoard[y][x] = data.VERTICAL;\n    nb++;\n    y++;\n  }\n  return nb;\n};\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL) {\n    checkedBoard[y][x] = data.HORIZONTAL;\n    nb++;\n    x++;\n  }\n  return nb;\n};\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1) {\n    checkedBoard[y][x] = data.DIAGONAL1;\n    nb++;\n    x++;\n    y++;\n  }\n  return nb;\n};\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2) {\n    checkedBoard[y][x] = data.DIAGONAL2;\n    nb++;\n    x--;\n    y++;\n  }\n  return nb;\n};\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n  var nb = 0;\n  var color = board[y][x];\n  var neighbour1 = getNeighbour1(x, y, board, orientation);\n  var saveX = x;\n  var saveY = y;\n  if (orientation === data.VERTICAL) nb = checkVerticalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.HORIZONTAL) nb = checkHorizontalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL1) nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL2) nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard);\n  // while (orientation === data.VERTICAL && y++ < 19 && board[y - 1][x] === color)nb++\n  // while (orientation === data.HORIZONTAL && x++ < 19 && board[y][x - 1] === color)nb++\n  // while (orientation === data.DIAGONAL1 && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n  // while (orientation === data.DIAGONAL2 && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n  if (nb > 1) {\n    var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation);\n    if (nb < 5 && !neighbour1 && !neighbour2) return false;\n    return {\n      nb,\n      neighbour1,\n      neighbour2\n    };\n  }\n  return false;\n};\nconst checkAlignment = (x, y, board, checkedBoard) => {\n  var alignment = [];\n  var ret;\n  for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++) {\n    if (ret = checkStones(x, y, board, c, checkedBoard)) alignment.push(ret);\n  }\n  return alignment;\n  // if (\n  //     (alignment = checkStones(x, y, board, data.VERTICAL, checkedBoard)) ||\n  //     (alignment = checkStones(x, y, board, data.HORIZONTAL, checkedBoard)) ||\n  //     (alignment = checkStones(x, y, board, data.DIAGONAL1, checkedBoard)) ||\n  //     (alignment = checkStones(x, y, board, data.DIAGONAL2, checkedBoard))\n  // )\n  //     return alignment\n  // return false\n};\n\nconst initCheckedBoard = () => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = 0;\n    }\n  }\n  return res;\n};\nconst alignmentsHeuristic = board => {\n  var heuristic = 0;\n  var alignment;\n  var checkedBoard = initCheckedBoard();\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] && board[y][x] !== data.FORBIDDEN) {\n        alignment = checkAlignment(x, y, board, checkedBoard);\n        for (var c = 0; c < alignment.length; c++) {\n          if (board[y][x] === data.iaColor) {\n            // if (alignment[c].nb >= 5)\n            //     heuristic += Infinity\n            // else\n            heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n          } else {\n            // if (alignment[c].nb >= 5)\n            //     heuristic -= Infinity\n            // else\n            heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n          }\n        }\n      }\n    }\n  }\n  if (!heuristic && heuristic !== 0) console.log('OOUUUPS ! NaN');\n  return heuristic;\n};\nconst getHeuristic = node => {\n  data.nbLeaves += 1; // TMP\n  var board = getBoard(node);\n  var h1 = singleStonesHeuristic(board);\n  var h2 = alignmentsHeuristic(board);\n  return h1 + h2;\n};\n\n// const getHeuristic = (node) => {\n//     var ret = data.heuristic[data.heuristicIndex]\n//     data.heuristicIndex++\n//     return ret\n// }\n\nconst getBestHeuristic = (node, extrem) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[nbNode]) {\n    if (bestHeuristic === false || extrem === data.MIN && node[nbNode].heuristic < bestHeuristic || extrem === data.MAX && node[nbNode].heuristic > bestHeuristic) {\n      bestHeuristic = node[nbNode].heuristic;\n    }\n    nbNode++;\n  }\n  return bestHeuristic;\n};\nconst getFinalPosition = (node, bestHeuristic) => {\n  // PEUT LARGEMENT ETRE OPTIMISÉE\n  var nbNode = 0;\n  var bestMove = [];\n  while (node[nbNode].heuristic !== bestHeuristic) {\n    nbNode++;\n  }\n  return {\n    x: node[nbNode].x,\n    y: node[nbNode].y\n  };\n  // return {\n  //     heuristic : bestHeuristic,\n  //     x : bestMove[moveChoosen].x,\n  //     y : bestMove[moveChoosen].y\n  // }\n};\n\nconst getBestMove = (node, extrem, depth) => {\n  var bestHeuristic = getBestHeuristic(node, extrem);\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  var finalPosition = getFinalPosition(node, bestHeuristic);\n  return {\n    ...finalPosition,\n    heuristic: bestHeuristic\n  };\n};\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node[nbNode].heuristic > node.alpha) node.alpha = node[nbNode].heuristic;\n  } else {\n    if (node[nbNode].heuristic < node.beta) node.beta = node[nbNode].heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst increment = pos => {\n  pos.x++;\n  if (pos.x === 19) {\n    pos.x = 0;\n    pos.y++;\n  }\n  if (pos.y === 19) return false;\n  return true;\n};\nconst getChild = (pos, node, depth, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst uploadHeuristic = (depth, node) => {\n  var bestMove;\n  if (data.depth % 2 !== depth % 2) bestMove = getBestMove(node, data.MIN, depth);else bestMove = getBestMove(node, data.MAX, depth);\n  node.heuristic = bestMove.heuristic;\n  if (depth === data.depth) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n  return false;\n};\n\n// const uploadHeuristic = (depth, node) => {\n//     var bestMove\n//     if ((data.depth % 2) !== (depth % 2)){\n//         bestMove = getBestMove(node, data.MIN, depth)\n//         if (bestMove.heuristic < node.heuristic)\n//             node.heuristic = bestMove.heuristic\n//     }\n//     else{\n//         bestMove = getBestMove(node, data.MAX, depth)\n//         if (bestMove.heuristic > node.heuristic)\n//             node.heuristic = bestMove.heuristic\n//     }\n//     if (depth === data.depth){\n//         node.heuristic = bestMove.heuristic\n//         return {x : bestMove.x, y : bestMove.y}\n//     }\n//     return false\n// }\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var color = (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n//     for (var c = 0; c < data.iaPath.length; c++){\n//         if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n//             node[nbNode] = getChild(data.iaPath[c], node, depth, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode])\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 break\n//             nbNode++\n//         }\n//     }\n//     var bestMove\n//     if ((bestMove = uploadHeuristic(depth, node)))\n//         return {x : bestMove.x, y : bestMove.y}\n// }\n\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var color = data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor;\n  if (checkEndGame(getBoard(node))) for (var c = 0; c < data.iaPath.length; c++) {\n    if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)) {\n      node[nbNode] = getChild(data.iaPath[c], node, depth, color);\n      if (depth > 1) minmax(node[nbNode], depth - 1);else node[nbNode].heuristic = getHeuristic(node[nbNode]);\n      if (getAlphaBetaPruning(node, depth, nbNode)) break;\n      nbNode++;\n    }\n  }\n  var bestMove;\n  if (bestMove = uploadHeuristic(depth, node)) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n};\nconst blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      if (pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 && (board[pos[0].y][pos[0].x] === data.WHITE || board[pos[0].y][pos[0].x] === data.BLACK) || pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 && (board[pos[1].y][pos[1].x] === data.WHITE || board[pos[1].y][pos[1].x] === data.BLACK) || pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 && (board[pos[2].y][pos[2].x] === data.WHITE || board[pos[2].y][pos[2].x] === data.BLACK) || pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 && (board[pos[3].y][pos[3].x] === data.WHITE || board[pos[3].y][pos[3].x] === data.BLACK)) return false;\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && blockCase(x, y, board, offset)) board[y][x] = data.FORBIDDEN;\n    }\n  }\n};\nconst emptyBoard = board => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] !== data.FORBIDDEN) return false;\n    }\n  }\n  return true;\n};\nconst freeSquareOnTheMiddle = board => {\n  // IMPLEMENTER POUR LE CAS OÙ LE BOARD EST FULL ET RETIRER CETTE FONCTION !!!!!!\n  for (var y = 6; y < 12; y++) {\n    for (var x = 6; x < 12; x++) {\n      board[y][x] = 0;\n    }\n  }\n};\nconst getStartBoard = (board, offset) => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, offset);\n  if (emptyBoard(res)) freeSquareOnTheMiddle(res);\n  return res;\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  // data.board = getStartBoard(board, 1)\n  data.board = board;\n  data.iaPath = getIaPath(board);\n  data.depth = 3;\n  data.callsToMinMax = 0;\n  data.heuristicIndex = 0;\n  // data.heuristic = [-1, 3, 5, -6, -4]\n  data.heuristic = [8, 5, 6, -4, 3, 8, 4, -6, 1, 5, 2];\n  data.boards = []; // TMP\n  data.nbLeaves = 0; // TMP\n};\n\nconst getTreeToPrint = (node, depth) => {\n  var nbNode = 0;\n  var res = {};\n  res.heuristic = node.heuristic;\n  res.x = node.x;\n  res.y = node.y;\n  while (node[nbNode]) {\n    if (depth > 0) res[nbNode] = getTreeToPrint(node[nbNode], depth - 1);\n    nbNode += 1;\n  }\n  return res;\n};\nconst printTree = (tree, indentation) => {\n  var nbNode = 0;\n  var prefix = '';\n  for (var c = 0; c < indentation; c++) {\n    prefix += '----';\n  }\n  console.log(`${prefix}(${tree.heuristic})`);\n  while (tree[nbNode]) {\n    printTree(tree[nbNode], indentation + 1);\n    nbNode++;\n  }\n};\nconst printBackground = (ctx, canvas, images) => {\n  ctx.fillStyle = '#a6683e';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  for (var y = 0; y < 18; y++) {\n    for (var x = 0; x < 18; x++) ctx.drawImage(images.gomokuBoard, x * images.gomokuBoard.width + images.blackPiece.width / 2, y * images.gomokuBoard.height + images.blackPiece.width / 2);\n  }\n};\nconst printStones = (board, ctx, images) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        var stone = board[y][x] === data.WHITE ? images.whitePiece : images.blackPiece;\n        ctx.drawImage(stone, images.gomokuBoard.width * x, images.gomokuBoard.height * y);\n      }\n    }\n  }\n};\nconst printBoard = (board, ctx, images, canvas) => {\n  printBackground(ctx, canvas, images);\n  printStones(board, ctx, images);\n};\n\n// const printBoards = (ctx, images, canvas) => {\n//     var c = -1\n//     document.onkeydown = e => {\n//         if (e.key === 'Enter')\n//             c++\n//         else if (e.key === ' ')\n//             c += 100\n//         else if (e.key === 'Backspace')\n//             c -= 100\n//         else\n//             return\n//         if (!data.boards[c])\n//             return\n//         printBoard(data.boards[c].board, ctx, images, canvas)\n//         console.clear()\n//         console.log('------------------------')\n//         // console.log('heuristic:', data.boards[c].node.heuristic)\n//         // console.log('parent heuristic:', data.boards[c].node.parent.heuristic)\n//         // console.log('infos heuristic:', data.boards[c].h2)\n//         console.log(data.boards[c].h2)\n//         console.log('------------------------')\n//     }\n// }\n\nconst printHeuristic = (ctx, images, canvas, tree) => {\n  const printBestNodes = (node, firstCall) => {\n    if (firstCall) {\n      console.log(node.heuristic);\n      console.log('CHILDS POSITIONS :');\n    } else console.log('x:', node.x, 'y:', node.y);\n    var nbNode = 0;\n    while (node[nbNode] && node[nbNode].heuristic !== node.heuristic) nbNode++;\n    if (node[nbNode]) printBestNodes(node[nbNode]);\n  };\n  var c = -1;\n  document.onkeydown = e => {\n    if (e.key !== 'Enter') return;\n    var board = [];\n    for (var y = 0; y < 19; y++) {\n      board[y] = [];\n      for (var x = 0; x < 19; x++) {\n        board[y][x] = data.board[y][x];\n      }\n    }\n    printBestNodes(tree, 1);\n  };\n};\nconst ia = (board, playerColor, mainData, images) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  mainData.forbiddenStones = data.board;\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  var pos = minmax(tree, data.depth);\n  printHeuristic(mainData.ctx, images, mainData.canvas, tree);\n  // printBoards(mainData.ctx, images, mainData.canvas)\n  // var treeToPrint = getTreeToPrint(tree, data.depth)\n  // printTree(tree, 0)\n  // console.log('heuristic', tree.heuristic)\n  // console.log(treeToPrint)\n  // var bestChild = tree[tree.bestChild]\n  // var bestLittleChild = bestChild[bestChild.bestChild]\n  // console.log('best child :', bestChild.y, bestChild.x)\n  // console.log('best child :', bestLittleChild.y, bestLittleChild.x)\n  console.log('calls to minmax : ', data.callsToMinMax);\n  drawTree(tree, data.depth, data.nbLeaves);\n  return pos;\n};\n// PENSER À TOUT FREE À LA FIN !!\n\nexport default ia;","map":{"version":3,"names":["getRandomInt","drawTree","getIaPath","checkEndGame","data","playerColor","checkStones","x","y","board","orientation","nb","color","playerC","checkAlignment","winner","checkWinner","getBoard","node","res","parent","noStones","singleStonesHeuristic","heuristic","localHeuristic","freeNeighbour","iaColor","getNeighbour1","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","getNeighbour2","checkVerticalAlignment","checkedBoard","checkHorizontalAlignment","checkDiagonal1Alignment","checkDiagonal2Alignment","neighbour1","saveX","saveY","neighbour2","alignment","ret","c","push","initCheckedBoard","alignmentsHeuristic","FORBIDDEN","length","Math","pow","console","log","getHeuristic","nbLeaves","h1","h2","getBestHeuristic","extrem","nbNode","bestHeuristic","MIN","MAX","getFinalPosition","bestMove","getBestMove","depth","finalPosition","getAlphaBetaPruning","alpha","beta","increment","pos","getChild","uploadHeuristic","minmax","callsToMinMax","iaPath","blockCase","offset","i","WHITE","BLACK","blockBoard","emptyBoard","freeSquareOnTheMiddle","getStartBoard","initData","heuristicIndex","boards","getTreeToPrint","printTree","tree","indentation","prefix","printBackground","ctx","canvas","images","fillStyle","fillRect","width","height","drawImage","gomokuBoard","blackPiece","printStones","stone","whitePiece","printBoard","printHeuristic","printBestNodes","firstCall","document","onkeydown","e","key","ia","mainData","forbiddenStones","Infinity"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\nimport drawTree from \"./drawTree\"\nimport getIaPath from \"./getIaPath\"\n\nconst checkEndGame = (data, playerColor) => {\n\n    const checkStones = (x, y, board, playerColor, orientation) => {\n        var nb = 0\n        var color = board[y][x]\n        while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color)nb++\n        while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color)nb++\n        while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n        while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n        if (nb >= 5)\n            return color === playerC\n        return false\n    }\n    \n    const checkAlignment = (x, y, board, playerColor) => {\n        var winner\n        if (\n            (winner = checkStones(x, y, board, playerColor, 'vertical')) ||\n            (winner = checkStones(x, y, board, playerColor, 'horizontal')) ||\n            (winner = checkStones(x, y, board, playerColor, 'diagonal1')) ||\n            (winner = checkStones(x, y, board, playerColor, 'diagonal2'))\n        )\n            return winner\n        return false\n    }\n    \n    const checkWinner = (data, playerColor) => {\n        var winner\n        for (var y = 0; y < 19; y++){\n            for (var x = 0; x < 19; x++){\n                if (data.board[y][x] && (winner = checkAlignment(x, y, data.board, playerColor)))\n                    return winner\n            }\n        }\n        return false\n    }\n\n    var winner = checkWinner(data, playerColor)\n    if (winner)\n        return winner\n    return false\n}\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board[y][x]\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst singleStonesHeuristic = board => {\n    var heuristic = 0\n    var localHeuristic\n    var freeNeighbour\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                localHeuristic = 10\n                freeNeighbour = 1\n                if (y - 1 >= 0 && !board[y - 1][x])\n                    freeNeighbour += 1\n                if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && !board[y][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && !board[y + 1][x])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && !board[y][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n                localHeuristic *= freeNeighbour\n                if (localHeuristic > 10)\n                {\n                    if (board[y][x] === data.iaColor)\n                        heuristic += localHeuristic\n                    else\n                        heuristic -= localHeuristic\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getNeighbour1 = (x, y, board, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x]) ||\n        (orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1]) ||\n        (orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) ||\n        (orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1])\n    )\n        return 1\n    return 0\n}\n\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x]) ||\n        (orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb]) ||\n        (orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb]) ||\n        (orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb])\n    )\n        return 1\n    return 0\n}\n\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL){\n        checkedBoard[y][x] = data.VERTICAL\n        nb++\n        y++\n    }\n    return nb\n}\n\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL){\n        checkedBoard[y][x] = data.HORIZONTAL\n        nb++\n        x++\n    }\n    return nb\n}\n\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1){\n        checkedBoard[y][x] = data.DIAGONAL1\n        nb++\n        x++\n        y++\n    }\n    return nb\n}\n\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2){\n        checkedBoard[y][x] = data.DIAGONAL2\n        nb++\n        x--\n        y++\n    }\n    return nb\n}\n\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n    var nb = 0\n    var color = board[y][x]\n    var neighbour1 = getNeighbour1(x, y, board, orientation)\n    var saveX = x\n    var saveY = y\n    if (orientation === data.VERTICAL)\n        nb = checkVerticalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.HORIZONTAL)\n        nb = checkHorizontalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL1)\n        nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL2)\n        nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard)\n    // while (orientation === data.VERTICAL && y++ < 19 && board[y - 1][x] === color)nb++\n    // while (orientation === data.HORIZONTAL && x++ < 19 && board[y][x - 1] === color)nb++\n    // while (orientation === data.DIAGONAL1 && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n    // while (orientation === data.DIAGONAL2 && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n    if (nb > 1){\n        var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation)\n        if (nb < 5 && !neighbour1 && !neighbour2)\n            return false\n        return {\n            nb,\n            neighbour1,\n            neighbour2\n        }\n    }\n    return false\n}\n\nconst checkAlignment = (x, y, board, checkedBoard) => {\n    var alignment = []\n    var ret\n    for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++){\n        if ((ret = checkStones(x, y, board, c, checkedBoard)))\n            alignment.push(ret)\n    }\n    return alignment\n    // if (\n    //     (alignment = checkStones(x, y, board, data.VERTICAL, checkedBoard)) ||\n    //     (alignment = checkStones(x, y, board, data.HORIZONTAL, checkedBoard)) ||\n    //     (alignment = checkStones(x, y, board, data.DIAGONAL1, checkedBoard)) ||\n    //     (alignment = checkStones(x, y, board, data.DIAGONAL2, checkedBoard))\n    // )\n    //     return alignment\n    // return false\n}\n\nconst initCheckedBoard = () => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = 0\n        }\n    }\n    return res\n}\n\nconst alignmentsHeuristic = (board) => {\n    var heuristic = 0\n    var alignment\n    var checkedBoard = initCheckedBoard()\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] && board[y][x] !== data.FORBIDDEN){\n                alignment = checkAlignment(x, y, board, checkedBoard)\n                for (var c = 0; c < alignment.length; c++){\n                    if (board[y][x] === data.iaColor){\n                        // if (alignment[c].nb >= 5)\n                        //     heuristic += Infinity\n                        // else\n                            heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    }\n                    else{\n                        // if (alignment[c].nb >= 5)\n                        //     heuristic -= Infinity\n                        // else\n                            heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    }\n                }\n            }\n        }\n    }\n    if (!heuristic && heuristic !== 0)\n        console.log('OOUUUPS ! NaN')\n    return heuristic\n}\n\nconst getHeuristic = (node) => {\n    data.nbLeaves += 1 // TMP\n    var board = getBoard(node)\n    var h1 = singleStonesHeuristic(board)\n    var h2 = alignmentsHeuristic(board)\n    return h1 + h2\n}\n\n// const getHeuristic = (node) => {\n//     var ret = data.heuristic[data.heuristicIndex]\n//     data.heuristicIndex++\n//     return ret\n// }\n\nconst getBestHeuristic = (node, extrem) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[nbNode]){\n        if (\n            bestHeuristic === false ||\n            (extrem === data.MIN && node[nbNode].heuristic < bestHeuristic) ||\n            (extrem === data.MAX && node[nbNode].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[nbNode].heuristic\n        }\n        nbNode++\n    }\n    return bestHeuristic\n}\n\nconst getFinalPosition = (node, bestHeuristic) => { // PEUT LARGEMENT ETRE OPTIMISÉE\n    var nbNode = 0\n    var bestMove = []\n    while (node[nbNode].heuristic !== bestHeuristic){\n        nbNode++\n    }\n    return {\n        x : node[nbNode].x,\n        y : node[nbNode].y\n    }\n    // return {\n    //     heuristic : bestHeuristic,\n    //     x : bestMove[moveChoosen].x,\n    //     y : bestMove[moveChoosen].y\n    // }\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var bestHeuristic = getBestHeuristic(node, extrem)\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    var finalPosition = getFinalPosition(node, bestHeuristic)\n    return {\n        ...finalPosition,\n        heuristic : bestHeuristic\n    }\n    \n}\n\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n    if ((data.depth % 2) === (depth % 2)){\n        if (node[nbNode].heuristic > node.alpha)\n            node.alpha = node[nbNode].heuristic\n    }\n    else{\n        if ((node[nbNode].heuristic < node.beta))\n            node.beta = node[nbNode].heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst increment = (pos) => {\n    pos.x++\n    if (pos.x === 19){\n        pos.x = 0\n        pos.y++\n    }\n    if (pos.y === 19)\n        return false\n    return true\n}\n\nconst getChild = (pos, node, depth, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst uploadHeuristic = (depth, node) => {\n    var bestMove\n    if ((data.depth % 2) !== (depth % 2))\n        bestMove = getBestMove(node, data.MIN, depth)\n    else\n        bestMove = getBestMove(node, data.MAX, depth)\n    node.heuristic = bestMove.heuristic\n    if (depth === data.depth)\n        return {x : bestMove.x, y : bestMove.y}\n    return false\n}\n\n// const uploadHeuristic = (depth, node) => {\n//     var bestMove\n//     if ((data.depth % 2) !== (depth % 2)){\n//         bestMove = getBestMove(node, data.MIN, depth)\n//         if (bestMove.heuristic < node.heuristic)\n//             node.heuristic = bestMove.heuristic\n//     }\n//     else{\n//         bestMove = getBestMove(node, data.MAX, depth)\n//         if (bestMove.heuristic > node.heuristic)\n//             node.heuristic = bestMove.heuristic\n//     }\n//     if (depth === data.depth){\n//         node.heuristic = bestMove.heuristic\n//         return {x : bestMove.x, y : bestMove.y}\n//     }\n//     return false\n// }\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var color = (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n//     for (var c = 0; c < data.iaPath.length; c++){\n//         if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n//             node[nbNode] = getChild(data.iaPath[c], node, depth, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode])\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 break\n//             nbNode++\n//         }\n//     }\n//     var bestMove\n//     if ((bestMove = uploadHeuristic(depth, node)))\n//         return {x : bestMove.x, y : bestMove.y}\n// }\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var color = (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n    if (checkEndGame(getBoard(node)))\n    for (var c = 0; c < data.iaPath.length; c++){\n        if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n            node[nbNode] = getChild(data.iaPath[c], node, depth, color)\n            if (depth > 1)\n                minmax(node[nbNode], depth - 1)\n            else\n                node[nbNode].heuristic = getHeuristic(node[nbNode])\n            if (getAlphaBetaPruning(node, depth, nbNode))\n                break\n            nbNode++\n        }\n    }\n    var bestMove\n    if ((bestMove = uploadHeuristic(depth, node)))\n        return {x : bestMove.x, y : bestMove.y}\n}\n\nconst blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            if (\n                (\n                    pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 &&\n                    (board[pos[0].y][pos[0].x] === data.WHITE || board[pos[0].y][pos[0].x] === data.BLACK)\n                ) ||\n                (\n                    pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 &&\n                    (board[pos[1].y][pos[1].x] === data.WHITE || board[pos[1].y][pos[1].x] === data.BLACK)\n                ) ||\n                (\n                    pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 &&\n                    (board[pos[2].y][pos[2].x] === data.WHITE || board[pos[2].y][pos[2].x] === data.BLACK)\n                ) ||\n                (\n                    pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 &&\n                    (board[pos[3].y][pos[3].x] === data.WHITE || board[pos[3].y][pos[3].x] === data.BLACK)\n                )\n            )\n                    return false\n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n            \n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && blockCase(x, y, board, offset))\n                board[y][x] = data.FORBIDDEN\n        }\n    }\n}\n\nconst emptyBoard = board => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] !== data.FORBIDDEN)\n                return false\n        }\n    }\n    return true\n}\n\nconst freeSquareOnTheMiddle = board => { // IMPLEMENTER POUR LE CAS OÙ LE BOARD EST FULL ET RETIRER CETTE FONCTION !!!!!!\n    for (var y = 6; y < 12; y++){\n        for (var x = 6; x < 12; x++){\n            board[y][x] = 0\n        }\n    }\n}\n\nconst getStartBoard = (board, offset) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, offset)\n    if (emptyBoard(res))\n        freeSquareOnTheMiddle(res)\n    return res\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = playerColor\n    data.iaColor = playerColor === data.WHITE ? data.BLACK : data.WHITE\n    // data.board = getStartBoard(board, 1)\n    data.board = board\n    data.iaPath = getIaPath(board)\n    data.depth = 3\n    data.callsToMinMax = 0\n    data.heuristicIndex = 0\n    // data.heuristic = [-1, 3, 5, -6, -4]\n    data.heuristic = [8, 5, 6, -4, 3, 8, 4, -6, 1, 5, 2]\n    data.boards = [] // TMP\n    data.nbLeaves = 0 // TMP\n}\n\nconst getTreeToPrint = (node, depth) => {\n    var nbNode = 0\n    var res = {}\n    res.heuristic = node.heuristic\n    res.x = node.x\n    res.y = node.y\n    while (node[nbNode]){\n        if (depth > 0)\n            res[nbNode] = getTreeToPrint(node[nbNode], depth - 1)\n        nbNode += 1\n    }\n    return res\n}\n\nconst printTree = (tree, indentation) => {\n    var nbNode = 0\n    var prefix = ''\n    for (var c = 0; c < indentation; c++){\n        prefix += '----'\n    }\n    console.log(`${prefix}(${tree.heuristic})`)\n    while (tree[nbNode]){\n        printTree(tree[nbNode], indentation + 1)\n        nbNode++\n    }\n}\n\nconst printBackground = (ctx, canvas, images) => {\n    ctx.fillStyle = '#a6683e'\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n    for (var y = 0; y < 18; y++){\n        for (var x = 0; x < 18; x++)\n            ctx.drawImage(\n                images.gomokuBoard,\n                x * images.gomokuBoard.width + images.blackPiece.width / 2,\n                y * images.gomokuBoard.height + images.blackPiece.width / 2\n            )\n    }\n}\n\nconst printStones = (board, ctx, images) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                var stone = board[y][x] === data.WHITE ? images.whitePiece : images.blackPiece\n                ctx.drawImage(\n                    stone,\n                    images.gomokuBoard.width * x,\n                    images.gomokuBoard.height * y\n                )\n            }\n        }\n    }\n}\n\nconst printBoard = (board, ctx, images, canvas) => {\n    printBackground(ctx, canvas, images)\n    printStones(board, ctx, images)\n}\n\n// const printBoards = (ctx, images, canvas) => {\n//     var c = -1\n//     document.onkeydown = e => {\n//         if (e.key === 'Enter')\n//             c++\n//         else if (e.key === ' ')\n//             c += 100\n//         else if (e.key === 'Backspace')\n//             c -= 100\n//         else\n//             return\n//         if (!data.boards[c])\n//             return\n//         printBoard(data.boards[c].board, ctx, images, canvas)\n//         console.clear()\n//         console.log('------------------------')\n//         // console.log('heuristic:', data.boards[c].node.heuristic)\n//         // console.log('parent heuristic:', data.boards[c].node.parent.heuristic)\n//         // console.log('infos heuristic:', data.boards[c].h2)\n//         console.log(data.boards[c].h2)\n//         console.log('------------------------')\n//     }\n// }\n\nconst printHeuristic = (ctx, images, canvas, tree) => {\n\n    const printBestNodes = (node, firstCall) => {\n        if (firstCall){\n            console.log(node.heuristic)\n            console.log('CHILDS POSITIONS :')\n        }\n        else\n            console.log('x:', node.x, 'y:', node.y)\n        var nbNode = 0\n        while (node[nbNode] && node[nbNode].heuristic !== node.heuristic)\n            nbNode++\n        if (node[nbNode])\n            printBestNodes(node[nbNode])\n    }\n\n    var c = -1\n    document.onkeydown = e => {\n        if (e.key !== 'Enter')\n            return\n        var board = []\n        for (var y = 0; y < 19; y++){\n            board[y] = []\n            for (var x = 0; x < 19; x++){\n                board[y][x] = data.board[y][x]\n            }\n        }\n        printBestNodes(tree, 1)\n    }\n}\n\nconst ia = (board, playerColor, mainData, images) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    mainData.forbiddenStones = data.board\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    var pos = minmax(tree, data.depth)\n    printHeuristic(mainData.ctx, images, mainData.canvas, tree)\n    // printBoards(mainData.ctx, images, mainData.canvas)\n    // var treeToPrint = getTreeToPrint(tree, data.depth)\n    // printTree(tree, 0)\n    // console.log('heuristic', tree.heuristic)\n    // console.log(treeToPrint)\n    // var bestChild = tree[tree.bestChild]\n    // var bestLittleChild = bestChild[bestChild.bestChild]\n    // console.log('best child :', bestChild.y, bestChild.x)\n    // console.log('best child :', bestLittleChild.y, bestLittleChild.x)\n    console.log('calls to minmax : ', data.callsToMinMax)\n    drawTree(tree, data.depth, data.nbLeaves)\n    return pos\n}\n// PENSER À TOUT FREE À LA FIN !!\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}