{"ast":null,"code":"import { freeBufferMemory, getBoard } from \"./tools\";\nconst verticalAlignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.y -= 1;\n  }\n  if (pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.y += 1;\n  while (pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst horizontalAlignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n  }\n  if (pos.x >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  while (pos.x < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst diagonal1Alignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y -= 1;\n  }\n  if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  pos.y += 1;\n  while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst diagonal2Alignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y -= 1;\n  }\n  if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x -= 1;\n  pos.y += 1;\n  while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst checkAlignments = (board, node, data) => {\n  var h = 0;\n  h += verticalAlignment(board, node);\n  h += horizontalAlignment(board, node);\n  h += diagonal1Alignment(board, node);\n  h += diagonal2Alignment(board, node);\n  if (node.color === data.aiColor) return h;\n  return -h;\n};\nconst getHeuristic = (node, data) => {\n  var heuristic = 0;\n  getBoard(node, data.bufferMemory);\n  heuristic += checkAlignments(data.bufferMemory, node, data);\n  heuristic += checkBlocking;\n  freeBufferMemory(node, data.bufferMemory);\n};\nexport default getHeuristic;","map":{"version":3,"names":["freeBufferMemory","getBoard","verticalAlignment","board","node","color","pos","x","y","neighbour1","neighbour2","sizeAlignment","Math","pow","horizontalAlignment","diagonal1Alignment","diagonal2Alignment","checkAlignments","data","h","aiColor","getHeuristic","heuristic","bufferMemory","checkBlocking"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/heuristic3.js"],"sourcesContent":["import { freeBufferMemory, getBoard } from \"./tools\"\n\nconst verticalAlignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.y -= 1\n    }\n    if (pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.y += 1\n    while (pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst horizontalAlignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n    }\n    if (pos.x >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    while (pos.x < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst diagonal1Alignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y -= 1\n    }\n    if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    pos.y += 1\n    while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst diagonal2Alignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y -= 1\n    }\n    if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x -= 1\n    pos.y += 1\n    while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst checkAlignments = (board, node, data) => {\n    var h = 0\n    h += verticalAlignment(board, node)\n    h += horizontalAlignment(board, node)\n    h += diagonal1Alignment(board, node)\n    h += diagonal2Alignment(board, node)\n    if (node.color === data.aiColor)\n        return h\n    return -h\n}\n\n\nconst getHeuristic = (node, data) => {\n    var heuristic = 0\n    getBoard(node, data.bufferMemory)\n    heuristic += checkAlignments(data.bufferMemory, node, data)\n    heuristic += checkBlocking\n    freeBufferMemory(node, data.bufferMemory)\n}\n\nexport default getHeuristic"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}