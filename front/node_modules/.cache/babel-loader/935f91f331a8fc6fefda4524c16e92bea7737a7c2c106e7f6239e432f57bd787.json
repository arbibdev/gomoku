{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board;\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst getHeuristic = node => {\n  // var board = getBoard(node)\n  ret = data.heuristic;\n};\nconst getBestMove = (node, extrem, depth) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[`${nbNode}`]) {\n    if (bestHeuristic === false || extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic || extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic) {\n      bestHeuristic = node[`${nbNode}`].heuristic;\n    }\n    nbNode++;\n  }\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  nbNode = 0;\n  var bestMove = [];\n  while (node[`${nbNode}`]) {\n    if (node[`${nbNode}`].heuristic === bestHeuristic) {\n      bestMove.push({\n        x: node[`${nbNode}`].x,\n        y: node[`${nbNode}`].y\n      });\n    }\n    nbNode++;\n  }\n  var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length);\n  return {\n    heuristic: bestHeuristic,\n    x: bestMove[moveChoosen].x,\n    y: bestMove[moveChoosen].y\n  };\n};\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node[`${nbNode}`].heuristic > node.alpha) node.alpha = node[`${nbNode}`].heuristic;\n  } else {\n    if (node[`${nbNode}`].heuristic < node.beta) node.beta = node[`${nbNode}`].heuristic;\n  }\n  if (node.beta < node.alpha) return true;\n  return false;\n};\nconst getChilds = (node, depth) => {\n  var nbNode = 0;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color: data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor,\n          alpha: node.alpha,\n          beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n        };\n\n        if (depth > 1) minmax(node[`${nbNode}`], depth - 1);else node[`${nbNode}`].heuristic = getHeuristic(node);\n        if (getAlphaBetaPruning()) return;\n        nbNode++;\n      }\n    }\n  }\n};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  getChilds(node, depth);\n  var bestMove;\n  if (data.depth % 2 !== depth % 2) bestMove = getBestMove(node, 'min', depth);else bestMove = getBestMove(node, 'max', depth);\n  if (depth === data.depth) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n  node.heuristic = bestMove.heuristic;\n  if (data.depth % 2 === depth % 2) node.parent.beta = node.beta;else node.parent.alpha = node.alpha;\n};\nconst blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      // if ((\n      //         pos[0].x >= 0 && pos[0].x < 19 &&\n      //         pos[1].x >= 0 && pos[1].x < 19 &&\n      //         pos[2].x >= 0 && pos[2].x < 19 &&\n      //         pos[3].x >= 0 && pos[3].x < 19 &&\n      //         pos[0].y >= 0 && pos[0].y < 19 &&\n      //         pos[1].y >= 0 && pos[1].y < 19 &&\n      //         pos[2].y >= 0 && pos[2].y < 19 &&\n      //         pos[3].y >= 0 && pos[3].y < 19\n      //     ) &&\n      //     (\n      //         (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black') ||\n      //         (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black') ||\n      //         (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black') ||\n      //         (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')\n      //     )\n      // )\n      //     return false\n      if (pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 && (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black') || pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 && (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black') || pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 && (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black') || pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 && (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')) return false;\n      // console.log('pos[0] ==> ', pos[0].x, pos[0].y)\n      // console.log('pos[1] ==> ', pos[1].x, pos[1].y)\n      // console.log('pos[2] ==> ', pos[2].x, pos[2].y)\n      // console.log('pos[3] ==> ', pos[3].x, pos[3].y)\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && blockCase(x, y, board, offset)) board[y][x] = 1;\n    }\n  }\n};\nconst getStartBoard = board => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, 3);\n  return res;\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  // data.board = getStartBoard(board)\n  data.board = board;\n  data.depth = 2;\n  data.callsToMinMax = 0;\n  data.heuristicIndex = 0;\n  data.heuristic = [-1, 3, 5, 6, -6, -4, 2, 1];\n};\nconst ia = (board, playerColor, mainData) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  mainData.forbiddenStones = data.board;\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  var pos = minmax(tree, data.depth);\n  console.log(data.callsToMinMax);\n  return pos;\n};\nexport default ia;","map":{"version":3,"names":["getRandomInt","data","getBoard","node","res","y","x","board","parent","color","noStones","getHeuristic","ret","heuristic","getBestMove","extrem","depth","nbNode","bestHeuristic","bestMove","push","moveChoosen","length","getAlphaBetaPruning","alpha","beta","getChilds","iaColor","playerColor","minmax","callsToMinMax","blockCase","offset","pos","c","i","blockBoard","getStartBoard","initData","heuristicIndex","ia","mainData","forbiddenStones","tree","Infinity","console","log"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst getHeuristic = (node) => {\n    // var board = getBoard(node)\n    ret = data.heuristic\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[`${nbNode}`]){\n        if (\n            bestHeuristic === false ||\n            (extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic) ||\n            (extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[`${nbNode}`].heuristic\n        }\n        nbNode++\n    }\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    nbNode = 0\n    var bestMove = []\n    while (node[`${nbNode}`]){\n        if (node[`${nbNode}`].heuristic === bestHeuristic){\n            bestMove.push({\n                x : node[`${nbNode}`].x,\n                y : node[`${nbNode}`].y\n            })\n        }\n        nbNode++\n    }\n    var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length)\n    return {\n        heuristic : bestHeuristic,\n        x : bestMove[moveChoosen].x,\n        y : bestMove[moveChoosen].y\n    }\n}\n\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n    if ((data.depth % 2) === (depth % 2)){\n        if (node[`${nbNode}`].heuristic > node.alpha)\n            node.alpha = node[`${nbNode}`].heuristic\n    }\n    else{\n        if ((node[`${nbNode}`].heuristic < node.beta))\n            node.beta = node[`${nbNode}`].heuristic\n    }\n    if (node.beta < node.alpha)\n        return true\n    return false\n}\n\nconst getChilds = (node, depth) => {\n    var nbNode = 0\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor,\n                    alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n                }\n                if (depth > 1)\n                    minmax(node[`${nbNode}`], depth - 1)\n                else\n                    node[`${nbNode}`].heuristic = getHeuristic(node)\n                if (getAlphaBetaPruning())\n                    return\n                nbNode++\n            }\n        }\n    }\n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    getChilds(node, depth)\n    var bestMove\n    if ((data.depth % 2) !== (depth % 2))\n        bestMove = getBestMove(node, 'min', depth)\n    else\n        bestMove = getBestMove(node, 'max', depth)\n    if (depth === data.depth)\n        return {x : bestMove.x, y : bestMove.y}\n    node.heuristic = bestMove.heuristic\n    if ((data.depth % 2) === (depth % 2))\n        node.parent.beta = node.beta\n    else\n        node.parent.alpha = node.alpha\n}\n\n\nconst blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            // if ((\n            //         pos[0].x >= 0 && pos[0].x < 19 &&\n            //         pos[1].x >= 0 && pos[1].x < 19 &&\n            //         pos[2].x >= 0 && pos[2].x < 19 &&\n            //         pos[3].x >= 0 && pos[3].x < 19 &&\n            //         pos[0].y >= 0 && pos[0].y < 19 &&\n            //         pos[1].y >= 0 && pos[1].y < 19 &&\n            //         pos[2].y >= 0 && pos[2].y < 19 &&\n            //         pos[3].y >= 0 && pos[3].y < 19\n            //     ) &&\n            //     (\n            //         (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black') ||\n            //         (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black') ||\n            //         (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black') ||\n            //         (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')\n            //     )\n            // )\n            //     return false\n            if (\n                (\n                    pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 &&\n                    (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black')\n                ) ||\n                (\n                    pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 &&\n                    (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black')\n                ) ||\n                (\n                    pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 &&\n                    (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black')\n                ) ||\n                (\n                    pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 &&\n                    (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')\n                )\n            )\n                    return false\n            // console.log('pos[0] ==> ', pos[0].x, pos[0].y)\n            // console.log('pos[1] ==> ', pos[1].x, pos[1].y)\n            // console.log('pos[2] ==> ', pos[2].x, pos[2].y)\n            // console.log('pos[3] ==> ', pos[3].x, pos[3].y)\n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n            \n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && blockCase(x, y, board, offset))\n                board[y][x] = 1\n        }\n    }\n}\n\nconst getStartBoard = board => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, 3)\n    return res\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    // data.board = getStartBoard(board)\n    data.board = board\n    data.depth = 2\n    data.callsToMinMax = 0\n    data.heuristicIndex = 0\n    data.heuristic = [-1, 3, 5, 6, -6, -4, 2, 1]\n}\n\nconst ia = (board, playerColor, mainData) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    mainData.forbiddenStones = data.board\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    var pos = minmax(tree, data.depth)\n    console.log(data.callsToMinMax)\n    return pos\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}