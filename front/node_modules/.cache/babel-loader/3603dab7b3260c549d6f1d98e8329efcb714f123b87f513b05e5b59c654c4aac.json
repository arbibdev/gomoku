{"ast":null,"code":"import inForcedMoves from '../../tools/inForcedMoves';\nimport updateCapturedStones from '../../tools/updateCapturedStones';\nimport checkEndGame from '../../tools/checkEndGame';\nimport launchPutStoneAnimation from '../../tools/launchPutStoneAnimation';\nimport launchCaptureAnimation from '../../tools/launchCaptureAnimation';\nimport printBoard from '../../tools/printBoard';\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport { io } from \"socket.io-client\";\nimport styles from './humanVsAi.module.css';\nconst printForcedMoves = data => {\n  for (var c = 0; c < data.forcedMoves.length; c += 1) {\n    data.ctx.drawImage(data.images.mandatory, data.images.gomokuBoard.width * data.forcedMoves[c].x, data.images.gomokuBoard.height * data.forcedMoves[c].y);\n  }\n};\nconst canvasOnMouseMove = (e, data) => {\n  data.mouseEvent = e;\n  if (!data.mouseEvent) return;\n  if (data.endGame || data.turn === 'ai' || data.ongoingAnimation) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x] && inForcedMoves(data, stone.x, stone.y)) {\n    printBoard(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.playerColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else {\n    printBoard(data);\n    printForcedMoves(data);\n  }\n};\nconst printEndGameStatus = data => {\n  var params = {};\n  params[data.DRAW] = {\n    text: 'END OF GAME, NO WINNER',\n    color: 'orange'\n  };\n  params[data.playerColor] = {\n    text: 'YOU WON THE GAME !',\n    color: 'green'\n  };\n  params[data.aiColor] = {\n    text: 'YOU LOST THE GAME',\n    color: 'red'\n  };\n  document.getElementById('endGame').style.color = params[data.endGame].color;\n  document.getElementById('endGame').innerHTML = params[data.endGame].text;\n  document.getElementById('newGame').style.display = 'block';\n};\nconst printWinStones = data => {\n  for (var c = 0; c < data.winStones.length; c += 1) {\n    data.ctx.drawImage(data.images.flash, data.images.gomokuBoard.width * data.winStones[c].x, data.images.gomokuBoard.width * data.winStones[c].y);\n  }\n};\nconst setEndGame = data => {\n  // console.log(data.winStones)\n  printWinStones(data);\n  printEndGameStatus(data);\n  data.socket.disconnect();\n};\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    blackCaptures: data.captures.black,\n    whiteCaptures: data.captures.white,\n    board: data.board\n  });\n};\nconst goToNextPlayer = (data, nextPlayer, color, captures) => {\n  if (captures) updateCapturedStones(data, color, captures, styles);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n  if (data.turn !== data.firstPlayer) {\n    data.turns += 1;\n    document.getElementById('turn').innerHTML = data.turns;\n  }\n  if (data.turn === 'ai') if (nextPlayer === 'human') {\n    data.turn = 'human';\n    data.ongoingAnimation = 0;\n    canvasOnMouseMove(data.mouseEvent, data);\n  } else if (nextPlayer === 'ai') {\n    data.turn = 'ai';\n    data.ongoingAnimation = 0;\n    launchAi(data, data.images, data.playerColor);\n  }\n};\nasync function receiveAiMove(data, pos) {\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`;\n  document.getElementById('timerAverage').innerHTML = `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`;\n  data.ongoingAnimation = 1;\n  launchPutStoneAnimation(data, pos, data.aiColor, 'human').then(() => {\n    launchCaptureAnimation(data, pos, data.aiColor, 'human').then(captures => {\n      goToNextPlayer(data, 'human', data.aiColor, captures);\n    });\n  });\n}\nconst canvasOnClick = (e, data) => {\n  data.mouseEvent = e;\n  if (data.endGame || data.turn === 'ai' || data.ongoingAnimation) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x] && inForcedMoves(data, stone.x, stone.y)) {\n    data.ongoingAnimation = 1;\n    launchPutStoneAnimation(data, stone, data.playerColor).then(() => {\n      launchCaptureAnimation(data, stone, data.playerColor).then(captures => {\n        goToNextPlayer(data, 'ai', data.playerColor, captures);\n      });\n    });\n  }\n};\nconst canvasOnMouseLeave = (e, data) => {\n  data.mouseEvent = false;\n  if (data.endGame || data.turn === 'ai' || data.ongoingAnimation) return;\n  printBoard(data);\n  printForcedMoves(data);\n};\n\n// const choosenBoard = () => {\n// \treturn [\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t]\n// }\n\nconst choosenBoard = starterBoard => {\n  var board = [];\n  for (var y = 0; y < 19; y += 1) {\n    board[y] = [];\n    for (var x = 0; x < 19; x += 1) {\n      board[y][x] = starterBoard[y][x];\n    }\n  }\n  return board;\n};\nconst currentBoard = data => {\n  var board = [];\n  for (var y = 0; y < 19; y += 1) {\n    board[y] = [];\n    for (var x = 0; x < 19; x += 1) {\n      board[y][x] = data.board[y][x];\n    }\n  }\n  return board;\n};\nconst historyBoard = data => {\n  var board = [];\n  for (var y = 0; y < 19; y += 1) {\n    board[y] = [];\n    for (var x = 0; x < 19; x += 1) {\n      board[y][x] = data.history.current.history[data.history.current.position].board[y][x];\n    }\n  }\n  return board;\n};\nconst currentForcedMoves = data => {\n  var forcedMoves = [];\n  for (var c = 0; c < data.forcedMoves.length; c += 1) {\n    forcedMoves.push({\n      ...data.forcedMoves[c]\n    });\n  }\n  return forcedMoves;\n};\nconst currentWinStones = data => {\n  var winStones = [];\n  for (var c = 0; c < data.winStones.length; c += 1) {\n    winStones.push({\n      ...data.winStones[c]\n    });\n  }\n  return winStones;\n};\nconst saveMove = data => {\n  if (data.history.current.position !== false) {\n    while (data.history.current.history.length !== data.history.current.position + 1) data.history.current.history.pop();\n  }\n  data.history.current.history.push({\n    board: currentBoard(data),\n    aiMoves: data.aiMoves,\n    piecesOnBoard: data.piecesOnBoard,\n    turns: data.turns,\n    captures: {\n      ...data.captures\n    },\n    forcedMoves: currentForcedMoves(data),\n    aiTotalTime: data.aiTotalTime,\n    winStones: currentWinStones(data)\n    // posAiMove : posAiMove ? {...posAiMove} : false\n  });\n\n  if (data.history.current.position !== false) data.history.current.position += 1;else data.history.current.position = 0;\n};\nconst historyForcedMoves = data => {\n  var forcedMoves = [];\n  for (var c = 0; c < data.history.current.history[data.history.current.position].forcedMoves.length; c += 1) {\n    forcedMoves.push({\n      ...data.history.current.history[data.history.current.position].forcedMoves[c]\n    });\n  }\n  return forcedMoves;\n};\nconst historyWinStones = data => {\n  var winStones = [];\n  for (var c = 0; c < data.history.current.history[data.history.current.position].winStones.length; c += 1) {\n    winStones.push({\n      ...data.history.current.history[data.history.current.position].winStones[c]\n    });\n  }\n  return winStones;\n};\nconst getHistory = data => {\n  if (data.history.current.position === false) return;\n  data.board = historyBoard(data);\n  data.aiMoves = data.history.current.history[data.history.current.position].aiMoves;\n  data.piecesOnBoard = data.history.current.history[data.history.current.position].piecesOnBoard;\n  data.turns = data.history.current.history[data.history.current.position].turns;\n  data.captures = {\n    ...data.history.current.history[data.history.current.position].captures\n  };\n  data.forcedMoves = historyForcedMoves(data);\n  data.aiTotalTime = data.history.current.history[data.history.current.position].aiTotalTime;\n  data.winStones = historyWinStones(data);\n  // if (data.history.current.history[data.history.current.position].posAiMove)\n  // \tdata.posAiMove = {...data.history.current.history[data.history.current.position].posAiMove}\n  // else\n  // \tdata.posAiMove = false\n};\n\nconst getSettingsBoard = data => {\n  if (data.history.current.position !== false) return;\n  if (!data.settings.starterBoard) data.board = initBoard();else data.board = choosenBoard(data.settings.starterBoard);\n};\nconst getParameters = (images, playerColor, firstPlayer, settings, history, data) => {\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs ai'\n    }\n  });\n  data.images = images;\n  data.playerColor = playerColor;\n  data.firstPlayer = firstPlayer;\n  data.settings = settings;\n  data.history = history;\n};\nconst initVariables = data => {\n  data.turns = 1;\n  data.captures = {\n    black: 0,\n    white: 0\n  };\n  data.ongoingAnimation = 0;\n  data.forcedMoves = [];\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.aiMoves = 0;\n  data.aiTotalTime = 0;\n  data.piecesOnBoard = 0;\n  data.turn = data.firstPlayer;\n  data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.winStones = [];\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n};\nconst initEvents = data => {\n  data.canvas.onmousemove = e => canvasOnMouseMove(e, data);\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data);\n  data.canvas.onmouseenter = e => canvasOnMouseMove(e, data);\n};\nconst moveInGame = data => {\n  console.log('aiMoves', data.aiMoves);\n  console.log('piecesOnBoard', data.piecesOnBoard);\n  console.log('turns', data.turns);\n};\nconst initGame = (images, playerColor, firstPlayer, settings, history) => {\n  var data = {};\n  getParameters(images, playerColor, firstPlayer, settings, history, data);\n  initVariables(data);\n  getSettingsBoard(data);\n  getHistory(data);\n  printBoard(data).then(() => {\n    if (data.turn === 'ai') {\n      launchAi();\n      initEvents(data);\n    } else if (data.history.current.position === false) {\n      saveMove(data);\n      initEvents(data);\n    } else {\n      moveInGame(data);\n      initEvents(data);\n    }\n  });\n};\nexport default initGame;","map":{"version":3,"names":["inForcedMoves","updateCapturedStones","checkEndGame","launchPutStoneAnimation","launchCaptureAnimation","printBoard","getStonePosition","initBoard","serverIp","io","styles","printForcedMoves","data","c","forcedMoves","length","ctx","drawImage","images","mandatory","gomokuBoard","width","x","height","y","canvasOnMouseMove","e","mouseEvent","endGame","turn","ongoingAnimation","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","board","globalAlpha","playerColor","WHITE","whitePiece","blackPiece","printEndGameStatus","params","DRAW","text","color","aiColor","document","getElementById","style","innerHTML","display","printWinStones","winStones","flash","setEndGame","socket","disconnect","launchAi","startAi","window","performance","now","emit","blackCaptures","captures","black","whiteCaptures","white","goToNextPlayer","nextPlayer","firstPlayer","turns","receiveAiMove","pos","timeAi","Math","floor","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","toFixed","then","canvasOnClick","canvasOnMouseLeave","choosenBoard","starterBoard","currentBoard","historyBoard","history","current","position","currentForcedMoves","push","currentWinStones","saveMove","pop","piecesOnBoard","historyForcedMoves","historyWinStones","getHistory","getSettingsBoard","settings","getParameters","query","page","initVariables","BLACK","getContext","on","initEvents","onmousemove","onclick","onmouseleave","onmouseenter","moveInGame","console","log","initGame"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsAi/initGame.js"],"sourcesContent":["import inForcedMoves from '../../tools/inForcedMoves'\nimport updateCapturedStones from '../../tools/updateCapturedStones'\nimport checkEndGame from '../../tools/checkEndGame'\nimport launchPutStoneAnimation from '../../tools/launchPutStoneAnimation'\nimport launchCaptureAnimation from '../../tools/launchCaptureAnimation'\nimport printBoard from '../../tools/printBoard'\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport { io } from \"socket.io-client\"\nimport styles from './humanVsAi.module.css'\n\nconst printForcedMoves = data => {\n\tfor (var c = 0; c < data.forcedMoves.length; c += 1){\n\t\tdata.ctx.drawImage(\n\t\t\tdata.images.mandatory,\n\t\t\tdata.images.gomokuBoard.width * data.forcedMoves[c].x,\n\t\t\tdata.images.gomokuBoard.height * data.forcedMoves[c].y\n\t\t)\n\t}\n}\n\nconst canvasOnMouseMove = (e, data) => {\n\tdata.mouseEvent = e\n\tif (!data.mouseEvent)\n\t\treturn\n    if (data.endGame || data.turn === 'ai' || data.ongoingAnimation)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x] && inForcedMoves(data, stone.x, stone.y)){\n        printBoard(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.playerColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else{\n        printBoard(data)\n\t\tprintForcedMoves(data)\n\t}\n}\n\nconst printEndGameStatus = data => {\n\tvar params = {}\n    params[data.DRAW] = {\n        text : 'END OF GAME, NO WINNER',\n        color : 'orange'\n    }\n    params[data.playerColor] = {\n        text : 'YOU WON THE GAME !',\n        color : 'green'\n    }\n    params[data.aiColor] = {\n        text : 'YOU LOST THE GAME',\n        color : 'red'\n    }\n    document.getElementById('endGame').style.color = params[data.endGame].color\n    document.getElementById('endGame').innerHTML = params[data.endGame].text\n    document.getElementById('newGame').style.display = 'block'\n}\n\nconst printWinStones = data => {\n\tfor (var c = 0; c < data.winStones.length; c += 1){\n\t\tdata.ctx.drawImage(\n\t\t\tdata.images.flash,\n\t\t\tdata.images.gomokuBoard.width * data.winStones[c].x,\n\t\t\tdata.images.gomokuBoard.width * data.winStones[c].y\n\t\t)\n\t}\n}\n\nconst setEndGame = data => {\n\t// console.log(data.winStones)\n\tprintWinStones(data)\n    printEndGameStatus(data)\n\tdata.socket.disconnect()\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.socket.emit('ai', {\n\t\taiColor : data.aiColor,\n\t\tblackCaptures : data.captures.black,\n\t\twhiteCaptures : data.captures.white,\n\t\tboard : data.board\n\t})\n}\n\nconst goToNextPlayer = (data, nextPlayer, color, captures) => {\n\tif (captures)\n\t\tupdateCapturedStones(data, color, captures, styles)\n\tif ((data.endGame = checkEndGame(data))){\n\t\tsetEndGame(data)\n\t\treturn\n\t}\n\tif (data.turn !== data.firstPlayer){\n\t\tdata.turns += 1\n\t\tdocument.getElementById('turn').innerHTML = data.turns\n\t}\n\tif (data.turn === 'ai')\n\n\tif (nextPlayer === 'human'){\n\t\tdata.turn = 'human'\n\t\tdata.ongoingAnimation = 0\n\t\tcanvasOnMouseMove(data.mouseEvent, data)\n\t}\n\telse if (nextPlayer === 'ai'){\n\t\tdata.turn = 'ai'\n\t\tdata.ongoingAnimation = 0\n\t\tlaunchAi(data, data.images, data.playerColor)\n\t}\n\t\n}\n\nasync function receiveAiMove(data, pos){\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`\n    document.getElementById('timerAverage').innerHTML = `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`\n\tdata.ongoingAnimation = 1\n\tlaunchPutStoneAnimation(data, pos, data.aiColor, 'human').then(() => {\n\t\tlaunchCaptureAnimation(data, pos, data.aiColor, 'human').then((captures) => {\n\t\t\tgoToNextPlayer(data, 'human', data.aiColor, captures)\n\t\t})\n\t})\n}\n\nconst canvasOnClick = (e, data) => {\n\tdata.mouseEvent = e\n    if (data.endGame || data.turn === 'ai' || data.ongoingAnimation)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x] && inForcedMoves(data, stone.x, stone.y)){\n\t\tdata.ongoingAnimation = 1\n\t\tlaunchPutStoneAnimation(data, stone, data.playerColor).then(() => {\n\t\t\tlaunchCaptureAnimation(data, stone, data.playerColor).then((captures) => {\n\t\t\t\tgoToNextPlayer(data, 'ai', data.playerColor, captures)\n\t\t\t})\n\t\t})\n    }\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n\tdata.mouseEvent = false\n    if (data.endGame || data.turn === 'ai' || data.ongoingAnimation)\n            return\n    printBoard(data)\n\tprintForcedMoves(data)\n}\n\n// const choosenBoard = () => {\n// \treturn [\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n// \t]\n// }\n\nconst choosenBoard = (starterBoard) => {\n\tvar board = []\n\tfor (var y = 0; y < 19; y += 1){\n\t\tboard[y] = []\n\t\tfor (var x = 0; x < 19; x += 1){\n\t\t\tboard[y][x] = starterBoard[y][x]\n\t\t}\n\t}\n\treturn board\n}\n\nconst currentBoard = data => {\n\tvar board = []\n\tfor (var y = 0; y < 19; y += 1){\n\t\tboard[y] = []\n\t\tfor (var x = 0; x < 19; x += 1){\n\t\t\tboard[y][x] = data.board[y][x]\n\t\t}\n\t}\n\treturn board\n\n}\n\nconst historyBoard = data => {\n\tvar board = []\n\tfor (var y = 0; y < 19; y += 1){\n\t\tboard[y] = []\n\t\tfor (var x = 0; x < 19; x += 1){\n\t\t\tboard[y][x] = data.history.current.history[data.history.current.position].board[y][x]\n\t\t}\n\t}\n\treturn board\n\n}\n\nconst currentForcedMoves = data => {\n\tvar forcedMoves = []\n\n\tfor (var c = 0; c < data.forcedMoves.length; c += 1){\n\t\tforcedMoves.push({...data.forcedMoves[c]})\n\t}\n\treturn forcedMoves\n}\n\nconst currentWinStones = data => {\n\tvar winStones = []\n\n\tfor (var c = 0; c < data.winStones.length; c += 1){\n\t\twinStones.push({...data.winStones[c]})\n\t}\n\treturn winStones\n}\n\nconst saveMove = (data) => {\n\tif (data.history.current.position !== false){\n\t\twhile (data.history.current.history.length !== data.history.current.position + 1)\n\t\t\tdata.history.current.history.pop()\n\t}\n\tdata.history.current.history.push(\n\t\t{\n\t\t\tboard : currentBoard(data),\n\t\t\taiMoves : data.aiMoves,\n\t\t\tpiecesOnBoard : data.piecesOnBoard,\n\t\t\tturns : data.turns,\n\t\t\tcaptures : {...data.captures},\n\t\t\tforcedMoves : currentForcedMoves(data),\n\t\t\taiTotalTime : data.aiTotalTime,\n\t\t\twinStones : currentWinStones(data),\n\t\t\t// posAiMove : posAiMove ? {...posAiMove} : false\n\t\t}\n\t)\n\tif (data.history.current.position !== false)\n\t\tdata.history.current.position += 1\n\telse\n\t\tdata.history.current.position = 0\n}\n\nconst historyForcedMoves = data => {\n\tvar forcedMoves = []\n\n\tfor (var c = 0; c < data.history.current.history[data.history.current.position].forcedMoves.length; c += 1){\n\t\tforcedMoves.push({...data.history.current.history[data.history.current.position].forcedMoves[c]})\n\t}\n\treturn forcedMoves\n}\n\nconst historyWinStones = data => {\n\tvar winStones = []\n\n\tfor (var c = 0; c < data.history.current.history[data.history.current.position].winStones.length; c += 1){\n\t\twinStones.push({...data.history.current.history[data.history.current.position].winStones[c]})\n\t}\n\treturn winStones\n}\n\nconst getHistory = data => {\n\tif (data.history.current.position === false)\n\t\treturn\n\tdata.board = historyBoard(data)\n\tdata.aiMoves = data.history.current.history[data.history.current.position].aiMoves\n\tdata.piecesOnBoard = data.history.current.history[data.history.current.position].piecesOnBoard\n\tdata.turns = data.history.current.history[data.history.current.position].turns\n\tdata.captures = {...data.history.current.history[data.history.current.position].captures}\n\tdata.forcedMoves = historyForcedMoves(data)\n\tdata.aiTotalTime = data.history.current.history[data.history.current.position].aiTotalTime\n\tdata.winStones = historyWinStones(data)\n\t// if (data.history.current.history[data.history.current.position].posAiMove)\n\t// \tdata.posAiMove = {...data.history.current.history[data.history.current.position].posAiMove}\n\t// else\n\t// \tdata.posAiMove = false\n}\n\nconst getSettingsBoard = data => {\n\tif (data.history.current.position !== false)\n\t\treturn\n\tif (!data.settings.starterBoard)\n    \tdata.board = initBoard()\n\telse\n\t\tdata.board = choosenBoard(data.settings.starterBoard)\n}\n\nconst getParameters =  (images, playerColor, firstPlayer, settings, history, data) => {\n\tdata.socket = io(serverIp, {query : {page : 'human vs ai'}})\n\tdata.images = images\n\tdata.playerColor = playerColor\n\tdata.firstPlayer = firstPlayer\n\tdata.settings = settings\n\tdata.history = history\n}\nconst initVariables = data => {\n\tdata.turns = 1\n\tdata.captures = {black : 0, white : 0}\n\tdata.ongoingAnimation = 0\n\tdata.forcedMoves = []\n\tdata.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n\tdata.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n\tdata.aiMoves = 0\n\tdata.aiTotalTime = 0\n    data.piecesOnBoard = 0\n\tdata.turn = data.firstPlayer\n\tdata.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n\tdata.winStones = []\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n}\n\nconst initEvents = data => {\n\tdata.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n    data.canvas.onclick = e => canvasOnClick(e, data)\n    data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n\tdata.canvas.onmouseenter = e => canvasOnMouseMove(e, data)\n}\n\nconst moveInGame = data => {\n\tconsole.log('aiMoves', data.aiMoves)\n\tconsole.log('piecesOnBoard', data.piecesOnBoard)\n\tconsole.log('turns', data.turns)\n}\n\nconst initGame = (images, playerColor, firstPlayer, settings, history) => {\n\tvar data = {}\n\tgetParameters(images, playerColor, firstPlayer, settings, history, data)\n\tinitVariables(data)\n\tgetSettingsBoard(data)\n\tgetHistory(data)\n\tprintBoard(data).then(() => {\n\t\tif (data.turn === 'ai'){\n\t\t\tlaunchAi()\n\t\t\tinitEvents(data)\n\t\t}\n\t\telse if (data.history.current.position === false){\n\t\t\tsaveMove(data)\n\t\t\tinitEvents(data)\n\t\t}\n\t\telse{\n\t\t\tmoveInGame(data)\n\t\t\tinitEvents(data)\n\t\t}\n\t})\n}\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}