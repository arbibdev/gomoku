{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\nimport drawTree from \"./drawTree\";\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board[y][x];\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst singleStonesHeuristic = board => {\n  var heuristic = 0;\n  var localHeuristic;\n  var freeNeighbour;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        // console.log(x, y, board[y][x])\n        localHeuristic = 10;\n        freeNeighbour = 1;\n        if (y - 1 >= 0 && !board[y - 1][x]) freeNeighbour += 1;\n        if (x + 1 < 19 && !board[y][x + 1]) freeNeighbour += 1;\n        if (y + 1 < 19 && !board[y + 1][x]) freeNeighbour += 1;\n        if (x - 1 >= 0 && !board[y][x - 1]) freeNeighbour += 1;\n        localHeuristic *= freeNeighbour;\n        if (board[y][x] === data.iaColor) heuristic += localHeuristic;else heuristic -= localHeuristic;\n      }\n    }\n  }\n  // console.log(heuristic)\n  return heuristic;\n};\nconst getNeighbour1 = (x, y, board, orientation) => {\n  if (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x] || orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1] || orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1] || orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1]) return 1;\n  return 0;\n};\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n  if (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x] || orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb] || orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb] || orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb]) return 1;\n  return 0;\n};\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL) {\n    checkedBoard[y][x] = data.VERTICAL;\n    nb++;\n    y++;\n  }\n  return nb;\n};\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL) {\n    checkedBoard[y][x] = data.HORIZONTAL;\n    nb++;\n    x++;\n  }\n  return nb;\n};\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1) {\n    checkedBoard[y][x] = data.DIAGONAL1;\n    nb++;\n    x++;\n    y++;\n  }\n  return nb;\n};\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2) {\n    checkedBoard[y][x] = data.DIAGONAL2;\n    nb++;\n    x--;\n    y++;\n  }\n  return nb;\n};\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n  var nb;\n  var color = board[y][x];\n  var neighbour1 = getNeighbour1(x, y, board, orientation);\n  var saveX = x;\n  var saveY = y;\n  if (orientation === data.VERTICAL) nb = checkVerticalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.HORIZONTAL) nb = checkHorizontalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL1) nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL2) nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard);\n  // while (orientation === data.VERTICAL && y++ < 19 && board[y - 1][x] === color)nb++\n  // while (orientation === data.HORIZONTAL && x++ < 19 && board[y][x - 1] === color)nb++\n  // while (orientation === data.DIAGONAL1 && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n  // while (orientation === data.DIAGONAL2 && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n  if (nb > 1) {\n    var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation);\n    if (nb < 5 && !neighbour1 && !neighbour2) return false;\n    return {\n      nb,\n      neighbour1,\n      neighbour2\n    };\n  }\n  return false;\n};\nconst checkAlignment = (x, y, board, checkedBoard) => {\n  var alignment = [];\n  var ret;\n  for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++) {\n    if (ret = checkStones(x, y, board, c, checkedBoard)) alignment.push(ret);\n  }\n  return alignment;\n  // if (\n  //     (alignment = checkStones(x, y, board, data.VERTICAL, checkedBoard)) ||\n  //     (alignment = checkStones(x, y, board, data.HORIZONTAL, checkedBoard)) ||\n  //     (alignment = checkStones(x, y, board, data.DIAGONAL1, checkedBoard)) ||\n  //     (alignment = checkStones(x, y, board, data.DIAGONAL2, checkedBoard))\n  // )\n  //     return alignment\n  // return false\n};\n\nconst initCheckedBoard = () => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = 0;\n    }\n  }\n  return res;\n};\nconst alignmentsHeuristic = board => {\n  var heuristic = 0;\n  var alignment;\n  var checkedBoard = initCheckedBoard();\n  var alignments = []; // TMP\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] === data.WHITE) {\n        alignment = checkAlignment(x, y, board, checkedBoard);\n        for (var c = 0; c < alignment.length; c++) {\n          if (board[y][x] === data.iaColor) {\n            if (alignment[c].nb >= 5) heuristic += Infinity;else heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n          } else {\n            if (alignment[c].nb >= 5) heuristic -= Infinity;else heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n          }\n          alignments.push({\n            // TMP\n            alignment,\n            x,\n            y\n          });\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getHeuristic = node => {\n  data.nbLeaves += 1; // TMP\n  var board = getBoard(node);\n  // var h1 = singleStonesHeuristic(board)\n  var h2 = alignmentsHeuristic(board);\n  return h2;\n};\n\n// const getHeuristic = (node) => {\n//     var ret = data.heuristic[data.heuristicIndex]\n//     data.heuristicIndex++\n//     return ret\n// }\n\nconst getBestHeuristic = (node, extrem) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[nbNode]) {\n    if (bestHeuristic === false || extrem === data.MIN && node[nbNode].heuristic < bestHeuristic || extrem === data.MAX && node[nbNode].heuristic > bestHeuristic) {\n      bestHeuristic = node[nbNode].heuristic;\n    }\n    nbNode++;\n  }\n  return bestHeuristic;\n};\nconst randomChoice = (node, bestHeuristic) => {\n  // PEUT LARGEMENT ETRE OPTIMISÉE\n  var nbNode = 0;\n  var bestMove = [];\n  while (node[nbNode]) {\n    if (node[nbNode].heuristic === bestHeuristic) {\n      bestMove.push({\n        x: node[nbNode].x,\n        y: node[nbNode].y\n      });\n    }\n    nbNode++;\n  }\n  var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length);\n  return {\n    heuristic: bestHeuristic,\n    x: bestMove[0].x,\n    y: bestMove[0].y\n  };\n  // return {\n  //     heuristic : bestHeuristic,\n  //     x : bestMove[moveChoosen].x,\n  //     y : bestMove[moveChoosen].y\n  // }\n};\n\nconst printSameNodes = (node, bestHeuristic) => {\n  var nbNode = 0;\n  var sameNodes = 0;\n  while (node[nbNode]) {\n    if (node[nbNode].heuristic === bestHeuristic) sameNodes += 1;\n    nbNode++;\n  }\n  if (sameNodes > 1) console.log(sameNodes);\n};\nconst getBestMove = (node, extrem, depth) => {\n  var bestHeuristic = getBestHeuristic(node, extrem);\n  // printSameNodes(node, bestHeuristic) // TMP\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  return randomChoice(node, bestHeuristic);\n};\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node[nbNode].heuristic > node.alpha) node.alpha = node[nbNode].heuristic;\n  } else {\n    if (node[nbNode].heuristic < node.beta) node.beta = node[nbNode].heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst increment = pos => {\n  pos.x++;\n  if (pos.x === 19) {\n    pos.x = 0;\n    pos.y++;\n  }\n  if (pos.y === 19) return false;\n  return true;\n};\nconst getChild = (pos, node, depth, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst uploadHeuristic = (depth, node) => {\n  var bestMove;\n  if (data.depth % 2 !== depth % 2) bestMove = getBestMove(node, data.MIN, depth);else bestMove = getBestMove(node, data.MAX, depth);\n  node.heuristic = bestMove.heuristic;\n  if (depth === data.depth) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n  return false;\n};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var pos = {\n    x: 0,\n    y: 0\n  };\n  var color = data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor;\n  while (true) {\n    if (!data.board[pos.y][pos.x] && noStones(node, pos.x, pos.y)) {\n      node[nbNode] = getChild(pos, node, depth, color);\n      if (depth > 1) minmax(node[nbNode], depth - 1);else node[nbNode].heuristic = getHeuristic(node[nbNode]);\n      if (getAlphaBetaPruning(node, depth, nbNode)) break;\n      nbNode++;\n    }\n    if (!increment(pos)) break;\n  }\n  var bestMove;\n  if (bestMove = uploadHeuristic(depth, node)) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n};\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var pos = {x : 0, y : 0}\n//     var color = (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n//     var c = 0\n//     while (c < 2){\n//         if (!data.board[pos.y][pos.x] && noStones(node, pos.x, pos.y)){\n//             node[nbNode] = getChild(pos, node, depth, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode])\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 break\n//             nbNode++\n//             c += 1\n//         }\n//         if (!increment(pos))\n//             break\n//     }\n//     var bestMove\n//     if ((bestMove = uploadHeuristic(depth, node)))\n//         return {x : bestMove.x, y : bestMove.y}\n// }\n\nconst blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      if (pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 && (board[pos[0].y][pos[0].x] === data.WHITE || board[pos[0].y][pos[0].x] === data.BLACK) || pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 && (board[pos[1].y][pos[1].x] === data.WHITE || board[pos[1].y][pos[1].x] === data.BLACK) || pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 && (board[pos[2].y][pos[2].x] === data.WHITE || board[pos[2].y][pos[2].x] === data.BLACK) || pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 && (board[pos[3].y][pos[3].x] === data.WHITE || board[pos[3].y][pos[3].x] === data.BLACK)) return false;\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && blockCase(x, y, board, offset)) board[y][x] = data.FORBIDDEN;\n    }\n  }\n};\nconst getStartBoard = (board, offset) => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, offset);\n  return res;\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.board = getStartBoard(board, 2);\n  // data.board = board\n  data.depth = 3;\n  data.callsToMinMax = 0;\n  data.heuristicIndex = 0;\n  // data.heuristic = [-1, 3, 5, -6, -4]\n  data.heuristic = [8, 5, 6, -4, 3, 8, 4, -6, 1, 5, 2];\n  data.boards = []; // TMP\n  data.nbLeaves = 0; // TMP\n};\n\nconst getTreeToPrint = (node, depth) => {\n  var nbNode = 0;\n  var res = {};\n  res.heuristic = node.heuristic;\n  res.x = node.x;\n  res.y = node.y;\n  while (node[nbNode]) {\n    if (depth > 0) res[nbNode] = getTreeToPrint(node[nbNode], depth - 1);\n    nbNode += 1;\n  }\n  return res;\n};\nconst printTree = (tree, indentation) => {\n  var nbNode = 0;\n  var prefix = '';\n  for (var c = 0; c < indentation; c++) {\n    prefix += '----';\n  }\n  console.log(`${prefix}(${tree.heuristic})`);\n  while (tree[nbNode]) {\n    printTree(tree[nbNode], indentation + 1);\n    nbNode++;\n  }\n};\nconst printBackground = (ctx, canvas, images) => {\n  ctx.fillStyle = '#a6683e';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  for (var y = 0; y < 18; y++) {\n    for (var x = 0; x < 18; x++) ctx.drawImage(images.gomokuBoard, x * images.gomokuBoard.width + images.blackPiece.width / 2, y * images.gomokuBoard.height + images.blackPiece.width / 2);\n  }\n};\nconst printStones = (board, ctx, images) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        var stone = board[y][x] === data.WHITE ? images.whitePiece : images.blackPiece;\n        ctx.drawImage(stone, images.gomokuBoard.width * x, images.gomokuBoard.height * y);\n      }\n    }\n  }\n};\nconst printBoard = (board, ctx, images, canvas) => {\n  printBackground(ctx, canvas, images);\n  printStones(board, ctx, images);\n};\nconst printBoards = (ctx, images, canvas) => {\n  var c = -1;\n  document.onkeydown = e => {\n    if (e.key === 'Enter') c++;else if (e.key === ' ') c += 100;else if (e.key === 'Backspace') c -= 100;else return;\n    if (!data.boards[c]) return;\n    printBoard(data.boards[c].board, ctx, images, canvas);\n    console.clear();\n    console.log('------------------------');\n    console.log('heuristic:', data.boards[c].node.heuristic);\n    console.log('parent heuristic:', data.boards[c].node.parent.heuristic);\n    console.log('infos heuristic:', data.boards[c].h2);\n    console.log('------------------------');\n  };\n};\nconst ia = (board, playerColor, mainData, images) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  mainData.forbiddenStones = data.board;\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  var pos = minmax(tree, data.depth);\n  printBoards(mainData.ctx, images, mainData.canvas);\n  // var treeToPrint = getTreeToPrint(tree, data.depth)\n  // printTree(tree, 0)\n  console.log('heuristic', tree.heuristic);\n  // console.log(treeToPrint)\n  // var bestChild = tree[tree.bestChild]\n  // var bestLittleChild = bestChild[bestChild.bestChild]\n  // console.log('best child :', bestChild.y, bestChild.x)\n  // console.log('best child :', bestLittleChild.y, bestLittleChild.x)\n  console.log('calls to minmax : ', data.callsToMinMax);\n  drawTree(tree, data.depth, data.nbLeaves);\n  return pos;\n};\nexport default ia;","map":{"version":3,"names":["getRandomInt","drawTree","data","getBoard","node","res","y","x","board","parent","color","noStones","singleStonesHeuristic","heuristic","localHeuristic","freeNeighbour","iaColor","getNeighbour1","orientation","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","getNeighbour2","nb","checkVerticalAlignment","checkedBoard","checkHorizontalAlignment","checkDiagonal1Alignment","checkDiagonal2Alignment","checkStones","neighbour1","saveX","saveY","neighbour2","checkAlignment","alignment","ret","c","push","initCheckedBoard","alignmentsHeuristic","alignments","WHITE","length","Infinity","Math","pow","getHeuristic","nbLeaves","h2","getBestHeuristic","extrem","nbNode","bestHeuristic","MIN","MAX","randomChoice","bestMove","moveChoosen","printSameNodes","sameNodes","console","log","getBestMove","depth","getAlphaBetaPruning","alpha","beta","increment","pos","getChild","uploadHeuristic","minmax","callsToMinMax","playerColor","blockCase","offset","i","BLACK","blockBoard","FORBIDDEN","getStartBoard","initData","heuristicIndex","boards","getTreeToPrint","printTree","tree","indentation","prefix","printBackground","ctx","canvas","images","fillStyle","fillRect","width","height","drawImage","gomokuBoard","blackPiece","printStones","stone","whitePiece","printBoard","printBoards","document","onkeydown","e","key","clear","ia","mainData","forbiddenStones"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\nimport drawTree from \"./drawTree\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board[y][x]\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst singleStonesHeuristic = board => {\n    var heuristic = 0\n    var localHeuristic\n    var freeNeighbour\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                // console.log(x, y, board[y][x])\n                localHeuristic = 10\n                freeNeighbour = 1\n                if (y - 1 >= 0 && !board[y - 1][x])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && !board[y][x + 1])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && !board[y + 1][x])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && !board[y][x - 1])\n                    freeNeighbour += 1\n                localHeuristic *= freeNeighbour\n                if (board[y][x] === data.iaColor)\n                    heuristic += localHeuristic\n                else\n                    heuristic -= localHeuristic\n            }\n        }\n    }\n    // console.log(heuristic)\n    return heuristic\n}\n\nconst getNeighbour1 = (x, y, board, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x]) ||\n        (orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1]) ||\n        (orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) ||\n        (orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1])\n    )\n        return 1\n    return 0\n}\n\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x]) ||\n        (orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb]) ||\n        (orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb]) ||\n        (orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb])\n    )\n        return 1\n    return 0\n}\n\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL){\n        checkedBoard[y][x] = data.VERTICAL\n        nb++\n        y++\n    }\n    return nb\n}\n\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL){\n        checkedBoard[y][x] = data.HORIZONTAL\n        nb++\n        x++\n    }\n    return nb\n}\n\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1){\n        checkedBoard[y][x] = data.DIAGONAL1\n        nb++\n        x++\n        y++\n    }\n    return nb\n}\n\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2){\n        checkedBoard[y][x] = data.DIAGONAL2\n        nb++\n        x--\n        y++\n    }\n    return nb\n}\n\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n    var nb\n    var color = board[y][x]\n    var neighbour1 = getNeighbour1(x, y, board, orientation)\n    var saveX = x\n    var saveY = y\n    if (orientation === data.VERTICAL)\n        nb = checkVerticalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.HORIZONTAL)\n        nb = checkHorizontalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL1)\n        nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL2)\n        nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard)\n    // while (orientation === data.VERTICAL && y++ < 19 && board[y - 1][x] === color)nb++\n    // while (orientation === data.HORIZONTAL && x++ < 19 && board[y][x - 1] === color)nb++\n    // while (orientation === data.DIAGONAL1 && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n    // while (orientation === data.DIAGONAL2 && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n    if (nb > 1){\n        var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation)\n        if (nb < 5 && !neighbour1 && !neighbour2)\n            return false\n        return {\n            nb,\n            neighbour1,\n            neighbour2\n        }\n    }\n    return false\n}\n\nconst checkAlignment = (x, y, board, checkedBoard) => {\n    var alignment = []\n    var ret\n    for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++){\n        if ((ret = checkStones(x, y, board, c, checkedBoard)))\n            alignment.push(ret)\n    }\n    return alignment\n    // if (\n    //     (alignment = checkStones(x, y, board, data.VERTICAL, checkedBoard)) ||\n    //     (alignment = checkStones(x, y, board, data.HORIZONTAL, checkedBoard)) ||\n    //     (alignment = checkStones(x, y, board, data.DIAGONAL1, checkedBoard)) ||\n    //     (alignment = checkStones(x, y, board, data.DIAGONAL2, checkedBoard))\n    // )\n    //     return alignment\n    // return false\n}\n\nconst initCheckedBoard = () => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = 0\n        }\n    }\n    return res\n}\n\nconst alignmentsHeuristic = (board) => {\n    var heuristic = 0\n    var alignment\n    var checkedBoard = initCheckedBoard()\n    var alignments = [] // TMP\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] === data.WHITE){\n                alignment = checkAlignment(x, y, board, checkedBoard)\n                for (var c = 0; c < alignment.length; c++){\n                    if (board[y][x] === data.iaColor){\n                        if (alignment[c].nb >= 5)\n                            heuristic += Infinity\n                        else\n                            heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    }\n                    else{\n                        if (alignment[c].nb >= 5)\n                            heuristic -= Infinity\n                        else\n                            heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    }\n                    alignments.push({ // TMP\n                        alignment,\n                        x, y\n                    })\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getHeuristic = (node) => {\n    data.nbLeaves += 1 // TMP\n    var board = getBoard(node)\n    // var h1 = singleStonesHeuristic(board)\n    var h2 = alignmentsHeuristic(board)\n    return h2\n}\n\n// const getHeuristic = (node) => {\n//     var ret = data.heuristic[data.heuristicIndex]\n//     data.heuristicIndex++\n//     return ret\n// }\n\nconst getBestHeuristic = (node, extrem) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[nbNode]){\n        if (\n            bestHeuristic === false ||\n            (extrem === data.MIN && node[nbNode].heuristic < bestHeuristic) ||\n            (extrem === data.MAX && node[nbNode].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[nbNode].heuristic\n        }\n        nbNode++\n    }\n    return bestHeuristic\n}\n\nconst randomChoice = (node, bestHeuristic) => { // PEUT LARGEMENT ETRE OPTIMISÉE\n    var nbNode = 0\n    var bestMove = []\n    while (node[nbNode]){\n        if (node[nbNode].heuristic === bestHeuristic){\n            bestMove.push({\n                x : node[nbNode].x,\n                y : node[nbNode].y,\n            })\n        }\n        nbNode++\n    }\n    var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length)\n    return {\n        heuristic : bestHeuristic,\n        x : bestMove[0].x,\n        y : bestMove[0].y\n    }\n    // return {\n    //     heuristic : bestHeuristic,\n    //     x : bestMove[moveChoosen].x,\n    //     y : bestMove[moveChoosen].y\n    // }\n}\n\nconst printSameNodes = (node, bestHeuristic) => {\n    var nbNode = 0\n    var sameNodes = 0\n    while (node[nbNode]){\n        if (node[nbNode].heuristic === bestHeuristic)\n            sameNodes += 1\n        nbNode++\n    }\n    if (sameNodes > 1)\n        console.log(sameNodes)\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var bestHeuristic = getBestHeuristic(node, extrem)\n    // printSameNodes(node, bestHeuristic) // TMP\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    return randomChoice(node, bestHeuristic)\n    \n}\n\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n    if ((data.depth % 2) === (depth % 2)){\n        if (node[nbNode].heuristic > node.alpha)\n            node.alpha = node[nbNode].heuristic\n    }\n    else{\n        if ((node[nbNode].heuristic < node.beta))\n            node.beta = node[nbNode].heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst increment = (pos) => {\n    pos.x++\n    if (pos.x === 19){\n        pos.x = 0\n        pos.y++\n    }\n    if (pos.y === 19)\n        return false\n    return true\n}\n\nconst getChild = (pos, node, depth, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst uploadHeuristic = (depth, node) => {\n    var bestMove\n    if ((data.depth % 2) !== (depth % 2))\n        bestMove = getBestMove(node, data.MIN, depth)\n    else\n        bestMove = getBestMove(node, data.MAX, depth)\n    node.heuristic = bestMove.heuristic\n    if (depth === data.depth)\n        return {x : bestMove.x, y : bestMove.y}\n    return false\n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var pos = {x : 0, y : 0}\n    var color = (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n    while (true){\n        if (!data.board[pos.y][pos.x] && noStones(node, pos.x, pos.y)){\n            node[nbNode] = getChild(pos, node, depth, color)\n            if (depth > 1)\n                minmax(node[nbNode], depth - 1)\n            else\n                node[nbNode].heuristic = getHeuristic(node[nbNode])\n            if (getAlphaBetaPruning(node, depth, nbNode))\n                break\n            nbNode++\n        }\n        if (!increment(pos))\n            break\n    }\n    var bestMove\n    if ((bestMove = uploadHeuristic(depth, node)))\n        return {x : bestMove.x, y : bestMove.y}\n}\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var pos = {x : 0, y : 0}\n//     var color = (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n//     var c = 0\n//     while (c < 2){\n//         if (!data.board[pos.y][pos.x] && noStones(node, pos.x, pos.y)){\n//             node[nbNode] = getChild(pos, node, depth, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode])\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 break\n//             nbNode++\n//             c += 1\n//         }\n//         if (!increment(pos))\n//             break\n//     }\n//     var bestMove\n//     if ((bestMove = uploadHeuristic(depth, node)))\n//         return {x : bestMove.x, y : bestMove.y}\n// }\n\nconst blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            if (\n                (\n                    pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 &&\n                    (board[pos[0].y][pos[0].x] === data.WHITE || board[pos[0].y][pos[0].x] === data.BLACK)\n                ) ||\n                (\n                    pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 &&\n                    (board[pos[1].y][pos[1].x] === data.WHITE || board[pos[1].y][pos[1].x] === data.BLACK)\n                ) ||\n                (\n                    pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 &&\n                    (board[pos[2].y][pos[2].x] === data.WHITE || board[pos[2].y][pos[2].x] === data.BLACK)\n                ) ||\n                (\n                    pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 &&\n                    (board[pos[3].y][pos[3].x] === data.WHITE || board[pos[3].y][pos[3].x] === data.BLACK)\n                )\n            )\n                    return false\n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n            \n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && blockCase(x, y, board, offset))\n                board[y][x] = data.FORBIDDEN\n        }\n    }\n}\n\nconst getStartBoard = (board, offset) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, offset)\n    return res\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = playerColor\n    data.iaColor = playerColor === data.WHITE ? data.BLACK : data.WHITE\n    data.board = getStartBoard(board, 2)\n    // data.board = board\n    data.depth = 3\n    data.callsToMinMax = 0\n    data.heuristicIndex = 0\n    // data.heuristic = [-1, 3, 5, -6, -4]\n    data.heuristic = [8, 5, 6, -4, 3, 8, 4, -6, 1, 5, 2]\n    data.boards = [] // TMP\n    data.nbLeaves = 0 // TMP\n}\n\nconst getTreeToPrint = (node, depth) => {\n    var nbNode = 0\n    var res = {}\n    res.heuristic = node.heuristic\n    res.x = node.x\n    res.y = node.y\n    while (node[nbNode]){\n        if (depth > 0)\n            res[nbNode] = getTreeToPrint(node[nbNode], depth - 1)\n        nbNode += 1\n    }\n    return res\n}\n\nconst printTree = (tree, indentation) => {\n    var nbNode = 0\n    var prefix = ''\n    for (var c = 0; c < indentation; c++){\n        prefix += '----'\n    }\n    console.log(`${prefix}(${tree.heuristic})`)\n    while (tree[nbNode]){\n        printTree(tree[nbNode], indentation + 1)\n        nbNode++\n    }\n}\n\nconst printBackground = (ctx, canvas, images) => {\n    ctx.fillStyle = '#a6683e'\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n    for (var y = 0; y < 18; y++){\n        for (var x = 0; x < 18; x++)\n            ctx.drawImage(\n                images.gomokuBoard,\n                x * images.gomokuBoard.width + images.blackPiece.width / 2,\n                y * images.gomokuBoard.height + images.blackPiece.width / 2\n            )\n    }\n}\n\nconst printStones = (board, ctx, images) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                var stone = board[y][x] === data.WHITE ? images.whitePiece : images.blackPiece\n                ctx.drawImage(\n                    stone,\n                    images.gomokuBoard.width * x,\n                    images.gomokuBoard.height * y\n                )\n            }\n        }\n    }\n}\n\nconst printBoard = (board, ctx, images, canvas) => {\n    printBackground(ctx, canvas, images)\n    printStones(board, ctx, images)\n}\n\nconst printBoards = (ctx, images, canvas) => {\n    var c = -1\n    document.onkeydown = e => {\n        if (e.key === 'Enter')\n            c++\n        else if (e.key === ' ')\n            c += 100\n        else if (e.key === 'Backspace')\n            c -= 100\n        else\n            return\n        if (!data.boards[c])\n            return\n        printBoard(data.boards[c].board, ctx, images, canvas)\n        console.clear()\n        console.log('------------------------')\n        console.log('heuristic:', data.boards[c].node.heuristic)\n        console.log('parent heuristic:', data.boards[c].node.parent.heuristic)\n        console.log('infos heuristic:', data.boards[c].h2)\n        console.log('------------------------')\n        \n    }\n}\n\nconst ia = (board, playerColor, mainData, images) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    mainData.forbiddenStones = data.board\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    var pos = minmax(tree, data.depth)\n    printBoards(mainData.ctx, images, mainData.canvas)\n    // var treeToPrint = getTreeToPrint(tree, data.depth)\n    // printTree(tree, 0)\n    console.log('heuristic', tree.heuristic)\n    // console.log(treeToPrint)\n    // var bestChild = tree[tree.bestChild]\n    // var bestLittleChild = bestChild[bestChild.bestChild]\n    // console.log('best child :', bestChild.y, bestChild.x)\n    // console.log('best child :', bestLittleChild.y, bestLittleChild.x)\n    console.log('calls to minmax : ', data.callsToMinMax)\n    drawTree(tree, data.depth, data.nbLeaves)\n    return pos\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}