{"ast":null,"code":"// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\nvar data;\n\n// À FAIRE : IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n\nconst minmax = (treeLine, treeNode, stones, depth) => {\n  var node = 0;\n  data.tree[treeLine + 1] = [];\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && !stones[`${x},${y}`]) {\n        if (depth > 0) data.tree[treeLine + 1][node] = minmax(depth - 1);else h = heuristic(actualBoard(board, stones));\n        node += 1;\n      }\n    }\n  }\n};\nconst copyBoard = board => {\n  const array = [];\n  for (var c = 0; c < 19; c++) {\n    array[c] = [...board[c]];\n  }\n  return array;\n};\nconst initData = playerColor => {\n  data = {};\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.tree = [];\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(playerColor);\n  var tree = [];\n  minmax(0, 0, {}, 2);\n  getHeuristic(tree);\n  return getBestMove(tree);\n};\nexport default ia;","map":{"version":3,"names":["data","minmax","treeLine","treeNode","stones","depth","node","tree","y","x","board","h","heuristic","actualBoard","copyBoard","array","c","initData","playerColor","iaColor","ia","getHeuristic","getBestMove"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\nvar data\n\n// À FAIRE : IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n\nconst minmax = (treeLine, treeNode, stones, depth) => {\n    var node = 0\n    data.tree[treeLine + 1] = []\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && !stones[`${x},${y}`]){\n                if (depth > 0)\n                    data.tree[treeLine + 1][node] = minmax(depth - 1)\n                else\n                \n                h = heuristic(actualBoard(board, stones))\n                node += 1\n            }\n        }\n    }\n}\n\nconst copyBoard = (board) => {\n    const array = []\n    for (var c = 0; c < 19; c++){\n        array[c] = [...board[c]]\n    }\n    return array\n}\n\nconst initData = (playerColor) => {\n    data = {}\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.tree = []\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(playerColor)\n    var tree = []\n    minmax(0, 0, {}, 2)\n    getHeuristic(tree)\n    return (getBestMove(tree))\n}\n\nexport default ia"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI;;AAER;;AAEA,MAAMC,MAAM,GAAG,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAClD,IAAIC,IAAI,GAAG,CAAC;EACZN,IAAI,CAACO,IAAI,CAACL,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE;EAC5B,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;MACxB,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC,CAACC,CAAC,CAAC,IAAI,CAACL,MAAM,CAAE,GAAEK,CAAE,IAAGD,CAAE,EAAC,CAAC,EAAC;QACrC,IAAIH,KAAK,GAAG,CAAC,EACTL,IAAI,CAACO,IAAI,CAACL,QAAQ,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,GAAGL,MAAM,CAACI,KAAK,GAAG,CAAC,CAAC,MAGrDM,CAAC,GAAGC,SAAS,CAACC,WAAW,CAACH,KAAK,EAAEN,MAAM,CAAC,CAAC;QACzCE,IAAI,IAAI,CAAC;MACb;IACJ;EACJ;AACJ,CAAC;AAED,MAAMQ,SAAS,GAAIJ,KAAK,IAAK;EACzB,MAAMK,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;IACxBD,KAAK,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGN,KAAK,CAACM,CAAC,CAAC,CAAC;EAC5B;EACA,OAAOD,KAAK;AAChB,CAAC;AAED,MAAME,QAAQ,GAAIC,WAAW,IAAK;EAC9BlB,IAAI,GAAG,CAAC,CAAC;EACTA,IAAI,CAACmB,OAAO,GAAGD,WAAW,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO;EAC1DlB,IAAI,CAACO,IAAI,GAAG,EAAE;AAClB,CAAC;AAED,MAAMa,EAAE,GAAG,CAACV,KAAK,EAAEQ,WAAW,KAAK;EAC/B;EACA;EACAD,QAAQ,CAACC,WAAW,CAAC;EACrB,IAAIX,IAAI,GAAG,EAAE;EACbN,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACnBoB,YAAY,CAACd,IAAI,CAAC;EAClB,OAAQe,WAAW,CAACf,IAAI,CAAC;AAC7B,CAAC;AAED,eAAea,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}