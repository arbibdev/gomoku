{"ast":null,"code":"import getAiPath from \"./getAiPath\";\nimport { checkWinner } from \"../../tools/checkEndGame\";\nimport getHeuristic from \"./heuristic1\";\nimport { getBoard, freeBufferMemory } from \"./tools\";\nimport printBoard from '../printBoard';\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\nvar data;\nconst heuristic = ['align5', 'block4', 'align4Free', 'block3Free', 'align4', 'block3', 'align3Free', 'block2Free', 'align3', 'block2', 'align2Free', 'block1Free', 'align2', 'block1'];\n\n// const noStones = (node, x, y) => {\n//     var start = window.performance.now()\n//     var end\n//     while (node.parent){\n//         if (node.x === x && node.y === y){\n//             end = window.performance.now()\n//             data.noStonesTime += end - start\n//             return false\n//         }\n//         node = node.parent\n//     }\n//     end = window.performance.now()\n//     data.noStonesTime += end - start\n//     return true\n// }\n\nconst getAlphaBetaPruning = (node, heuristic, aiTurn) => {\n  if (aiTurn) {\n    if (heuristic > node.alpha) node.alpha = heuristic;\n  } else {\n    if (heuristic < node.beta) node.beta = heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst getChild = (pos, node, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst cancelForward = node => {\n  var start = window.performance.now();\n  getBoard(node, data.bufferMemory);\n  var endGame = checkWinner(data.bufferMemory);\n  freeBufferMemory(node, data.bufferMemory);\n  var end = window.performance.now();\n  data.cancelForwardTime += end - start;\n  if (endGame === data.aiColor) {\n    node.heuristic = Infinity;\n    return true;\n  }\n  if (endGame === data.playerColor) {\n    node.heuristic = -Infinity;\n    return true;\n  }\n  return false;\n};\nconst uploadHeuristic = (node, child, depth, aiTurn) => {\n  if (aiTurn) {\n    if (node.heuristic === undefined || child.heuristic > node.heuristic) {\n      node.heuristic = child.heuristic;\n      if (data.depth === depth) {\n        node.bestPos = {\n          x: child.x,\n          y: child.y\n        };\n      }\n    }\n  } else {\n    if (node.heuristic === undefined || child.heuristic < node.heuristic) node.heuristic = child.heuristic;\n  }\n};\nconst min = (bestHeuristic, heuristic) => {\n  if (bestHeuristic === false || heuristic < bestHeuristic) return heuristic;\n  return bestHeuristic;\n};\nconst max = (bestHeuristic, heuristic, pos) => {\n  if (bestHeuristic === false || heuristic > bestHeuristic) {\n    if (pos) data.pos = pos;\n    return heuristic;\n  }\n  return bestHeuristic;\n};\nconst minmax = (putStones, depth, alpha, beta) => {\n  var bestHeuristic = false;\n  var heuristic;\n  if (depth === 0) return getHeuristic(node, data);\n  for (var c = 0; c < data.aiPath.length; c++) {\n    if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)) {\n      heuristic = minmax(node, depth - 1, alpha, beta);\n      if (!(depth % 2)) {\n        bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.iaPath[c] : false);\n        if (heuristic > alpha) {\n          alpha = heuristic;\n          if (beta <= alpha) break;\n        }\n      } else {\n        bestHeuristic = min(bestHeuristic, heuristic);\n        if (heuristic < beta) {\n          beta = heuristic;\n          if (beta <= alpha) break;\n        }\n      }\n    }\n  }\n  return bestHeuristic;\n};\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var aiTurn = data.depth % 2 === depth % 2 ? true : false\n//     var color = aiTurn ? data.aiColor : data.playerColor\n//     if (cancelForward(node)){\n//         // console.log(`Cancel forward ${node.heuristic} aiTurn: ${aiTurn}`)\n//         return\n//     }\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(node, data.aiPath[c].x, data.aiPath[c].y)){\n//             node[nbNode] = getChild(data.aiPath[c], node, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode], data)\n//             uploadHeuristic(node, node[nbNode], depth,aiTurn)\n//             if (getAlphaBetaPruning(node, node[nbNode].heuristic, aiTurn))\n//                 break\n//             node[nbNode] = undefined // À remettre\n//             nbNode++\n//         }\n//     }\n// }\n\nconst getBufferMemory = board => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  return res;\n};\nconst initHeuristic = () => {\n  var res = {};\n  var pow = 0;\n  for (var c = heuristic.length - 1; c >= 0; c--) {\n    res[heuristic[c]] = Math.pow(10, pow);\n    pow++;\n  }\n  return res;\n};\nconst initData = mainData => {\n  var start = window.performance.now();\n  data = {};\n  data.depth = 3;\n  data.treatmentSpace = 3;\n  if (361 - data.piecesOnBoard < data.depth) data.depth = 361 - data.piecesOnBoard;\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = mainData.playerColor;\n  data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  console.log(`${data.aiColor === data.WHITE ? 'WHITE\\'S' : 'BLACK\\'S'} TURN`);\n  data.board = mainData.board;\n  data.aiPath = getAiPath(mainData.board, data.treatmentSpace);\n  data.bufferMemory = getBufferMemory(mainData.board);\n  data.heuristicAiDiviser = 1;\n  // if (data.depth % 2)\n  //     data.heuristicAiDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n  data.heuristic = initHeuristic(); // A NE PAS FAIRE A CHAQUE APPEL DE L'IA\n  data.heuristicTime = 0; // TMP\n  data.cancelForwardTime = 0; // TMP\n  data.noStonesTime = 0; // TMP\n  var end = window.performance.now();\n  data.initDataTime = end - start; // TMP\n  data.saveMinMax = []; // TMP\n  data.ctx = mainData.ctx; // TMP\n  data.images = mainData.images; // TMP\n  data.canvas = mainData.canvas; // TMP\n};\n\nconst printTime = data => {\n  console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`);\n  console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`);\n  console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`);\n  console.log(`init data time: ${Math.floor(data.initDataTime)}ms`);\n  console.log(`total time: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`);\n};\nconst printChoosenStones = (node, line) => {\n  var nbNode = 0;\n  if (!node || !node[0]) return;\n  while (node[nbNode].heuristic !== node.heuristic) nbNode++;\n  var color = line % 2 ? data.playerColor : data.aiColor;\n  var stringColor = color === data.BLACK ? 'black' : 'white';\n  console.log(`${stringColor} in ${node[nbNode].x} ${node[nbNode].y}`);\n  if (node[nbNode].heuristicInfos) console.log(node[nbNode].heuristicInfos);\n  printChoosenStones(node[nbNode], line + 1);\n};\nconst printSaveMinMax = (tree, data) => {\n  var count = 0;\n  window.onkeydown = e => {\n    if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft') return;\n    data.board = data.saveMinMax[count].board;\n    console.clear();\n    console.log(`final heuristic: ${tree.heuristic}`);\n    printChoosenStones(tree, 0);\n    console.log(`current heuristic : ${data.saveMinMax[count].heuristic}`);\n    console.log(data.saveMinMax[count].heuristicInfos);\n    printBoard(data);\n    if (e.key === 'ArrowRight' && count < data.saveMinMax.length - 1) count += 1;else if (e.key === 'ArrowLeft' && count > 0) count -= 1;\n  };\n};\nvar saveGame = [];\nconst printSaveGame = data => {\n  var count = 0;\n  window.onkeydown = e => {\n    if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft') return;\n    data.board = saveGame[count];\n    printBoard(data);\n    if (e.key === 'ArrowRight' && count < saveGame.length - 1) count += 1;else if (e.key === 'ArrowLeft' && count > 0) count -= 1;\n  };\n};\nconst copyBoard = board => {\n  var ret = [];\n  for (var y = 0; y < 19; y++) {\n    ret[y] = [];\n    for (var x = 0; x < 19; x++) {\n      ret[y][x] = board[y][x];\n    }\n  }\n  return ret;\n};\nconst ai = mainData => {\n  // saveGame.push(copyBoard(mainData.board))\n  initData(mainData);\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  heuristic = minmax(tree, data.depth);\n  // printTime(data,tree)\n  // console.log(`heuristic: ${tree.heuristic}`)\n  // printChoosenStones(tree, 0)\n  // printSaveMinMax(tree, data)\n  // printSaveGame(data)\n  console.log('----------------');\n  var pos = {\n    ...tree.bestPos\n  };\n  // data = undefined // À remettre\n  tree = undefined;\n  return pos;\n};\nexport default ai;","map":{"version":3,"names":["getAiPath","checkWinner","getHeuristic","getBoard","freeBufferMemory","printBoard","data","heuristic","getAlphaBetaPruning","node","aiTurn","alpha","beta","getChild","pos","color","x","y","parent","cancelForward","start","window","performance","now","bufferMemory","endGame","end","cancelForwardTime","aiColor","Infinity","playerColor","uploadHeuristic","child","depth","undefined","bestPos","min","bestHeuristic","max","minmax","putStones","c","aiPath","length","board","noStones","iaPath","getBufferMemory","res","initHeuristic","pow","Math","initData","mainData","treatmentSpace","piecesOnBoard","WHITE","BLACK","MIN","MAX","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","FORBIDDEN","console","log","heuristicAiDiviser","heuristicTime","noStonesTime","initDataTime","saveMinMax","ctx","images","canvas","printTime","floor","printChoosenStones","line","nbNode","stringColor","heuristicInfos","printSaveMinMax","tree","count","onkeydown","e","key","clear","saveGame","printSaveGame","copyBoard","ret","ai"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/ai.js"],"sourcesContent":["import getAiPath from \"./getAiPath\"\nimport { checkWinner } from \"../../tools/checkEndGame\"\nimport getHeuristic from \"./heuristic1\"\nimport { getBoard, freeBufferMemory } from \"./tools\"\nimport printBoard from '../printBoard'\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\nvar data\n\n\n\nconst heuristic = [\n    'align5',\n    'block4',\n    'align4Free',\n    'block3Free',\n    'align4',\n    'block3',\n    'align3Free',\n    'block2Free',\n    'align3',\n    'block2',\n    'align2Free',\n    'block1Free',\n    'align2',\n    'block1',\n]\n\n// const noStones = (node, x, y) => {\n//     var start = window.performance.now()\n//     var end\n//     while (node.parent){\n//         if (node.x === x && node.y === y){\n//             end = window.performance.now()\n//             data.noStonesTime += end - start\n//             return false\n//         }\n//         node = node.parent\n//     }\n//     end = window.performance.now()\n//     data.noStonesTime += end - start\n//     return true\n// }\n\n\n\nconst getAlphaBetaPruning = (node, heuristic, aiTurn) => {\n    if (aiTurn){\n        if (heuristic > node.alpha)\n            node.alpha = heuristic\n    }\n    else{\n        if ((heuristic < node.beta))\n            node.beta = heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst getChild = (pos, node, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst cancelForward = (node) => {\n    var start = window.performance.now()\n    getBoard(node, data.bufferMemory)\n    var endGame = checkWinner(data.bufferMemory)\n    freeBufferMemory(node, data.bufferMemory)\n    var end = window.performance.now()\n    data.cancelForwardTime += end - start\n    if (endGame === data.aiColor){\n        node.heuristic = Infinity\n        return true\n    }\n    if (endGame === data.playerColor){\n        node.heuristic = -Infinity\n        return true\n    }\n    return false\n}\n\nconst uploadHeuristic = (node, child, depth, aiTurn) => {\n    if (aiTurn){\n        if (node.heuristic === undefined || child.heuristic > node.heuristic){\n            node.heuristic = child.heuristic\n            if (data.depth === depth){\n                node.bestPos = {\n                    x : child.x,\n                    y : child.y\n                }\n            }\n        }\n    }\n    else{\n        if (node.heuristic === undefined || child.heuristic < node.heuristic)\n            node.heuristic = child.heuristic\n    }\n}\n\nconst min = (bestHeuristic, heuristic) => {\n    if (bestHeuristic === false || heuristic < bestHeuristic)\n        return heuristic\n    return bestHeuristic\n}\n\nconst max = (bestHeuristic, heuristic, pos) => {\n    if (bestHeuristic === false || heuristic > bestHeuristic){\n        if (pos)\n            data.pos = pos\n        return heuristic\n    }\n    return bestHeuristic\n}\n\nconst minmax = (putStones, depth, alpha, beta) => {\n    var bestHeuristic = false\n    var heuristic\n    if (depth === 0)\n        return getHeuristic(node, data)\n    for (var c = 0; c < data.aiPath.length; c++){\n        if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n            heuristic = minmax(node, depth - 1, alpha, beta)\n            if (!(depth % 2)){\n                bestHeuristic = max(\n                    bestHeuristic,\n                    heuristic, depth === data.depth ? data.iaPath[c] : false,\n                )\n                if (heuristic > alpha){\n                    alpha = heuristic\n                    if (beta <= alpha)\n                        break\n                }\n            }\n            else{\n                bestHeuristic = min(bestHeuristic, heuristic)\n                if (heuristic < beta){\n                    beta = heuristic\n                    if (beta <= alpha)\n                        break\n                }\n                \n            }\n        }\n    }\n    return bestHeuristic\n}\n\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var aiTurn = data.depth % 2 === depth % 2 ? true : false\n//     var color = aiTurn ? data.aiColor : data.playerColor\n//     if (cancelForward(node)){\n//         // console.log(`Cancel forward ${node.heuristic} aiTurn: ${aiTurn}`)\n//         return\n//     }\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(node, data.aiPath[c].x, data.aiPath[c].y)){\n//             node[nbNode] = getChild(data.aiPath[c], node, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode], data)\n//             uploadHeuristic(node, node[nbNode], depth,aiTurn)\n//             if (getAlphaBetaPruning(node, node[nbNode].heuristic, aiTurn))\n//                 break\n//             node[nbNode] = undefined // À remettre\n//             nbNode++\n//         }\n//     }\n// }\n\nconst getBufferMemory = (board) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    return res\n}\n\nconst initHeuristic = () => {\n    var res = {}\n    var pow = 0\n    for (var c = heuristic.length - 1; c >= 0; c--){\n        res[heuristic[c]] = Math.pow(10, pow)\n        pow++\n    }\n    return res\n}\n\nconst initData = (mainData) => {\n    var start = window.performance.now()\n    data = {}\n    data.depth = 3\n    data.treatmentSpace = 3\n    if (361 - data.piecesOnBoard < data.depth)\n        data.depth = 361 - data.piecesOnBoard\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = mainData.playerColor\n    data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n    console.log(`${data.aiColor === data.WHITE ? 'WHITE\\'S' : 'BLACK\\'S'} TURN`)\n    data.board = mainData.board\n    data.aiPath = getAiPath(mainData.board, data.treatmentSpace)\n    data.bufferMemory = getBufferMemory(mainData.board)\n    data.heuristicAiDiviser = 1\n    // if (data.depth % 2)\n    //     data.heuristicAiDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n    data.heuristic = initHeuristic() // A NE PAS FAIRE A CHAQUE APPEL DE L'IA\n    data.heuristicTime = 0 // TMP\n    data.cancelForwardTime = 0 // TMP\n    data.noStonesTime = 0 // TMP\n    var end = window.performance.now()\n    data.initDataTime = end - start // TMP\n    data.saveMinMax = [] // TMP\n    data.ctx = mainData.ctx // TMP\n    data.images = mainData.images // TMP\n    data.canvas = mainData.canvas // TMP\n}\n\nconst printTime = data => {\n    console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`)\n    console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`)\n    console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`)\n    console.log(`init data time: ${Math.floor(data.initDataTime)}ms`)\n    console.log(`total time: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`)\n}\n\nconst printChoosenStones = (node, line) => {\n    var nbNode = 0\n    if (!node || !node[0])\n        return\n    while (node[nbNode].heuristic !== node.heuristic)\n        nbNode++\n    var color = line % 2 ? data.playerColor : data.aiColor\n    var stringColor = color === data.BLACK ? 'black' : 'white'\n    console.log(`${stringColor} in ${node[nbNode].x} ${node[nbNode].y}`)\n    if (node[nbNode].heuristicInfos)\n        console.log(node[nbNode].heuristicInfos)\n    printChoosenStones(node[nbNode], line + 1)\n}\n\nconst printSaveMinMax = (tree, data) => {\n    var count = 0\n    window.onkeydown = e => {\n        if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft')\n            return\n        data.board = data.saveMinMax[count].board\n        console.clear()\n        console.log(`final heuristic: ${tree.heuristic}`)\n        printChoosenStones(tree, 0)\n        console.log(`current heuristic : ${data.saveMinMax[count].heuristic}`)\n        console.log(data.saveMinMax[count].heuristicInfos)\n        printBoard(data)\n        if (e.key === 'ArrowRight' && count < data.saveMinMax.length - 1)\n            count += 1\n        else if (e.key === 'ArrowLeft' && count > 0)\n            count -= 1\n    }\n}\n\nvar saveGame = []\nconst printSaveGame = data => {\n    var count = 0\n    window.onkeydown = e => {\n        if (e.key !== 'ArrowRight' && e.key !== 'ArrowLeft')\n            return\n        data.board = saveGame[count]\n        printBoard(data)\n        if (e.key === 'ArrowRight' && count < saveGame.length - 1)\n            count += 1\n        else if (e.key === 'ArrowLeft' && count > 0)\n            count -= 1\n    }\n}\n\nconst copyBoard = board => {\n    var ret = []\n    for (var y = 0; y < 19; y++){\n        ret[y] = []\n        for (var x = 0; x < 19; x++){\n            ret[y][x] = board[y][x]\n        }\n    }\n    return ret\n}\n\nconst ai = (mainData) => {\n    // saveGame.push(copyBoard(mainData.board))\n    initData(mainData)\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    heuristic = minmax(tree, data.depth)\n    // printTime(data,tree)\n    // console.log(`heuristic: ${tree.heuristic}`)\n    // printChoosenStones(tree, 0)\n    // printSaveMinMax(tree, data)\n    // printSaveGame(data)\n    console.log('----------------')\n    var pos = {...tree.bestPos}\n    // data = undefined // À remettre\n    tree = undefined\n    return pos\n}\n\nexport default ai"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}