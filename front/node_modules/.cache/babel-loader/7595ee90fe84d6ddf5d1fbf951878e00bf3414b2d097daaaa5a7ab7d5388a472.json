{"ast":null,"code":"const checkVerticalAlignment = (x, y, board, playerColor) => {\n  var nb = 0;\n  var color = board[y][x];\n  while (y < 19 && nb < 5 && board[y][x] === color) {\n    y++;\n    nb++;\n  }\n  if (nb === 5) return color;\n  return false;\n};\nconst checkAlignment = (x, y, board, playerColor) => {\n  var winner;\n  if (winner = checkVerticalAlignment(x, y, board, playerColor)) return winner;\n  return false;\n};\nconst checkWinner = (data, playerColor) => {\n  var winner;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (winner = checkAlignment(x, y, data.board, playerColor)) return winner;\n    }\n  }\n  return false;\n};\nconst checkEndGame = (data, playerColor) => {\n  var winner = checkWinner(data, playerColor);\n  if (winner) return winner;\n  if (data.piecesOnBoard === 19 * 19) return 'draw';\n  return false;\n};\nexport default checkEndGame;","map":{"version":3,"names":["checkVerticalAlignment","x","y","board","playerColor","nb","color","checkAlignment","winner","checkWinner","data","checkEndGame","piecesOnBoard"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/checkEndGame.js"],"sourcesContent":["const checkVerticalAlignment = (x, y, board, playerColor) => {\n    var nb = 0\n    var color = board[y][x]\n    while (y < 19 && nb < 5 && board[y][x] === color){\n        y++\n        nb++\n    }\n    if (nb === 5)\n        return color\n    return false\n}\n\nconst checkAlignment = (x, y, board, playerColor) => {\n    var winner\n    if ((winner = checkVerticalAlignment(x, y, board, playerColor)))\n        return winner\n    return false\n}\n\nconst checkWinner = (data, playerColor) => {\n    var winner\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if ((winner = checkAlignment(x, y, data.board, playerColor)))\n                return winner\n        }\n    }\n    return false\n}\n\nconst checkEndGame = (data, playerColor) => {\n    var winner = checkWinner(data, playerColor)\n    if (winner)\n        return winner\n    if (data.piecesOnBoard === 19*19)\n        return 'draw'\n    return false\n}\n\nexport default checkEndGame"],"mappings":"AAAA,MAAMA,sBAAsB,GAAG,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,WAAW,KAAK;EACzD,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,KAAK,GAAGH,KAAK,CAACD,CAAC,CAAC,CAACD,CAAC,CAAC;EACvB,OAAOC,CAAC,GAAG,EAAE,IAAIG,EAAE,GAAG,CAAC,IAAIF,KAAK,CAACD,CAAC,CAAC,CAACD,CAAC,CAAC,KAAKK,KAAK,EAAC;IAC7CJ,CAAC,EAAE;IACHG,EAAE,EAAE;EACR;EACA,IAAIA,EAAE,KAAK,CAAC,EACR,OAAOC,KAAK;EAChB,OAAO,KAAK;AAChB,CAAC;AAED,MAAMC,cAAc,GAAG,CAACN,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,WAAW,KAAK;EACjD,IAAII,MAAM;EACV,IAAKA,MAAM,GAAGR,sBAAsB,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,WAAW,CAAC,EAC1D,OAAOI,MAAM;EACjB,OAAO,KAAK;AAChB,CAAC;AAED,MAAMC,WAAW,GAAG,CAACC,IAAI,EAAEN,WAAW,KAAK;EACvC,IAAII,MAAM;EACV,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;IACxB,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;MACxB,IAAKO,MAAM,GAAGD,cAAc,CAACN,CAAC,EAAEC,CAAC,EAAEQ,IAAI,CAACP,KAAK,EAAEC,WAAW,CAAC,EACvD,OAAOI,MAAM;IACrB;EACJ;EACA,OAAO,KAAK;AAChB,CAAC;AAED,MAAMG,YAAY,GAAG,CAACD,IAAI,EAAEN,WAAW,KAAK;EACxC,IAAII,MAAM,GAAGC,WAAW,CAACC,IAAI,EAAEN,WAAW,CAAC;EAC3C,IAAII,MAAM,EACN,OAAOA,MAAM;EACjB,IAAIE,IAAI,CAACE,aAAa,KAAK,EAAE,GAAC,EAAE,EAC5B,OAAO,MAAM;EACjB,OAAO,KAAK;AAChB,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}