{"ast":null,"code":"import { getBoard } from \"./tools\";\nconst singleStoneHeuristic = (board, node, data) => {\n  var h = 10;\n  var free = 1;\n  var x = node.x;\n  var y = node.y;\n  if (y - 1 >= 0 && !board[y - 1][x]) free += 1;\n  if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1]) free += 1;\n  if (x + 1 < 19 && !board[y][x + 1]) free += 1;\n  if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1]) free += 1;\n  if (y + 1 < 19 && !board[y + 1][x]) free += 1;\n  if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1]) free += 1;\n  if (x - 1 >= 0 && !board[y][x - 1]) free += 1;\n  if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) free += 1;\n  h *= free;\n  if (node.color === data.aiColor) return h / data.heuristicAiDiviser;\n  return -h;\n};\nconst verticalAlignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.y -= 1;\n  }\n  if (pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.y += 1;\n  while (pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst horizontalAlignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n  }\n  if (pos.x >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  while (pos.x < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst diagonal1Alignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y -= 1;\n  }\n  if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  pos.y += 1;\n  while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst diagonal2Alignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y -= 1;\n  }\n  if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x -= 1;\n  pos.y += 1;\n  while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst alignmentHeuristic = (board, node, data) => {\n  var h = 0;\n  h += verticalAlignment(board, node);\n  h += horizontalAlignment(board, node);\n  h += diagonal1Alignment(board, node);\n  h += diagonal2Alignment(board, node);\n  if (node.color === data.aiColor) return h / data.heuristicAiDiviser;\n  return -h;\n};\nconst getHeuristic = (node, data) => {\n  const start = window.performance.now();\n  getBoard(node, data.bufferMemory);\n  var h1 = 0;\n  var h2 = 0;\n  while (node.parent) {\n    // getBoard(node, data.bufferMemory)\n    h1 += singleStoneHeuristic(data.bufferMemory, node, data);\n    h2 += alignmentHeuristic(data.bufferMemory, node, data);\n    data.bufferMemory[node.y][node.x] = 0;\n    // freeBufferMemory(node, data.bufferMemory)\n    node = node.parent;\n  }\n  // freeBufferMemory(saveNode, data.bufferMemory)\n  const end = window.performance.now();\n  data.heuristicTime += end - start;\n  return h1 + h2;\n};\nexport default getHeuristic;","map":{"version":3,"names":["getBoard","singleStoneHeuristic","board","node","data","h","free","x","y","color","aiColor","heuristicAiDiviser","verticalAlignment","pos","neighbour1","neighbour2","sizeAlignment","Math","pow","horizontalAlignment","diagonal1Alignment","diagonal2Alignment","alignmentHeuristic","getHeuristic","start","window","performance","now","bufferMemory","h1","h2","parent","end","heuristicTime"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/heuristic2.js"],"sourcesContent":["import { getBoard } from \"./tools\"\n\nconst singleStoneHeuristic = (board, node, data) => {\n    var h = 10\n    var free = 1\n    var x = node.x\n    var y = node.y\n    if (y - 1 >= 0 && !board[y - 1][x])\n        free += 1\n    if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1])\n        free += 1\n    if (x + 1 < 19 && !board[y][x + 1])\n        free += 1\n    if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1])\n        free += 1\n    if (y + 1 < 19 && !board[y + 1][x])\n        free += 1\n    if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1])\n        free += 1\n    if (x - 1 >= 0 && !board[y][x - 1])\n        free += 1\n    if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n        free += 1\n    h *= free\n    if (node.color === data.aiColor)\n        return h / data.heuristicAiDiviser\n    return -h\n}\n\nconst verticalAlignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.y -= 1\n    }\n    if (pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.y += 1\n    while (pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst horizontalAlignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n    }\n    if (pos.x >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    while (pos.x < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst diagonal1Alignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y -= 1\n    }\n    if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    pos.y += 1\n    while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst diagonal2Alignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y -= 1\n    }\n    if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x -= 1\n    pos.y += 1\n    while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst alignmentHeuristic = (board, node, data) => {\n    var h = 0\n    h += verticalAlignment(board, node)\n    h += horizontalAlignment(board, node)\n    h += diagonal1Alignment(board, node)\n    h += diagonal2Alignment(board, node)\n    if (node.color === data.aiColor)\n        return h / data.heuristicAiDiviser\n    return -h\n}\n\nconst getHeuristic = (node, data) => {\n    const start = window.performance.now()\n    getBoard(node, data.bufferMemory)\n    var h1 = 0\n    var h2 = 0\n    while (node.parent){\n        // getBoard(node, data.bufferMemory)\n        h1 += singleStoneHeuristic(data.bufferMemory, node, data)\n        h2 += alignmentHeuristic(data.bufferMemory, node, data)\n        data.bufferMemory[node.y][node.x] = 0\n        // freeBufferMemory(node, data.bufferMemory)\n        node = node.parent\n    }\n    // freeBufferMemory(saveNode, data.bufferMemory)\n    const end = window.performance.now()\n    data.heuristicTime += end - start\n    return h1 + h2\n}\n\nexport default getHeuristic"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;AAElC,MAAMC,oBAAoB,GAAG,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAChD,IAAIC,CAAC,GAAG,EAAE;EACV,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,CAAC,GAAGJ,IAAI,CAACI,CAAC;EACd,IAAIC,CAAC,GAAGL,IAAI,CAACK,CAAC;EACd,IAAIA,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACN,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,CAACD,CAAC,CAAC,EAC9BD,IAAI,IAAI,CAAC;EACb,IAAIE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAID,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAACL,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAChDD,IAAI,IAAI,CAAC;EACb,IAAIC,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAACL,KAAK,CAACM,CAAC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAC9BD,IAAI,IAAI,CAAC;EACb,IAAIC,CAAC,GAAG,CAAC,GAAG,EAAE,IAAIC,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAACN,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAChDD,IAAI,IAAI,CAAC;EACb,IAAIE,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAACN,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,CAACD,CAAC,CAAC,EAC9BD,IAAI,IAAI,CAAC;EACb,IAAIE,CAAC,GAAG,CAAC,GAAG,EAAE,IAAID,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACL,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAChDD,IAAI,IAAI,CAAC;EACb,IAAIC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACL,KAAK,CAACM,CAAC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAC9BD,IAAI,IAAI,CAAC;EACb,IAAIC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAIC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACN,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,EAChDD,IAAI,IAAI,CAAC;EACbD,CAAC,IAAIC,IAAI;EACT,IAAIH,IAAI,CAACM,KAAK,KAAKL,IAAI,CAACM,OAAO,EAC3B,OAAOL,CAAC,GAAGD,IAAI,CAACO,kBAAkB;EACtC,OAAO,CAACN,CAAC;AACb,CAAC;AAED,MAAMO,iBAAiB,GAAG,CAACV,KAAK,EAAEC,IAAI,KAAK;EACvC,IAAIM,KAAK,GAAGN,IAAI,CAACM,KAAK;EACtB,IAAII,GAAG,GAAG;IAACN,CAAC,EAAGJ,IAAI,CAACI,CAAC;IAAEC,CAAC,EAAGL,IAAI,CAACK;EAAC,CAAC;EAClC,IAAIM,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOH,GAAG,CAACL,CAAC,IAAI,CAAC,IAAIN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,KAAKE,KAAK,EAAC;IAC/CI,GAAG,CAACL,CAAC,IAAI,CAAC;EACd;EACA,IAAIK,GAAG,CAACL,CAAC,IAAI,CAAC,IAAI,CAACN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,EAClCO,UAAU,GAAG,CAAC;EAClBD,GAAG,CAACL,CAAC,IAAI,CAAC;EACV,OAAOK,GAAG,CAACL,CAAC,GAAG,EAAE,IAAIN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,KAAKE,KAAK,EAAC;IAC/CI,GAAG,CAACL,CAAC,IAAI,CAAC;IACVQ,aAAa,IAAI,CAAC;EACtB;EACA,IAAIH,GAAG,CAACL,CAAC,GAAG,EAAE,IAAI,CAACN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,EAClCQ,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC,IAAK,CAACF,UAAU,IAAI,CAACC,UAAW,EACjD,OAAO,CAAC;EACZ,OAAOE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEF,aAAa,CAAC,IAAIF,UAAU,GAAGC,UAAU,GAAG,CAAC,CAAC;AACtE,CAAC;AAED,MAAMI,mBAAmB,GAAG,CAACjB,KAAK,EAAEC,IAAI,KAAK;EACzC,IAAIM,KAAK,GAAGN,IAAI,CAACM,KAAK;EACtB,IAAII,GAAG,GAAG;IAACN,CAAC,EAAGJ,IAAI,CAACI,CAAC;IAAEC,CAAC,EAAGL,IAAI,CAACK;EAAC,CAAC;EAClC,IAAIM,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOH,GAAG,CAACN,CAAC,IAAI,CAAC,IAAIL,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,KAAKE,KAAK,EAAC;IAC/CI,GAAG,CAACN,CAAC,IAAI,CAAC;EACd;EACA,IAAIM,GAAG,CAACN,CAAC,IAAI,CAAC,IAAI,CAACL,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,EAClCO,UAAU,GAAG,CAAC;EAClBD,GAAG,CAACN,CAAC,IAAI,CAAC;EACV,OAAOM,GAAG,CAACN,CAAC,GAAG,EAAE,IAAIL,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,KAAKE,KAAK,EAAC;IAC/CI,GAAG,CAACN,CAAC,IAAI,CAAC;IACVS,aAAa,IAAI,CAAC;EACtB;EACA,IAAIH,GAAG,CAACN,CAAC,GAAG,EAAE,IAAI,CAACL,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,EAClCQ,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC,IAAK,CAACF,UAAU,IAAI,CAACC,UAAW,EACjD,OAAO,CAAC;EACZ,OAAOE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEF,aAAa,CAAC,IAAIF,UAAU,GAAGC,UAAU,GAAG,CAAC,CAAC;AACtE,CAAC;AAED,MAAMK,kBAAkB,GAAG,CAAClB,KAAK,EAAEC,IAAI,KAAK;EACxC,IAAIM,KAAK,GAAGN,IAAI,CAACM,KAAK;EACtB,IAAII,GAAG,GAAG;IAACN,CAAC,EAAGJ,IAAI,CAACI,CAAC;IAAEC,CAAC,EAAGL,IAAI,CAACK;EAAC,CAAC;EAClC,IAAIM,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOH,GAAG,CAACN,CAAC,IAAI,CAAC,IAAIM,GAAG,CAACL,CAAC,IAAI,CAAC,IAAIN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,KAAKE,KAAK,EAAC;IAC7DI,GAAG,CAACN,CAAC,IAAI,CAAC;IACVM,GAAG,CAACL,CAAC,IAAI,CAAC;EACd;EACA,IAAIK,GAAG,CAACN,CAAC,IAAI,CAAC,IAAIM,GAAG,CAACL,CAAC,IAAI,CAAC,IAAI,CAACN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,EAChDO,UAAU,GAAG,CAAC;EAClBD,GAAG,CAACN,CAAC,IAAI,CAAC;EACVM,GAAG,CAACL,CAAC,IAAI,CAAC;EACV,OAAOK,GAAG,CAACN,CAAC,GAAG,EAAE,IAAIM,GAAG,CAACL,CAAC,GAAG,EAAE,IAAIN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,KAAKE,KAAK,EAAC;IAC7DI,GAAG,CAACN,CAAC,IAAI,CAAC;IACVM,GAAG,CAACL,CAAC,IAAI,CAAC;IACVQ,aAAa,IAAI,CAAC;EACtB;EACA,IAAIH,GAAG,CAACN,CAAC,GAAG,EAAE,IAAIM,GAAG,CAACL,CAAC,GAAG,EAAE,IAAI,CAACN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,EAChDQ,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC,IAAK,CAACF,UAAU,IAAI,CAACC,UAAW,EACjD,OAAO,CAAC;EACZ,OAAOE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEF,aAAa,CAAC,IAAIF,UAAU,GAAGC,UAAU,GAAG,CAAC,CAAC;AACtE,CAAC;AAED,MAAMM,kBAAkB,GAAG,CAACnB,KAAK,EAAEC,IAAI,KAAK;EACxC,IAAIM,KAAK,GAAGN,IAAI,CAACM,KAAK;EACtB,IAAII,GAAG,GAAG;IAACN,CAAC,EAAGJ,IAAI,CAACI,CAAC;IAAEC,CAAC,EAAGL,IAAI,CAACK;EAAC,CAAC;EAClC,IAAIM,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOH,GAAG,CAACN,CAAC,GAAG,EAAE,IAAIM,GAAG,CAACL,CAAC,IAAI,CAAC,IAAIN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,KAAKE,KAAK,EAAC;IAC7DI,GAAG,CAACN,CAAC,IAAI,CAAC;IACVM,GAAG,CAACL,CAAC,IAAI,CAAC;EACd;EACA,IAAIK,GAAG,CAACN,CAAC,GAAG,EAAE,IAAIM,GAAG,CAACL,CAAC,IAAI,CAAC,IAAI,CAACN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,EAChDO,UAAU,GAAG,CAAC;EAClBD,GAAG,CAACN,CAAC,IAAI,CAAC;EACVM,GAAG,CAACL,CAAC,IAAI,CAAC;EACV,OAAOK,GAAG,CAACN,CAAC,IAAI,CAAC,IAAIM,GAAG,CAACL,CAAC,GAAG,EAAE,IAAIN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,KAAKE,KAAK,EAAC;IAC7DI,GAAG,CAACN,CAAC,IAAI,CAAC;IACVM,GAAG,CAACL,CAAC,IAAI,CAAC;IACVQ,aAAa,IAAI,CAAC;EACtB;EACA,IAAIH,GAAG,CAACN,CAAC,IAAI,CAAC,IAAIM,GAAG,CAACL,CAAC,GAAG,EAAE,IAAI,CAACN,KAAK,CAACW,GAAG,CAACL,CAAC,CAAC,CAACK,GAAG,CAACN,CAAC,CAAC,EAChDQ,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC,IAAK,CAACF,UAAU,IAAI,CAACC,UAAW,EACjD,OAAO,CAAC;EACZ,OAAOE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEF,aAAa,CAAC,IAAIF,UAAU,GAAGC,UAAU,GAAG,CAAC,CAAC;AACtE,CAAC;AAED,MAAMO,kBAAkB,GAAG,CAACpB,KAAK,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC9C,IAAIC,CAAC,GAAG,CAAC;EACTA,CAAC,IAAIO,iBAAiB,CAACV,KAAK,EAAEC,IAAI,CAAC;EACnCE,CAAC,IAAIc,mBAAmB,CAACjB,KAAK,EAAEC,IAAI,CAAC;EACrCE,CAAC,IAAIe,kBAAkB,CAAClB,KAAK,EAAEC,IAAI,CAAC;EACpCE,CAAC,IAAIgB,kBAAkB,CAACnB,KAAK,EAAEC,IAAI,CAAC;EACpC,IAAIA,IAAI,CAACM,KAAK,KAAKL,IAAI,CAACM,OAAO,EAC3B,OAAOL,CAAC,GAAGD,IAAI,CAACO,kBAAkB;EACtC,OAAO,CAACN,CAAC;AACb,CAAC;AAED,MAAMkB,YAAY,GAAG,CAACpB,IAAI,EAAEC,IAAI,KAAK;EACjC,MAAMoB,KAAK,GAAGC,MAAM,CAACC,WAAW,CAACC,GAAG,EAAE;EACtC3B,QAAQ,CAACG,IAAI,EAAEC,IAAI,CAACwB,YAAY,CAAC;EACjC,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,OAAO3B,IAAI,CAAC4B,MAAM,EAAC;IACf;IACAF,EAAE,IAAI5B,oBAAoB,CAACG,IAAI,CAACwB,YAAY,EAAEzB,IAAI,EAAEC,IAAI,CAAC;IACzD0B,EAAE,IAAIR,kBAAkB,CAAClB,IAAI,CAACwB,YAAY,EAAEzB,IAAI,EAAEC,IAAI,CAAC;IACvDA,IAAI,CAACwB,YAAY,CAACzB,IAAI,CAACK,CAAC,CAAC,CAACL,IAAI,CAACI,CAAC,CAAC,GAAG,CAAC;IACrC;IACAJ,IAAI,GAAGA,IAAI,CAAC4B,MAAM;EACtB;EACA;EACA,MAAMC,GAAG,GAAGP,MAAM,CAACC,WAAW,CAACC,GAAG,EAAE;EACpCvB,IAAI,CAAC6B,aAAa,IAAID,GAAG,GAAGR,KAAK;EACjC,OAAOK,EAAE,GAAGC,EAAE;AAClB,CAAC;AAED,eAAeP,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}