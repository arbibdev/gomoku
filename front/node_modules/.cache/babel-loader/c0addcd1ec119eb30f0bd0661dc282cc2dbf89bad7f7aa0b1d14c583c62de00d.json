{"ast":null,"code":"import { checkEndGame } from '../../tools/checkEndGame';\nimport printBoard from '../../tools/printBoard';\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport { io } from \"socket.io-client\";\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame || data.turn === 'ai') return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.playerColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else printBoard(data);\n};\nconst printEndGameStatus = data => {\n  var params = {};\n  params[data.DRAW] = {\n    text: 'END OF GAME, NO WINNER',\n    color: 'orange'\n  };\n  params[data.playerColor] = {\n    text: 'YOU WON THE GAME !',\n    color: 'green'\n  };\n  params[data.aiColor] = {\n    text: 'YOU LOST THE GAME',\n    color: 'red'\n  };\n  document.getElementById('endGame').style.color = params[data.endGame].color;\n  document.getElementById('endGame').innerHTML = params[data.endGame].text;\n  document.getElementById('newGame').style.display = 'block';\n};\nconst setEndGame = data => {\n  printEndGameStatus(data);\n  data.socket.disconnect();\n};\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst print_new_stone = (data, new_stone, pos, color) => {\n  var stone;\n  if (color === data.BLACK) stone = data.images.blackPiece;else stone = data.images.whitePiece;\n  data.ctx.drawImage(stone, data.images.gomokuBoard.width * pos.x - (new_stone.width - data.images.gomokuBoard.width) / 2., data.images.gomokuBoard.height * pos.y - (new_stone.height - data.images.gomokuBoard.height) / 2., new_stone.width, new_stone.height);\n};\nconst check_capture = (data, captured, pos, xIncrement, yIncrement, color, ennemyColor) => {\n  var x;\n  var y;\n  x = pos.x + xIncrement;\n  y = pos.y + yIncrement;\n  if (!(x >= 0 && x < 19 && y >= 0 && y < 19 && data.board[y][x] === ennemyColor)) return;\n  x += xIncrement;\n  y += yIncrement;\n  if (!(x >= 0 && x < 19 && y >= 0 && y < 19 && data.board[y][x] === ennemyColor)) return;\n  x += xIncrement;\n  y += yIncrement;\n  if (!(x >= 0 && x < 19 && y >= 0 && y < 19 && data.board[y][x] === color)) return;\n  captured.push({\n    x: pos.x + xIncrement,\n    y: pos.y + yIncrement\n  });\n  captured.push({\n    x: pos.x + 2 * xIncrement,\n    y: pos.y + 2 * yIncrement\n  });\n};\nconst getCapturedStones = (data, captured, pos, color, ennemyColor) => {\n  check_capture(data, captured, pos, 0, -1, color, ennemyColor);\n  check_capture(data, captured, pos, 1, -1, color, ennemyColor);\n  check_capture(data, captured, pos, 1, 0, color, ennemyColor);\n  check_capture(data, captured, pos, 1, 1, color, ennemyColor);\n  check_capture(data, captured, pos, 0, 1, color, ennemyColor);\n  check_capture(data, captured, pos, -1, 1, color, ennemyColor);\n  check_capture(data, captured, pos, -1, 0, color, ennemyColor);\n  check_capture(data, captured, pos, -1, -1, color, ennemyColor);\n};\n// PENSER A DECREMENTER DATA.PUTSTONES\nconst launch_capture_animation = (data, pos, color) => {\n  var captured = [];\n  var ennemyColor;\n  if (color === data.BLACK) ennemyColor = data.WHITE;else ennemyColor = data.BLACK;\n  getCapturedStones(data, captured, pos, color, ennemyColor);\n  for (var c = 0; c < captured.length; c++) {\n    data.board[captured[c].y][captured[c].x] = 0;\n  }\n  printBoard(data);\n};\nconst launch_put_stone_animation = (data, pos, color) => {\n  var new_stone = {};\n  new_stone.width = data.images.gomokuBoard.width * 10;\n  new_stone.height = data.images.gomokuBoard.height * 10;\n  var inter = setInterval(() => {\n    printBoard(data);\n    print_new_stone(data, new_stone, pos, color);\n    new_stone.width -= data.images.gomokuBoard.width / 4;\n    new_stone.height -= data.images.gomokuBoard.height / 4;\n    if (new_stone.width <= data.images.gomokuBoard.width && new_stone.height <= data.images.gomokuBoard.height) {\n      data.board[pos.y][pos.x] = color;\n      printBoard(data);\n      clearInterval(inter);\n      launch_capture_animation(data, pos, color);\n      if (data.endGame = checkEndGame(data)) {\n        setEndGame(data);\n        return;\n      }\n      data.turn = 'human';\n      data.aiLaunched = false;\n    }\n  }, 10);\n};\nconst receiveAiMove = (data, pos) => {\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  // data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`;\n  document.getElementById('timerAverage').innerHTML = `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`;\n  launch_put_stone_animation(data, pos, data.aiColor);\n  // printBoard(data)\n  // if ((data.endGame = checkEndGame(data))){\n  //     setEndGame(data)\n  //     return\n  // }\n  // data.turn = 'human'\n  // data.aiLaunched = false\n};\n\nconst canvasOnClick = (e, data) => {\n  if (data.endGame || data.turn === 'ai') return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = data.playerColor;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    launch_capture_animation(data, stone, data.playerColor);\n    if (data.endGame = checkEndGame(data)) {\n      setEndGame(data);\n      return;\n    }\n    data.turn = 'ai';\n    launchAi(data, data.images, data.playerColor);\n  }\n};\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame || data.turn === 'ai') return;\n  printBoard(data);\n};\nconst initGame = (images, playerColor, firstPlayer) => {\n  // test()\n  var data = {};\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs ai'\n    }\n  });\n  data.aiLaunched = false;\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayer;\n  data.aiMoves = 0;\n  data.aiTotalTime = 0;\n  data.piecesOnBoard = 0;\n  data.playerColor = playerColor;\n  data.aiColor = playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.images = images;\n  printBoard(data);\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  if (data.turn === 'ai') launchAi(data);\n  data.canvas.onmousemove = e => canvasOnMouseMove(e, data);\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data);\n};\nexport default initGame;","map":{"version":3,"names":["checkEndGame","printBoard","getStonePosition","initBoard","serverIp","io","canvasOnMouseMove","e","data","endGame","turn","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","y","board","x","ctx","globalAlpha","drawImage","playerColor","WHITE","images","whitePiece","blackPiece","gomokuBoard","width","height","printEndGameStatus","params","DRAW","text","color","aiColor","document","getElementById","style","innerHTML","display","setEndGame","socket","disconnect","launchAi","startAi","window","performance","now","aiLaunched","emit","print_new_stone","new_stone","pos","BLACK","check_capture","captured","xIncrement","yIncrement","ennemyColor","push","getCapturedStones","launch_capture_animation","c","length","launch_put_stone_animation","inter","setInterval","clearInterval","receiveAiMove","timeAi","Math","floor","piecesOnBoard","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","toFixed","canvasOnClick","canvasOnMouseLeave","initGame","firstPlayer","query","page","getContext","on","onmousemove","onclick","onmouseleave"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsAi/initGame.js"],"sourcesContent":["import { checkEndGame } from '../../tools/checkEndGame'\nimport printBoard from '../../tools/printBoard'\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport { io } from \"socket.io-client\"\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame || data.turn === 'ai')\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.playerColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else\n        printBoard(data)\n}\n\nconst printEndGameStatus = data => {\n\tvar params = {}\n    params[data.DRAW] = {\n        text : 'END OF GAME, NO WINNER',\n        color : 'orange'\n    }\n    params[data.playerColor] = {\n        text : 'YOU WON THE GAME !',\n        color : 'green'\n    }\n    params[data.aiColor] = {\n        text : 'YOU LOST THE GAME',\n        color : 'red'\n    }\n    document.getElementById('endGame').style.color = params[data.endGame].color\n    document.getElementById('endGame').innerHTML = params[data.endGame].text\n    document.getElementById('newGame').style.display = 'block'\n}\n\nconst setEndGame = data => {\n    printEndGameStatus(data)\n\tdata.socket.disconnect()\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst print_new_stone = (data, new_stone, pos, color) => {\n\tvar stone\n\tif (color === data.BLACK)\n\t\tstone = data.images.blackPiece\n\telse\n\t\tstone = data.images.whitePiece\n\tdata.ctx.drawImage(\n\t\tstone,\n\t\tdata.images.gomokuBoard.width * pos.x - ((new_stone.width - data.images.gomokuBoard.width) / 2.),\n\t\tdata.images.gomokuBoard.height * pos.y - ((new_stone.height - data.images.gomokuBoard.height) / 2.),\n\t\tnew_stone.width,\n\t\tnew_stone.height\n\t)\n}\n\nconst check_capture = (data, captured, pos, xIncrement, yIncrement, color, ennemyColor) => {\n\tvar x;\n\tvar y;\n\n\tx = pos.x + xIncrement\n\ty = pos.y + yIncrement\n\tif (!(x >= 0 && x < 19 && y >= 0 && y < 19\n\t&& data.board[y][x] === ennemyColor))\n\t\treturn\n\tx += xIncrement\n\ty += yIncrement\n\tif (!(x >= 0 && x < 19 && y >= 0 && y < 19\n\t&& data.board[y][x] === ennemyColor))\n\t\treturn ;\n\tx += xIncrement\n\ty += yIncrement\n\tif (!(x >= 0 && x < 19 && y >= 0 && y < 19\n\t\t&& data.board[y][x] === color))\n\t\treturn ;\n\tcaptured.push({x : pos.x + xIncrement, y : pos.y + yIncrement})\n\tcaptured.push({x : pos.x + 2 * xIncrement, y : pos.y + 2 * yIncrement})\n}\n\nconst getCapturedStones = (data, captured, pos, color, ennemyColor) => {\n\n\tcheck_capture(data, captured, pos, 0, -1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, 1, -1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, 1, 0, color, ennemyColor)\n\tcheck_capture(data, captured, pos, 1, 1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, 0, 1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, -1, 1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, -1, 0, color, ennemyColor)\n\tcheck_capture(data, captured, pos, -1, -1, color, ennemyColor)\n}\n// PENSER A DECREMENTER DATA.PUTSTONES\nconst launch_capture_animation = (data, pos, color) => {\n\t\n\tvar captured = [];\n\tvar ennemyColor;\n\tif (color === data.BLACK)\n\t\tennemyColor = data.WHITE\n\telse\n\t\tennemyColor = data.BLACK\n\tgetCapturedStones(data, captured, pos, color, ennemyColor)\n\tfor (var c = 0; c < captured.length; c++){\n\t\tdata.board[captured[c].y][captured[c].x] = 0;\n\n\t}\n\tprintBoard(data)\n}\n\nconst launch_put_stone_animation = (data, pos, color) => {\n\tvar new_stone = {}\n\tnew_stone.width = data.images.gomokuBoard.width * 10;\n\tnew_stone.height = data.images.gomokuBoard.height * 10;\n\tvar inter = setInterval(() => {\n\t\tprintBoard(data)\n\t\tprint_new_stone(data, new_stone, pos, color);\n\t\tnew_stone.width -= data.images.gomokuBoard.width / 4;\n\t\tnew_stone.height -= data.images.gomokuBoard.height / 4;\n\t\tif (new_stone.width <= data.images.gomokuBoard.width &&\n\t\tnew_stone.height <= data.images.gomokuBoard.height){\n\t\t\tdata.board[pos.y][pos.x] = color\n\t\t\tprintBoard(data);\n\t\t\tclearInterval(inter)\n\t\t\tlaunch_capture_animation(data, pos, color);\n\t\t\tif ((data.endGame = checkEndGame(data))){\n\t\t\t\tsetEndGame(data)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdata.turn = 'human'\n\t\t\tdata.aiLaunched = false\n\t\t}\n\t}, 10);\n}\n\nconst receiveAiMove = (data, pos) => {\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    // data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`\n    document.getElementById('timerAverage').innerHTML = `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`\n\tlaunch_put_stone_animation(data, pos, data.aiColor)\n    // printBoard(data)\n    // if ((data.endGame = checkEndGame(data))){\n    //     setEndGame(data)\n    //     return\n    // }\n    // data.turn = 'human'\n\t// data.aiLaunched = false\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame || data.turn === 'ai')\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = data.playerColor\n        data.piecesOnBoard += 1\n        printBoard(data)\n\t\tlaunch_capture_animation(data, stone, data.playerColor)\n        if ((data.endGame = checkEndGame(data))){\n            setEndGame(data)\n            return\n        }\n        data.turn = 'ai'\n        launchAi(data, data.images, data.playerColor)\n    }\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n    if (data.endGame || data.turn === 'ai')\n            return\n        printBoard(data)\n}\n\nconst initGame = (images, playerColor, firstPlayer) => {\n\t// test()\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs ai'}})\n\tdata.aiLaunched = false\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayer\n    data.aiMoves = 0\n    data.aiTotalTime = 0\n    data.piecesOnBoard = 0\n    data.playerColor = playerColor\n    data.aiColor = playerColor === data.WHITE ? data.BLACK : data.WHITE\n    data.images = images\n    printBoard(data)\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n    if (data.turn === 'ai')\n        launchAi(data)\n    data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n    data.canvas.onclick = e => canvasOnClick(e, data)\n    data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n}\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}