{"ast":null,"code":"import { freeBufferMemory, getBoard } from \"./tools\";\nconst heuristic = ['align5', 'block4', 'block3Free', 'align4', 'block3', 'block2Free', 'align4', 'block3', 'block2Free'];\nconst singleStoneHeuristic = (board, node, data) => {\n  var h = 10;\n  var free = 1;\n  var x = node.x;\n  var y = node.y;\n  if (y - 1 >= 0 && !board[y - 1][x]) free += 1;\n  if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1]) free += 1;\n  if (x + 1 < 19 && !board[y][x + 1]) free += 1;\n  if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1]) free += 1;\n  if (y + 1 < 19 && !board[y + 1][x]) free += 1;\n  if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1]) free += 1;\n  if (x - 1 >= 0 && !board[y][x - 1]) free += 1;\n  if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) free += 1;\n  h *= free;\n  if (node.color === data.aiColor) return h / data.heuristicAiDiviser;\n  return -h;\n};\nconst verticalAlignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.y -= 1;\n  }\n  if (pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.y += 1;\n  while (pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst horizontalAlignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n  }\n  if (pos.x >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  while (pos.x < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst diagonal1Alignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y -= 1;\n  }\n  if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  pos.y += 1;\n  while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst diagonal2Alignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y -= 1;\n  }\n  if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x -= 1;\n  pos.y += 1;\n  while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst alignmentHeuristic = (board, node, data) => {\n  var h = 0;\n  h += verticalAlignment(board, node);\n  h += horizontalAlignment(board, node);\n  h += diagonal1Alignment(board, node);\n  h += diagonal2Alignment(board, node);\n  if (node.color === data.aiColor) return h / data.heuristicAiDiviser;\n  return -h;\n};\nconst copyBufferMemory = bufferMemory => {\n  var ret = [];\n  for (var y = 0; y < 19; y++) {\n    ret[y] = [];\n    for (var x = 0; x < 19; x++) {\n      ret[y][x] = bufferMemory[y][x];\n    }\n  }\n  return ret;\n};\nconst getHeuristic = (node, data) => {\n  var heuristicInfos = {\n    h1: [],\n    h2: [],\n    pos: []\n  };\n  const start = window.performance.now();\n  getBoard(node, data.bufferMemory);\n  var board = copyBufferMemory(data.bufferMemory);\n  var h1 = 0;\n  var h2 = 0;\n  var ret;\n  const saveNode = node;\n  // while (node.parent){\n  //     ret = singleStoneHeuristic(data.bufferMemory, node, data)\n  //     heuristicInfos.h1.push(ret)\n  //     h1 += ret\n  //     ret = alignmentHeuristic(data.bufferMemory, node, data)\n  //     heuristicInfos.h2.push(ret)\n  //     h2 += ret\n  //     data.bufferMemory[node.y][node.x] = 0\n  //     heuristicInfos.pos.push(`${node.x} ${node.y}`)\n  //     node = node.parent\n  // }\n\n  h1 = singleStoneHeuristic(data.bufferMemory, node, data);\n  heuristicInfos.h1.push(h1);\n  h2 = alignmentHeuristic(data.bufferMemory, node, data);\n  heuristicInfos.h2.push(h2);\n  h3 = blockingHeuristic(data.bufferMemory, node, data);\n  freeBufferMemory(node, data.bufferMemory);\n  heuristicInfos.pos.push(`${node.x} ${node.y}`);\n  const end = window.performance.now();\n  data.heuristicTime += end - start;\n  saveNode.heuristicInfos = heuristicInfos;\n  data.saveMinMax.push({\n    board,\n    heuristic: h1 + h2\n  });\n  return h1 + h2;\n};\nexport default getHeuristic;","map":{"version":3,"names":["freeBufferMemory","getBoard","heuristic","singleStoneHeuristic","board","node","data","h","free","x","y","color","aiColor","heuristicAiDiviser","verticalAlignment","pos","neighbour1","neighbour2","sizeAlignment","Math","pow","horizontalAlignment","diagonal1Alignment","diagonal2Alignment","alignmentHeuristic","copyBufferMemory","bufferMemory","ret","getHeuristic","heuristicInfos","h1","h2","start","window","performance","now","saveNode","push","h3","blockingHeuristic","end","heuristicTime","saveMinMax"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/heuristic2.js"],"sourcesContent":["import { freeBufferMemory, getBoard } from \"./tools\"\n\nconst heuristic = [\n    'align5',\n    'block4',\n    'block3Free',\n    \n    'align4',\n    'block3',\n    'block2Free',\n    \n    'align4',\n    'block3',\n    'block2Free',\n]\n\nconst singleStoneHeuristic = (board, node, data) => {\n    var h = 10\n    var free = 1\n    var x = node.x\n    var y = node.y\n    if (y - 1 >= 0 && !board[y - 1][x])\n        free += 1\n    if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1])\n        free += 1\n    if (x + 1 < 19 && !board[y][x + 1])\n        free += 1\n    if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1])\n        free += 1\n    if (y + 1 < 19 && !board[y + 1][x])\n        free += 1\n    if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1])\n        free += 1\n    if (x - 1 >= 0 && !board[y][x - 1])\n        free += 1\n    if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n        free += 1\n    h *= free\n    if (node.color === data.aiColor)\n        return h / data.heuristicAiDiviser\n    return -h\n}\n\nconst verticalAlignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.y -= 1\n    }\n    if (pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.y += 1\n    while (pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst horizontalAlignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n    }\n    if (pos.x >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    while (pos.x < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst diagonal1Alignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y -= 1\n    }\n    if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    pos.y += 1\n    while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst diagonal2Alignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y -= 1\n    }\n    if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x -= 1\n    pos.y += 1\n    while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst alignmentHeuristic = (board, node, data) => {\n    var h = 0\n    h += verticalAlignment(board, node)\n    h += horizontalAlignment(board, node)\n    h += diagonal1Alignment(board, node)\n    h += diagonal2Alignment(board, node)\n    if (node.color === data.aiColor)\n        return h / data.heuristicAiDiviser\n    return -h\n}\n\nconst copyBufferMemory = (bufferMemory) => {\n    var ret = []\n    for (var y = 0; y < 19; y++){\n        ret[y] = []\n        for (var x = 0; x < 19; x++){\n            ret[y][x] = bufferMemory[y][x]\n        }\n    }\n    return ret\n}\n\n\nconst getHeuristic = (node, data) => {\n    var heuristicInfos = {h1 : [], h2 : [], pos : []}\n    const start = window.performance.now()\n    getBoard(node, data.bufferMemory)\n    var board = copyBufferMemory(data.bufferMemory)\n    var h1 = 0\n    var h2 = 0\n    var ret\n    const saveNode = node\n    // while (node.parent){\n    //     ret = singleStoneHeuristic(data.bufferMemory, node, data)\n    //     heuristicInfos.h1.push(ret)\n    //     h1 += ret\n    //     ret = alignmentHeuristic(data.bufferMemory, node, data)\n    //     heuristicInfos.h2.push(ret)\n    //     h2 += ret\n    //     data.bufferMemory[node.y][node.x] = 0\n    //     heuristicInfos.pos.push(`${node.x} ${node.y}`)\n    //     node = node.parent\n    // }\n\n\n    h1 = singleStoneHeuristic(data.bufferMemory, node, data)\n    heuristicInfos.h1.push(h1)\n    h2 = alignmentHeuristic(data.bufferMemory, node, data)\n    heuristicInfos.h2.push(h2)\n    h3 = blockingHeuristic(data.bufferMemory, node, data)\n    freeBufferMemory(node, data.bufferMemory)\n    heuristicInfos.pos.push(`${node.x} ${node.y}`)\n\n\n\n    const end = window.performance.now()\n    data.heuristicTime += end - start\n    saveNode.heuristicInfos = heuristicInfos\n    data.saveMinMax.push({board, heuristic : h1 + h2})\n    return h1 + h2\n}\n\nexport default getHeuristic"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}