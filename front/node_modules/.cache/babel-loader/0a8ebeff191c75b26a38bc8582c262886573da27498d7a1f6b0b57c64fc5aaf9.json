{"ast":null,"code":"import { initBoard, serverIp } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\n\n// AUTO PLAY\n\nconst setEndGame = data => {};\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst receiveAiMove = (data, pos) => {\n  data.aiLaunched = false;\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.piecesOnBoard += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  console.log('timer : ' + `${nbSeconds},${nbMilliSeconds}s`);\n  console.log('average : ' + `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`);\n  printBoard(data);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n  data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  launchAi(data);\n};\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs human'\n    }\n  });\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  printBoard(data);\n  data.aiMoves = 0;\n  data.aiTimePlay = 0;\n  data.aiTotalTime = 0;\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  data.aiColor = data.firstPlayerColor;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  launchAi(data);\n};\n\n// CLICK\n\n// const printSuggestion = data => {\n//     data.ctx.drawImage(\n//         data.images.suggestion,\n//         data.images.gomokuBoard.width * data.suggestion.x - 75,\n//         data.images.gomokuBoard.height * data.suggestion.y - 75\n//     )\n// }\n\n// const getSuggestion = data => {\n// \tdata.aiLaunched = true\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n// \tif (data.endGame)\n// \t\t\treturn\n// \t\tprintBoard(data)\n// \tif (!data.aiLaunched)\n// \t\tprintSuggestion(data)\n// }\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame || data.aiLaunched)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.aiColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame || data.aiLaunched)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.aiColor\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n//         getSuggestion(data)\n//     }\n// }\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     // data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.suggestion = {x : pos.x, y : pos.y}\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n// \tprintSuggestion(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \t// data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// launchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     // printBoard(data)\n//     // printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.canvas.onclick = e => canvasOnClick(e, data)\n// \tdata.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// \tdata.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tgetSuggestion(data)\n// \tlaunchAi(data)\n// }\n\nexport default initGame;","map":{"version":3,"names":["initBoard","serverIp","printBoard","checkEndGame","io","setEndGame","data","launchAi","startAi","window","performance","now","aiLaunched","socket","emit","aiColor","board","receiveAiMove","pos","timeAi","Math","floor","y","x","playerColor","BLACK","WHITE","piecesOnBoard","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","console","log","toFixed","endGame","initGame","images","firstPlayerColor","query","page","DRAW","canvas","document","getElementById","ctx","getContext","turn","aiTimePlay","on"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { initBoard, serverIp } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\n\n\n\n\n// AUTO PLAY\n\nconst setEndGame = (data) => {\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLaunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n\tconsole.log('timer : ' + `${nbSeconds},${nbMilliSeconds}s`)\n\tconsole.log('average : ' + `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`)\n    printBoard(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    printBoard(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiTotalTime = 0\n\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n\n\n\n\n\n// CLICK\n\n// const printSuggestion = data => {\n//     data.ctx.drawImage(\n//         data.images.suggestion,\n//         data.images.gomokuBoard.width * data.suggestion.x - 75,\n//         data.images.gomokuBoard.height * data.suggestion.y - 75\n//     )\n// }\n\n// const getSuggestion = data => {\n// \tdata.aiLaunched = true\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n// \tif (data.endGame)\n// \t\t\treturn\n// \t\tprintBoard(data)\n// \tif (!data.aiLaunched)\n// \t\tprintSuggestion(data)\n// }\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame || data.aiLaunched)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.aiColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame || data.aiLaunched)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.aiColor\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n//         getSuggestion(data)\n//     }\n// }\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     // data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.suggestion = {x : pos.x, y : pos.y}\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n// \tprintSuggestion(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \t// data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// launchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     // printBoard(data)\n//     // printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.canvas.onclick = e => canvasOnClick(e, data)\n// \tdata.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// \tdata.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tgetSuggestion(data)\n// \tlaunchAi(data)\n// }\n\n\nexport default initGame"],"mappings":"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AO,GAAG,CAAC;EAChBzB,IAAI,CAAC4C,UAAU,GAAG,CAAC;EACtB5C,IAAI,CAAC0B,WAAW,GAAG,CAAC;EAEpB1B,IAAI,CAACO,MAAM,CAACsC,EAAE,CAAC,IAAI,EAAEjC,GAAG,IAAI;IAACD,aAAa,CAACX,IAAI,EAAEY,GAAG,CAAC;EAAA,CAAC,CAAC;EACvDZ,IAAI,CAACS,OAAO,GAAGT,IAAI,CAACkC,gBAAgB;EACpClC,IAAI,CAACkB,WAAW,GAAGlB,IAAI,CAACS,OAAO,KAAKT,IAAI,CAACmB,KAAK,GAAGnB,IAAI,CAACoB,KAAK,GAAGpB,IAAI,CAACmB,KAAK;EACxElB,QAAQ,CAACD,IAAI,CAAC;AACf,CAAC;;AAMD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA,eAAegC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}