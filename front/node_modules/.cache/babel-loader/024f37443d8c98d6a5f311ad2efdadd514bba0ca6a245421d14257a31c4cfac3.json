{"ast":null,"code":"import ia from '../../tools/ia/ia';\nimport { checkEndGame } from './checkEndGame';\nconst printBackground = data => {\n  data.ctx.fillStyle = '#a6683e';\n  data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height);\n  for (var y = 0; y < 18; y++) {\n    for (var x = 0; x < 18; x++) data.ctx.drawImage(data.images.gomokuBoard, x * data.images.gomokuBoard.width + data.images.blackPiece.width / 2, y * data.images.gomokuBoard.height + data.images.blackPiece.width / 2);\n  }\n};\nconst initBoard = () => {\n  var board = [];\n  for (var y = 0; y < 19; y++) {\n    board[y] = [];\n    for (var x = 0; x < 19; x++) {\n      board[y][x] = 0;\n    }\n  }\n  return board;\n};\nconst printStones = data => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (data.board[y][x]) {\n        var stone = data.board[y][x] === data.BLACK ? data.images.blackPiece : data.images.whitePiece;\n        data.ctx.drawImage(stone, data.images.gomokuBoard.width * x, data.images.gomokuBoard.height * y);\n      }\n    }\n  }\n};\nconst printBoard = data => {\n  printBackground(data);\n  printStones(data);\n  printBlockedBoard();\n};\nconst getStonePosition = (data, e, canvasOffsetWidth, canvasOffsetHeight) => {\n  return {\n    x: Math.floor(e.offsetX * data.canvas.width / canvasOffsetWidth / (data.canvas.width / 19)),\n    y: Math.floor(e.offsetY * data.canvas.height / canvasOffsetHeight / (data.canvas.height / 19))\n  };\n};\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame || data.turn === 'ia') return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.playerColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else printBoard(data);\n};\nconst setEndGame = data => {\n  var params = {};\n  params[data.DRAW] = {\n    text: 'END OF GAME, NO WINNER',\n    color: 'orange'\n  };\n  params[data.playerColor] = {\n    text: 'YOU WON THE GAME !',\n    color: 'green'\n  };\n  params[data.iaColor] = {\n    text: 'YOU LOST THE GAME',\n    color: 'red'\n  };\n  document.getElementById('endGame').style.color = params[data.endGame].color;\n  document.getElementById('endGame').innerHTML = params[data.endGame].text;\n  document.getElementById('newGame').style.display = 'block';\n};\nconst launchIa = data => {\n  const startIa = window.performance.now();\n  var pos = ia(data);\n  const timeIa = Math.floor(window.performance.now() - startIa);\n  data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeIa / 1000) % 1000;\n  var nbMilliSeconds = `${timeIa % 1000}`.padStart(3, '0');\n  data.iaMoves += 1;\n  data.iaTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`;\n  document.getElementById('timerAverage').innerHTML = `${(data.iaTotalTime / data.iaMoves).toFixed(3)}s`;\n  printBoard(data);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n  data.turn = 'human';\n};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame || data.turn === 'ia') return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = data.playerColor;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    if (data.endGame = checkEndGame(data, data.playerColor)) {\n      setEndGame(data);\n      return;\n    }\n    data.turn = 'ia';\n    launchIa(data, data.images, data.playerColor);\n  }\n};\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame || data.turn === 'ia') return;\n  printBoard(data);\n};\nconst initGame = (images, playerColor, firstPlayer) => {\n  var data = {};\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayer;\n  data.iaMoves = 0;\n  data.iaTotalTime = 0;\n  data.piecesOnBoard = 0;\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.images = images;\n  printBoard(data);\n  if (data.turn === 'ia') launchIa(data);\n  data.canvas.onmousemove = e => canvasOnMouseMove(e, data);\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data);\n};\nexport default initGame;","map":{"version":3,"names":["ia","checkEndGame","printBackground","data","ctx","fillStyle","fillRect","canvas","width","height","y","x","drawImage","images","gomokuBoard","blackPiece","initBoard","board","printStones","stone","BLACK","whitePiece","printBoard","printBlockedBoard","getStonePosition","e","canvasOffsetWidth","canvasOffsetHeight","Math","floor","offsetX","offsetY","canvasOnMouseMove","endGame","turn","offsetWidth","offsetHeight","globalAlpha","playerColor","WHITE","setEndGame","params","DRAW","text","color","iaColor","document","getElementById","style","innerHTML","display","launchIa","startIa","window","performance","now","pos","timeIa","piecesOnBoard","nbSeconds","nbMilliSeconds","padStart","iaMoves","iaTotalTime","parseFloat","toFixed","canvasOnClick","canvasOnMouseLeave","initGame","firstPlayer","getContext","onmousemove","onclick","onmouseleave"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/pages/humanvsia/initGame.js"],"sourcesContent":["import ia from '../../tools/ia/ia'\nimport { checkEndGame } from './checkEndGame'\n\nconst printBackground = (data) => {\n    data.ctx.fillStyle = '#a6683e'\n    data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height)\n    for (var y = 0; y < 18; y++){\n        for (var x = 0; x < 18; x++)\n            data.ctx.drawImage(\n                data.images.gomokuBoard,\n                x * data.images.gomokuBoard.width + data.images.blackPiece.width / 2,\n                y * data.images.gomokuBoard.height + data.images.blackPiece.width / 2\n            )\n    }\n}\n\nconst initBoard = () => {\n    var board = []\n    for (var y = 0; y < 19; y++){\n        board[y] = []\n        for (var x = 0; x < 19; x++){\n            board[y][x] = 0\n        }\n    }\n    return board\n}\n\nconst printStones = (data) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (data.board[y][x]){\n                var stone = data.board[y][x] === data.BLACK ? data.images.blackPiece : data.images.whitePiece\n                data.ctx.drawImage(\n                    stone,\n                    data.images.gomokuBoard.width * x,\n                    data.images.gomokuBoard.height * y\n                )\n            }\n        }\n    }\n}\n\nconst printBoard = (data) => {\n    printBackground(data)\n    printStones(data)\n    printBlockedBoard()\n}\n\nconst getStonePosition = (data, e, canvasOffsetWidth, canvasOffsetHeight) => {\n    return {\n        x : Math.floor(((e.offsetX * data.canvas.width) / canvasOffsetWidth) / (data.canvas.width / 19)),\n        y : Math.floor(((e.offsetY * data.canvas.height) / canvasOffsetHeight) / (data.canvas.height / 19))\n    }\n}\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame || data.turn === 'ia')\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.playerColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else\n        printBoard(data)\n}\n\nconst setEndGame = (data) => {\n    var params = {}\n    params[data.DRAW] = {\n        text : 'END OF GAME, NO WINNER',\n        color : 'orange'\n    }\n    params[data.playerColor] = {\n        text : 'YOU WON THE GAME !',\n        color : 'green'\n    }\n    params[data.iaColor] = {\n        text : 'YOU LOST THE GAME',\n        color : 'red'\n    }\n    document.getElementById('endGame').style.color = params[data.endGame].color\n    document.getElementById('endGame').innerHTML = params[data.endGame].text\n    document.getElementById('newGame').style.display = 'block'\n}\n\nconst launchIa = (data) => {\n    const startIa = window.performance.now()\n    var pos = ia(data)\n    const timeIa = Math.floor(window.performance.now() - startIa)\n    data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeIa / 1000) % 1000\n    var nbMilliSeconds = `${timeIa % 1000}`.padStart(3, '0')\n    data.iaMoves += 1\n    data.iaTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`\n    document.getElementById('timerAverage').innerHTML = `${(data.iaTotalTime / data.iaMoves).toFixed(3)}s`\n    printBoard(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n    data.turn = 'human'\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame || data.turn === 'ia')\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = data.playerColor\n        data.piecesOnBoard += 1\n        printBoard(data)\n        if ((data.endGame = checkEndGame(data, data.playerColor))){\n            setEndGame(data)\n            return\n        }\n        data.turn = 'ia'\n        launchIa(data, data.images, data.playerColor)\n    }\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n    if (data.endGame || data.turn === 'ia')\n            return\n        printBoard(data)\n}\n\nconst initGame = (images, playerColor, firstPlayer) => {\n    var data = {}\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayer\n    data.iaMoves = 0\n    data.iaTotalTime = 0\n    data.piecesOnBoard = 0\n    data.playerColor = playerColor\n    data.iaColor = playerColor === data.WHITE ? data.BLACK : data.WHITE\n    data.images = images\n    printBoard(data)\n    if (data.turn === 'ia')\n        launchIa(data)\n    data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n    data.canvas.onclick = e => canvasOnClick(e, data)\n    data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n}\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}