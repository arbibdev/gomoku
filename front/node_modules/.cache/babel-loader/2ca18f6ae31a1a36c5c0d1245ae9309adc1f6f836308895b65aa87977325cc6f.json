{"ast":null,"code":"var nbConbinations = 0;\nvar nbWins = 0;\nconst checkStones = (x, y, board, orientation, sizeBoard, stones) => {\n  var nb = 0;\n  var color = board[y][x];\n  while (orientation === 'vertical' && y++ < sizeBoard && board[y - 1][x] === color) nb++;\n  while (orientation === 'horizontal' && x++ < sizeBoard && board[y][x - 1] === color) nb++;\n  while (orientation === 'diagonal1' && x++ < sizeBoard && y++ < sizeBoard && board[y - 1][x - 1] === color) nb++;\n  while (orientation === 'diagonal2' && x-- >= 0 && y++ < sizeBoard && board[y - 1][x + 1] === color) nb++;\n  if (nb >= stones) return color;\n  return false;\n};\nconst checkAlignment = (x, y, board, sizeBoard, stones) => {\n  var winner;\n  if ((winner = checkStones(x, y, board, 'vertical', sizeBoard, stones)) || (winner = checkStones(x, y, board, 'horizontal', sizeBoard, stones)) || (winner = checkStones(x, y, board, 'diagonal1', sizeBoard, stones)) || (winner = checkStones(x, y, board, 'diagonal2', sizeBoard, stones))) return winner;\n  return false;\n};\nconst checkWinner = (board, sizeBoard, stones) => {\n  var winner;\n  for (var y = 0; y < sizeBoard; y++) {\n    for (var x = 0; x < sizeBoard; x++) {\n      if (board[y][x] && (winner = checkAlignment(x, y, board, sizeBoard, stones))) return winner;\n    }\n  }\n  return false;\n};\nconst initArray = sizeArray => {\n  var array = [];\n  for (var y = 0; y < sizeArray; y++) {\n    array[y] = [];\n    for (var x = 0; x < sizeArray; x++) {\n      array[y][x] = 0;\n    }\n  }\n  return array;\n};\nconst testAllConbinations = (array, sizeArray, stonesToPlace, stones) => {\n  if (!stones) {\n    nbConbinations += 1;\n    if (checkWinner(array, sizeArray, stones)) {\n      nbWins += 1;\n    }\n  }\n  for (var y = 0; y < sizeArray; y++) {\n    for (var x = 0; x < sizeArray; x++) {\n      if (!array[y][x]) {\n        array[y][x] = 1;\n        testAllConbinations(array, sizeArray, stonesToPlace - 1, stones);\n        array[y][x] = 0;\n      }\n    }\n  }\n};\nconst test = () => {\n  var sizeArray = 2;\n  var stones = 2;\n  var array = initArray(sizeArray);\n  testAllConbinations(array, sizeArray, stones, stones);\n  console.log(nbConbinations);\n  console.log(nbWins);\n};\nexport default test;","map":{"version":3,"names":["nbConbinations","nbWins","checkStones","x","y","board","orientation","sizeBoard","stones","nb","color","checkAlignment","winner","checkWinner","initArray","sizeArray","array","testAllConbinations","stonesToPlace","test","console","log"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsAi/test.js"],"sourcesContent":["var nbConbinations = 0\nvar nbWins = 0\n\nconst checkStones = (x, y, board, orientation, sizeBoard, stones) => {\n    var nb = 0\n    var color = board[y][x]\n    while (orientation === 'vertical' && y++ < sizeBoard && board[y - 1][x] === color)nb++\n    while (orientation === 'horizontal' && x++ < sizeBoard && board[y][x - 1] === color)nb++\n    while (orientation === 'diagonal1' && x++ < sizeBoard && y++ < sizeBoard && board[y - 1][x - 1] === color)nb++\n    while (orientation === 'diagonal2' && x-- >= 0 && y++ < sizeBoard && board[y - 1][x + 1] === color)nb++\n    if (nb >= stones)\n        return color\n    return false\n}\n\nconst checkAlignment = (x, y, board, sizeBoard, stones) => {\n    var winner\n    if (\n        (winner = checkStones(x, y, board, 'vertical', sizeBoard, stones)) ||\n        (winner = checkStones(x, y, board, 'horizontal', sizeBoard, stones)) ||\n        (winner = checkStones(x, y, board, 'diagonal1', sizeBoard, stones)) ||\n        (winner = checkStones(x, y, board, 'diagonal2', sizeBoard, stones))\n    )\n        return winner\n    return false\n}\n\nconst checkWinner = (board, sizeBoard, stones) => {\n    var winner\n    for (var y = 0; y < sizeBoard; y++){\n        for (var x = 0; x < sizeBoard; x++){\n            if (board[y][x] && (winner = checkAlignment(x, y, board, sizeBoard, stones)))\n                return winner\n        }\n    }\n    return false\n}\n\n\n\nconst initArray = (sizeArray) => {\n\tvar array = []\n\tfor (var y = 0; y < sizeArray; y++){\n\t\tarray[y] = []\n\t\tfor (var x = 0; x < sizeArray; x++){\n\t\t\tarray[y][x] = 0\n\t\t}\n\t}\n\treturn array\n}\n\nconst testAllConbinations = (array, sizeArray, stonesToPlace, stones) => {\n\tif (!stones){\n\t\tnbConbinations += 1\n\t\tif (checkWinner(array, sizeArray, stones)){\n\t\t\tnbWins += 1\n\t\t}\n\t}\n\tfor (var y = 0; y < sizeArray; y++){\n\t\tfor (var x = 0; x < sizeArray; x++){\n\t\t\tif (!array[y][x]){\n\t\t\t\tarray[y][x] = 1\n\t\t\t\ttestAllConbinations(array, sizeArray, stonesToPlace - 1, stones)\n\t\t\t\tarray[y][x] = 0\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst test = () => {\n\tvar sizeArray = 2\n\tvar stones = 2\n\tvar array = initArray(sizeArray)\n\ttestAllConbinations(array, sizeArray, stones, stones)\n\tconsole.log(nbConbinations)\n\tconsole.log(nbWins)\n}\n\nexport default test"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}