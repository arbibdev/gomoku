{"ast":null,"code":"import updateCapturedStones from '../../tools/updateCapturedStones';\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport launchPutStoneAnimation from '../../tools/launchPutStoneAnimation';\nimport launchCaptureAnimation from '../../tools/launchCaptureAnimation';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\nimport styles from './humanVsHuman.module.css';\n\n/*\n//AUTO PLAY\n\nconst setEndGame = (data) => {\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLaunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n\tconsole.log(`timer : ${nbSeconds},${nbMilliSeconds}s`)\n\tconsole.log(`average : ${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`)\n    printBoard(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    printBoard(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiTotalTime = 0\n\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n*/\n\n// CLICK\n\nconst setEndGame = data => {};\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst getSuggestion = data => {\n  data.aiLaunched = true;\n  data.startAi = window.performance.now();\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame || data.ongoingAnimation) return;\n  printBoard(data);\n  if (!data.aiLaunched) printSuggestion(data);\n};\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame || data.aiLaunched || data.ongoingAnimation) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    printSuggestion(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.aiColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else {\n    printBoard(data);\n    printSuggestion(data);\n  }\n};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame || data.aiLaunched || data.ongoingAnimation) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    // data.board[stone.y][stone.x] = data.aiColor\n    // data.piecesOnBoard += 1\n    // printBoard(data)\n\n    if (!data.board[stone.y][stone.x]) {\n      data.ongoingAnimation = 1;\n      launchPutStoneAnimation(data, stone, data.aiColor, 'ai').then(() => {\n        launchCaptureAnimation(data, stone, data.aiColor, 'ai').then(captures => {\n          if (captures) updateCapturedStones(data, data.aiColor, captures, styles);\n          if (data.endGame = checkEndGame(data)) {\n            setEndGame(data);\n            return;\n          }\n          data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n          data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n          getSuggestion(data);\n          data.ongoingAnimation = 0;\n        });\n      });\n    }\n\n    // if ((data.endGame = checkEndGame(data))){\n    //     setEndGame(data)\n    //     return\n    // }\n    // data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n    // data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n    // getSuggestion(data)\n  }\n};\n\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst receiveAiMove = (data, pos) => {\n  data.aiLaunched = false;\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  console.log(timeAi);\n  data.suggestion = {\n    x: pos.x,\n    y: pos.y\n  };\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.piecesOnBoard += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`;\n  document.getElementById('timerAverage').innerHTML = `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`;\n  printBoard(data);\n  printSuggestion(data);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n};\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs human'\n    }\n  });\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  data.ongoingAnimation = 0;\n  data.captures = {\n    ai: 0,\n    player: 0\n  };\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  data.aiMoves = 0;\n  data.aiTimePlay = 0;\n  data.aiColor = data.firstPlayerColor;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data);\n  data.canvas.onmousemove = e => canvasOnMouseMove(e, data);\n  getSuggestion(data);\n  console.log('launchAi');\n  launchAi(data);\n};\nexport default initGame;","map":{"version":3,"names":["updateCapturedStones","getStonePosition","initBoard","serverIp","launchPutStoneAnimation","launchCaptureAnimation","printBoard","checkEndGame","io","styles","setEndGame","data","printSuggestion","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","getSuggestion","aiLaunched","startAi","window","performance","now","socket","emit","aiColor","board","canvasOnMouseLeave","e","endGame","ongoingAnimation","canvasOnMouseMove","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","globalAlpha","WHITE","whitePiece","blackPiece","canvasOnClick","then","captures","BLACK","playerColor","launchAi","receiveAiMove","pos","timeAi","Math","floor","console","log","piecesOnBoard","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","document","getElementById","innerHTML","toFixed","initGame","firstPlayerColor","query","page","on","ai","player","DRAW","getContext","turn","aiTimePlay","onclick","onmouseleave","onmousemove"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport updateCapturedStones from '../../tools/updateCapturedStones'\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport launchPutStoneAnimation from '../../tools/launchPutStoneAnimation'\nimport launchCaptureAnimation from '../../tools/launchCaptureAnimation'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\nimport styles from './humanVsHuman.module.css'\n\n/*\n//AUTO PLAY\n\nconst setEndGame = (data) => {\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLaunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n\tconsole.log(`timer : ${nbSeconds},${nbMilliSeconds}s`)\n\tconsole.log(`average : ${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`)\n    printBoard(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    printBoard(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiTotalTime = 0\n\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n*/\n\n\n\n// CLICK\n\nconst setEndGame = (data) => {\n}\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst getSuggestion = data => {\n\tdata.aiLaunched = true\n\tdata.startAi = window.performance.now()\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n\tif (data.endGame || data.ongoingAnimation)\n\t\t\treturn\n\t\tprintBoard(data)\n\tif (!data.aiLaunched)\n\t\tprintSuggestion(data)\n}\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame || data.aiLaunched || data.ongoingAnimation)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        printSuggestion(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.aiColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else{\n        printBoard(data)\n        printSuggestion(data)\n    }\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame || data.aiLaunched || data.ongoingAnimation)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        // data.board[stone.y][stone.x] = data.aiColor\n        // data.piecesOnBoard += 1\n        // printBoard(data)\n\n\t\tif (!data.board[stone.y][stone.x]){\n\t\t\tdata.ongoingAnimation = 1\n\t\t\tlaunchPutStoneAnimation(data, stone, data.aiColor, 'ai').then(() => {\n\t\t\t\tlaunchCaptureAnimation(data, stone, data.aiColor, 'ai').then((captures) => {\n\t\t\t\t\tif (captures)\n\t\t\t\t\t\tupdateCapturedStones(data, data.aiColor, captures, styles)\n\t\t\t\t\tif ((data.endGame = checkEndGame(data))){\n\t\t\t\t\t    setEndGame(data)\n\t\t\t\t\t    return\n\t\t\t\t\t}\n\t\t\t\t\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t\t\t\t\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t\t\t\t\tgetSuggestion(data)\n\t\t\t\t\tdata.ongoingAnimation = 0\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\n        // if ((data.endGame = checkEndGame(data))){\n        //     setEndGame(data)\n        //     return\n        // }\n        // data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t\t// data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n        // getSuggestion(data)\n    }\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLaunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n\tconsole.log(timeAi)\n\tdata.suggestion = {x : pos.x, y : pos.y}\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n\tdocument.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`\n    document.getElementById('timerAverage').innerHTML = `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`\n    printBoard(data)\n\tprintSuggestion(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.ongoingAnimation = 0\n\tdata.captures = {ai : 0, player : 0}\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.canvas.onclick = e => canvasOnClick(e, data)\n\tdata.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n\tdata.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n\tgetSuggestion(data)\n\tconsole.log('launchAi')\n\tlaunchAi(data)\n}\n\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}