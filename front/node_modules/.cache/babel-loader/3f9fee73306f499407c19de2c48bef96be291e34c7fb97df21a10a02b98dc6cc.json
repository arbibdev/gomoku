{"ast":null,"code":"import { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\nimport ai from '../../tools/ai/ai';\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\n// const printSuggestion = data => {\n//     data.ctx.drawImage(\n//         data.images.suggestion,\n//         data.images.gomokuBoard.width * data.suggestion.x - 75,\n//         data.images.gomokuBoard.height * data.suggestion.y - 75\n//     )\n// }\n\nconst setEndGame = data => {};\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tlaunchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     printBoard(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n// CLICK WITH C ALGO\n\nconst getSuggestion = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame || data.aiLaunched) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = data.turn;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    if (data.endGame = checkEndGame(data)) {\n      setEndGame(data);\n      return;\n    }\n    data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n    data.suggestion = getSuggestion(data);\n    printSuggestion(data);\n  }\n};\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst receiveAiMove = (data, pos) => {\n  data.aiLunched = false;\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  // data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n  data.suggestion;\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.piecesOnBoard += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  printBoard(data);\n  printSuggestion(data);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n  data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  // launchAi(data)\n};\n\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs human'\n    }\n  });\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  // printBoard(data)\n  // printSuggestion(data)\n  data.aiMoves = 0;\n  data.aiTimePlay = 0;\n  data.aiColor = data.firstPlayerColor;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  // data.canvas.onclick = e => launchAi(data)\n  data.suggestion = getSuggestion(data);\n  launchAi(data);\n};\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","serverIp","printBoard","checkEndGame","io","ai","setEndGame","data","getSuggestion","startAi","window","performance","now","aiLaunched","socket","emit","aiColor","board","canvasOnClick","e","endGame","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","y","x","turn","piecesOnBoard","WHITE","BLACK","suggestion","printSuggestion","launchAi","receiveAiMove","pos","aiLunched","timeAi","Math","floor","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","playerColor","initGame","images","firstPlayerColor","on","query","page","DRAW","document","getElementById","ctx","getContext","aiTimePlay","onclick"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\nimport ai from '../../tools/ai/ai'\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\n// const printSuggestion = data => {\n//     data.ctx.drawImage(\n//         data.images.suggestion,\n//         data.images.gomokuBoard.width * data.suggestion.x - 75,\n//         data.images.gomokuBoard.height * data.suggestion.y - 75\n//     )\n// }\n\nconst setEndGame = (data) => {\n}\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tlaunchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     printBoard(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n\n\n\n\n// CLICK WITH C ALGO\n\nconst getSuggestion = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame || data.aiLaunched)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = data.turn\n        data.piecesOnBoard += 1\n        printBoard(data)\n        if ((data.endGame = checkEndGame(data))){\n            setEndGame(data)\n            return\n        }\n        data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n        data.suggestion = getSuggestion(data)\n        printSuggestion(data)\n    }\n}\n\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    // data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.suggestion\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    printBoard(data)\n\tprintSuggestion(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t// launchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    // printBoard(data)\n    // printSuggestion(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.canvas.onclick = e => canvasOnClick(e, data)\n\t// data.canvas.onclick = e => launchAi(data)\n\tdata.suggestion = getSuggestion(data)\n\tlaunchAi(data)\n}\n\n\nexport default initGame"],"mappings":"AACA,SAASA,gBAAgB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,mBAAmB;AACzE,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,EAAE,MAAM,mBAAmB;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAIC,IAAI,IAAK,CAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAEA,MAAMC,aAAa,GAAGD,IAAI,IAAI;EAC7BA,IAAI,CAACE,OAAO,GAAGC,MAAM,CAACC,WAAW,CAACC,GAAG,EAAE;EACvCL,IAAI,CAACM,UAAU,GAAG,IAAI;EACtBN,IAAI,CAACO,MAAM,CAACC,IAAI,C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"},"metadata":{},"sourceType":"module","externalDependencies":[]}