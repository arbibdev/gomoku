{"ast":null,"code":"import getAiPath from \"./getAiPath\";\nimport { checkWinner } from \"../../tools/checkEndGame\";\nimport getHeuristic from \"./heuristic1\";\nimport { fillBufferMemory, freeBufferMemory } from \"./tools\";\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\n\nconst heuristic = ['align5', 'block4', 'align4Free', 'block3Free', 'align4', 'block3', 'align3Free', 'block2Free', 'align3', 'block2', 'align2Free', 'block1Free', 'align2', 'block1'];\n\n// const noStones = (node, x, y) => {\n//     var start = window.performance.now()\n//     var end\n//     while (node.parent){\n//         if (node.x === x && node.y === y){\n//             end = window.performance.now()\n//             data.noStonesTime += end - start\n//             return false\n//         }\n//         node = node.parent\n//     }\n//     end = window.performance.now()\n//     data.noStonesTime += end - start\n//     return true\n// }\n\nconst noStones = (putStones, x, y) => {\n  for (var c = 0; c < putStones.length; c++) {\n    if (putStones[c][0] === x && putStones[c][1] === y) {\n      return false;\n    }\n  }\n  return true;\n};\nconst getWinnerHeuristic = (putStones, data) => {\n  fillBufferMemory(putStones, data);\n  var endGame = checkWinner(data.bufferMemory);\n  freeBufferMemory(putStones, data);\n  if (endGame === data.aiColor) return Infinity;\n  if (endGame === data.playerColor) return -Infinity;\n  return false;\n};\nconst min = (bestHeuristic, heuristic) => {\n  if (bestHeuristic === false || heuristic < bestHeuristic) return heuristic;\n  return bestHeuristic;\n};\nconst max = (bestHeuristic, heuristic, pos, data) => {\n  if (bestHeuristic === false || heuristic > bestHeuristic) {\n    if (pos) data.pos = pos;\n    return heuristic;\n  }\n  return bestHeuristic;\n};\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     var winnerHeuristic\n//     if (depth === 0)\n//         return data.heuristics[data.heuristicsCounter++]\n//     if ((winnerHeuristic = getWinnerHeuristic(putStones)))\n//         return winnerHeuristic\n//     if (depth % 2 === data.depth % 2){\n//         for (var c = 0; c < 2; c++){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//             if (heuristic > alpha){\n//                 alpha = heuristic\n//                 if (beta <= alpha)\n//                     break\n//             }\n//         }\n//     }\n//     else{\n//         for (var c = 0; c < 2; c++){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             bestHeuristic = min(bestHeuristic, heuristic)\n//             if (heuristic < beta){\n//                 beta = heuristic\n//                 if (beta <= alpha)\n//                     break\n//             }   \n//         }\n//     }\n//     console.log(bestHeuristic)\n//     return bestHeuristic\n// }\n\nconst minmax = (putStones, depth, alpha, beta, data) => {\n  var bestHeuristic = false;\n  var heuristic;\n  var winnerHeuristic;\n  var c;\n  if (depth === 0) return getHeuristic(putStones, data);\n  if (winnerHeuristic = getWinnerHeuristic(putStones, data)) return winnerHeuristic;\n  if (depth % 2 === data.depth % 2) {\n    for (var c = 0; c < data.aiPath.length; c++) {\n      if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)) {\n        heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta, data);\n        bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false, data);\n        if (heuristic > alpha) {\n          alpha = heuristic;\n          if (beta <= alpha) break;\n        }\n      }\n    }\n  } else {\n    for (var c = 0; c < data.aiPath.length; c++) {\n      if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)) {\n        heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta);\n        bestHeuristic = min(bestHeuristic, heuristic);\n        if (heuristic < beta) {\n          beta = heuristic;\n          if (beta <= alpha) break;\n        }\n      }\n    }\n  }\n  return bestHeuristic;\n};\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     if (depth === 0)\n//         return getHeuristic(putStones, data)\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             if (depth % 2 === data.depth % 2){\n//                 bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//                 if (heuristic > alpha){\n//                     alpha = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n//             }\n//             else{\n//                 bestHeuristic = min(bestHeuristic, heuristic)\n//                 if (heuristic < beta){\n//                     beta = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n\n//             }\n//         }\n//     }\n//     return bestHeuristic\n// }\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var aiTurn = data.depth % 2 === depth % 2 ? true : false\n//     var color = aiTurn ? data.aiColor : data.playerColor\n//     if (cancelForward(node)){\n//         // console.log(`Cancel forward ${node.heuristic} aiTurn: ${aiTurn}`)\n//         return\n//     }\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(node, data.aiPath[c].x, data.aiPath[c].y)){\n//             node[nbNode] = getChild(data.aiPath[c], node, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode], data)\n//             uploadHeuristic(node, node[nbNode], depth,aiTurn)\n//             if (getAlphaBetaPruning(node, node[nbNode].heuristic, aiTurn))\n//                 break\n//             node[nbNode] = undefined // À remettre\n//             nbNode++\n//         }\n//     }\n// }\n\nconst getBufferMemory = board => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  return res;\n};\nconst initHeuristic = () => {\n  var res = {};\n  var pow = 0;\n  for (var c = heuristic.length - 1; c >= 0; c--) {\n    res[heuristic[c]] = Math.pow(10, pow);\n    pow++;\n  }\n  return res;\n};\nconst initData = mainData => {\n  var start = window.performance.now();\n  var data = {};\n  data.depth = 3;\n  data.treatmentSpace = 4;\n  if (361 - data.piecesOnBoard < data.depth) data.depth = 361 - data.piecesOnBoard;\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = mainData.playerColor;\n  data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  console.log(`${data.aiColor === data.WHITE ? 'WHITE\\'S' : 'BLACK\\'S'} TURN`);\n  data.board = mainData.board;\n  data.aiPath = getAiPath(mainData.board, data.treatmentSpace);\n  if (data.aiPath.length < data.depth) data.depth = data.aiPath.length;\n  data.bufferMemory = getBufferMemory(mainData.board);\n  data.heuristicAiDiviser = 1;\n  // if (data.depth % 2)\n  //     data.heuristicAiDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n  data.heuristic = initHeuristic(); // A NE PAS FAIRE A CHAQUE APPEL DE L'IA\n  data.heuristicTime = 0; // TMP\n  data.cancelForwardTime = 0; // TMP\n  data.noStonesTime = 0; // TMP\n  var end = window.performance.now();\n  data.initDataTime = end - start; // TMP\n  data.saveMinMax = []; // TMP\n  data.ctx = mainData.ctx; // TMP\n  data.images = mainData.images; // TMP\n  data.canvas = mainData.canvas; // TMP\n  data.heuristics = [-1, 3, 5, -6, -4]; // TMP\n  data.heuristicsCounter = 0; // TMP\n  return data;\n};\nconst ai = mainData => {\n  var data = initData(mainData);\n  minmax([], data.depth, -Infinity, Infinity, data);\n  console.log('----------------');\n  var pos = {\n    ...data.pos\n  };\n  data = undefined;\n  return pos;\n};\nexport default ai;","map":{"version":3,"names":["getAiPath","checkWinner","getHeuristic","fillBufferMemory","freeBufferMemory","heuristic","noStones","putStones","x","y","c","length","getWinnerHeuristic","data","endGame","bufferMemory","aiColor","Infinity","playerColor","min","bestHeuristic","max","pos","minmax","depth","alpha","beta","winnerHeuristic","aiPath","board","getBufferMemory","res","initHeuristic","pow","Math","initData","mainData","start","window","performance","now","treatmentSpace","piecesOnBoard","WHITE","BLACK","MIN","MAX","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","FORBIDDEN","console","log","heuristicAiDiviser","heuristicTime","cancelForwardTime","noStonesTime","end","initDataTime","saveMinMax","ctx","images","canvas","heuristics","heuristicsCounter","ai","undefined"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/ai.js"],"sourcesContent":["import getAiPath from \"./getAiPath\"\nimport { checkWinner } from \"../../tools/checkEndGame\"\nimport getHeuristic from \"./heuristic1\"\nimport { fillBufferMemory, freeBufferMemory } from \"./tools\"\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\n\nconst heuristic = [\n    'align5',\n    'block4',\n    'align4Free',\n    'block3Free',\n    'align4',\n    'block3',\n    'align3Free',\n    'block2Free',\n    'align3',\n    'block2',\n    'align2Free',\n    'block1Free',\n    'align2',\n    'block1',\n]\n\n// const noStones = (node, x, y) => {\n//     var start = window.performance.now()\n//     var end\n//     while (node.parent){\n//         if (node.x === x && node.y === y){\n//             end = window.performance.now()\n//             data.noStonesTime += end - start\n//             return false\n//         }\n//         node = node.parent\n//     }\n//     end = window.performance.now()\n//     data.noStonesTime += end - start\n//     return true\n// }\n\nconst noStones = (putStones, x, y) => {\n    for (var c = 0; c < putStones.length; c++){\n        if (putStones[c][0] === x && putStones[c][1] === y){\n            return false\n        }\n    }\n    return true\n}\n\nconst getWinnerHeuristic = (putStones, data) => {\n    fillBufferMemory(putStones, data)\n    var endGame = checkWinner(data.bufferMemory)\n    freeBufferMemory(putStones, data)\n    if (endGame === data.aiColor)\n        return Infinity\n    if (endGame === data.playerColor)\n        return -Infinity\n    return false\n}\n\nconst min = (bestHeuristic, heuristic) => {\n    if (bestHeuristic === false || heuristic < bestHeuristic)\n        return heuristic\n    return bestHeuristic\n}\n\nconst max = (bestHeuristic, heuristic, pos, data) => {\n    if (bestHeuristic === false || heuristic > bestHeuristic){\n        if (pos)\n            data.pos = pos\n        return heuristic\n    }\n    return bestHeuristic\n}\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     var winnerHeuristic\n//     if (depth === 0)\n//         return data.heuristics[data.heuristicsCounter++]\n//     if ((winnerHeuristic = getWinnerHeuristic(putStones)))\n//         return winnerHeuristic\n//     if (depth % 2 === data.depth % 2){\n//         for (var c = 0; c < 2; c++){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//             if (heuristic > alpha){\n//                 alpha = heuristic\n//                 if (beta <= alpha)\n//                     break\n//             }\n//         }\n//     }\n//     else{\n//         for (var c = 0; c < 2; c++){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             bestHeuristic = min(bestHeuristic, heuristic)\n//             if (heuristic < beta){\n//                 beta = heuristic\n//                 if (beta <= alpha)\n//                     break\n//             }   \n//         }\n//     }\n//     console.log(bestHeuristic)\n//     return bestHeuristic\n// }\n\nconst minmax = (putStones, depth, alpha, beta, data) => {\n    var bestHeuristic = false\n    var heuristic\n    var winnerHeuristic\n    var c\n    if (depth === 0)\n        return getHeuristic(putStones, data)\n    if ((winnerHeuristic = getWinnerHeuristic(putStones, data)))\n        return winnerHeuristic\n    if (depth % 2 === data.depth % 2){\n        for (var c = 0; c < data.aiPath.length; c++){\n            if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n                heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta, data)\n                bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false, data)\n                if (heuristic > alpha){\n                    alpha = heuristic\n                    if (beta <= alpha)\n                        break\n                }\n            }\n        }\n    }\n    else{\n        for (var c = 0; c < data.aiPath.length; c++){\n            if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n                heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n                bestHeuristic = min(bestHeuristic, heuristic)\n                if (heuristic < beta){\n                    beta = heuristic\n                    if (beta <= alpha)\n                        break\n                }   \n            }\n        }\n    }\n    return bestHeuristic\n}\n\n// const minmax = (putStones, depth, alpha, beta) => {\n//     var bestHeuristic = false\n//     var heuristic\n//     if (depth === 0)\n//         return getHeuristic(putStones, data)\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(putStones, data.aiPath[c].x, data.aiPath[c].y)){\n//             heuristic = minmax([...putStones, [data.aiPath[c].x, data.aiPath[c].y]], depth - 1, alpha, beta)\n//             if (depth % 2 === data.depth % 2){\n//                 bestHeuristic = max(bestHeuristic, heuristic, depth === data.depth ? data.aiPath[c] : false)\n//                 if (heuristic > alpha){\n//                     alpha = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n//             }\n//             else{\n//                 bestHeuristic = min(bestHeuristic, heuristic)\n//                 if (heuristic < beta){\n//                     beta = heuristic\n//                     if (beta <= alpha)\n//                         break\n//                 }\n                \n//             }\n//         }\n//     }\n//     return bestHeuristic\n// }\n\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var aiTurn = data.depth % 2 === depth % 2 ? true : false\n//     var color = aiTurn ? data.aiColor : data.playerColor\n//     if (cancelForward(node)){\n//         // console.log(`Cancel forward ${node.heuristic} aiTurn: ${aiTurn}`)\n//         return\n//     }\n//     for (var c = 0; c < data.aiPath.length; c++){\n//         if (!data.board[data.aiPath[c].y][data.aiPath[c].x] && noStones(node, data.aiPath[c].x, data.aiPath[c].y)){\n//             node[nbNode] = getChild(data.aiPath[c], node, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode], data)\n//             uploadHeuristic(node, node[nbNode], depth,aiTurn)\n//             if (getAlphaBetaPruning(node, node[nbNode].heuristic, aiTurn))\n//                 break\n//             node[nbNode] = undefined // À remettre\n//             nbNode++\n//         }\n//     }\n// }\n\nconst getBufferMemory = (board) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    return res\n}\n\nconst initHeuristic = () => {\n    var res = {}\n    var pow = 0\n    for (var c = heuristic.length - 1; c >= 0; c--){\n        res[heuristic[c]] = Math.pow(10, pow)\n        pow++\n    }\n    return res\n}\n\nconst initData = (mainData) => {\n    var start = window.performance.now()\n    var data = {}\n    data.depth = 3\n    data.treatmentSpace = 4\n    if (361 - data.piecesOnBoard < data.depth)\n        data.depth = 361 - data.piecesOnBoard\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = mainData.playerColor\n    data.aiColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n    console.log(`${data.aiColor === data.WHITE ? 'WHITE\\'S' : 'BLACK\\'S'} TURN`)\n    data.board = mainData.board\n    data.aiPath = getAiPath(mainData.board, data.treatmentSpace)\n    if (data.aiPath.length < data.depth)\n        data.depth = data.aiPath.length\n    data.bufferMemory = getBufferMemory(mainData.board)\n    data.heuristicAiDiviser = 1\n    // if (data.depth % 2)\n    //     data.heuristicAiDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n    data.heuristic = initHeuristic() // A NE PAS FAIRE A CHAQUE APPEL DE L'IA\n    data.heuristicTime = 0 // TMP\n    data.cancelForwardTime = 0 // TMP\n    data.noStonesTime = 0 // TMP\n    var end = window.performance.now()\n    data.initDataTime = end - start // TMP\n    data.saveMinMax = [] // TMP\n    data.ctx = mainData.ctx // TMP\n    data.images = mainData.images // TMP\n    data.canvas = mainData.canvas // TMP\n    data.heuristics = [-1, 3, 5, -6, -4] // TMP\n    data.heuristicsCounter = 0 // TMP\n    return data\n}\n\nconst ai = (mainData) => {\n    var data = initData(mainData)\n    minmax([], data.depth, -Infinity, Infinity, data)\n    console.log('----------------')\n    var pos = {...data.pos}\n    data = undefined\n    return pos\n}\n\nexport default ai"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}