{"ast":null,"code":"import { checkEndGame } from '../../tools/checkEndGame';\nimport printBoard from '../../tools/printBoard';\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport { io } from \"socket.io-client\";\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame || data.turn === 'ai') return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.playerColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else printBoard(data);\n};\nconst printEndGameStatus = data => {\n  var params = {};\n  params[data.DRAW] = {\n    text: 'END OF GAME, NO WINNER',\n    color: 'orange'\n  };\n  params[data.playerColor] = {\n    text: 'YOU WON THE GAME !',\n    color: 'green'\n  };\n  params[data.aiColor] = {\n    text: 'YOU LOST THE GAME',\n    color: 'red'\n  };\n  document.getElementById('endGame').style.color = params[data.endGame].color;\n  document.getElementById('endGame').innerHTML = params[data.endGame].text;\n  document.getElementById('newGame').style.display = 'block';\n};\nconst setEndGame = data => {\n  printEndGameStatus(data);\n  data.socket.disconnect();\n};\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst printNewStone = (data, newStone, pos, color) => {\n  var stone;\n  if (color === data.BLACK) stone = data.images.blackPiece;else stone = data.images.whitePiece;\n  data.ctx.drawImage(stone, data.images.gomokuBoard.width * pos.x - (newStone.width - data.images.gomokuBoard.width) / 2, data.images.gomokuBoard.height * pos.y - (newStone.height - data.images.gomokuBoard.height) / 2, newStone.width, newStone.height);\n};\nconst check_capture = (data, captured, pos, xIncrement, yIncrement, color, ennemyColor) => {\n  var x;\n  var y;\n  x = pos.x + xIncrement;\n  y = pos.y + yIncrement;\n  if (!(x >= 0 && x < 19 && y >= 0 && y < 19 && data.board[y][x] === ennemyColor)) return;\n  x += xIncrement;\n  y += yIncrement;\n  if (!(x >= 0 && x < 19 && y >= 0 && y < 19 && data.board[y][x] === ennemyColor)) return;\n  x += xIncrement;\n  y += yIncrement;\n  if (!(x >= 0 && x < 19 && y >= 0 && y < 19 && data.board[y][x] === color)) return;\n  captured.push({\n    x: pos.x + xIncrement,\n    y: pos.y + yIncrement\n  });\n  captured.push({\n    x: pos.x + 2 * xIncrement,\n    y: pos.y + 2 * yIncrement\n  });\n};\nconst getCapturedStones = (data, captured, pos, color, ennemyColor) => {\n  check_capture(data, captured, pos, 0, -1, color, ennemyColor);\n  check_capture(data, captured, pos, 1, -1, color, ennemyColor);\n  check_capture(data, captured, pos, 1, 0, color, ennemyColor);\n  check_capture(data, captured, pos, 1, 1, color, ennemyColor);\n  check_capture(data, captured, pos, 0, 1, color, ennemyColor);\n  check_capture(data, captured, pos, -1, 1, color, ennemyColor);\n  check_capture(data, captured, pos, -1, 0, color, ennemyColor);\n  check_capture(data, captured, pos, -1, -1, color, ennemyColor);\n};\nconst printCapturedStones = (data, captured, sizeStones, color) => {\n  var stone;\n  if (color === data.BLACK) stone = data.images.blackPiece;else stone = data.images.whitePiece;\n  for (var c = 0; c < captured.length; c += 1) {\n    data.ctx.drawImage(stone, data.images.gomokuBoard.width * captured[c].x - (sizeStones.width - data.images.gomokuBoard.width) / 2, data.images.gomokuBoard.height * captured[c].y - (sizeStones.height - data.images.gomokuBoard.height) / 2, sizeStones.width, sizeStones.height);\n  }\n};\nconst goToNextPlayer = (data, futurPlayer) => {\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n  if (futurPlayer === 'human') {\n    data.turn = 'human';\n    data.aiLaunched = false;\n  } else if (futurPlayer === 'ai') {\n    data.turn = 'ai';\n    launchAi(data, data.images, data.playerColor);\n  }\n};\nconst launchCaptureAnimation = (data, pos, color, futurPlayer) => {\n  var captured = [];\n  var ennemyColor;\n  if (color === data.BLACK) ennemyColor = data.WHITE;else ennemyColor = data.BLACK;\n  getCapturedStones(data, captured, pos, color, ennemyColor);\n  if (!captured.length) {\n    goToNextPlayer(data, futurPlayer);\n    return;\n  }\n  for (var c = 0; c < captured.length; c += 1) {\n    data.board[captured[c].y][captured[c].x] = 0;\n  }\n  var sizeStones = {};\n  sizeStones.width = data.images.gomokuBoard.width;\n  sizeStones.height = data.images.gomokuBoard.height;\n  var inter = setInterval(() => {\n    printBoard(data);\n    printCapturedStones(data, captured, sizeStones, ennemyColor);\n    sizeStones.width -= data.images.gomokuBoard.width / 70;\n    sizeStones.height -= data.images.gomokuBoard.height / 70;\n    if (sizeStones.width <= 0 && sizeStones.height <= 0) {\n      clearInterval(inter);\n      goToNextPlayer(data, futurPlayer);\n    }\n  }, 10);\n  data.piecesOnBoard -= captured.length;\n  printBoard(data);\n};\nconst launch_put_stone_animation = (data, pos, color, nextPlayer) => {\n  var newStone = {};\n  newStone.width = data.images.gomokuBoard.width * 10;\n  newStone.height = data.images.gomokuBoard.height * 10;\n  var inter = setInterval(() => {\n    printBoard(data);\n    printNewStone(data, newStone, pos, color);\n    newStone.width -= data.images.gomokuBoard.width / 4;\n    newStone.height -= data.images.gomokuBoard.height / 4;\n    if (newStone.width <= data.images.gomokuBoard.width && newStone.height <= data.images.gomokuBoard.height) {\n      data.board[pos.y][pos.x] = color;\n      data.piecesOnBoard += 1;\n      printBoard(data);\n      clearInterval(inter);\n      launchCnimation(data, pos, color, nextPlayer);\n    }\n  }, 10);\n};\nconst receiveAiMove = (data, pos) => {\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  // data.piecesOnBoard += 1\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`;\n  document.getElementById('timerAverage').innerHTML = `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`;\n  launch_put_stone_animation(data, pos, data.aiColor, 'human');\n};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame || data.turn === 'ai') return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    // data.board[stone.y][stone.x] = data.playerColor\n    // data.piecesOnBoard += 1\n\n    // printBoard(data)\n    // launch_capture_animation(data, stone, data.playerColor, 'ai')\n    launch_put_stone_animation(data, stone, data.playerColor, 'ai');\n  }\n};\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame || data.turn === 'ai') return;\n  printBoard(data);\n};\nconst initGame = (images, playerColor, firstPlayer) => {\n  var data = {};\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs ai'\n    }\n  });\n  data.aiLaunched = false;\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayer;\n  data.aiMoves = 0;\n  data.aiTotalTime = 0;\n  data.piecesOnBoard = 0;\n  data.playerColor = playerColor;\n  data.aiColor = playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.images = images;\n  printBoard(data);\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  if (data.turn === 'ai') launchAi(data);\n  data.canvas.onmousemove = e => canvasOnMouseMove(e, data);\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data);\n};\nexport default initGame;","map":{"version":3,"names":["checkEndGame","printBoard","getStonePosition","initBoard","serverIp","io","canvasOnMouseMove","e","data","endGame","turn","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","y","board","x","ctx","globalAlpha","drawImage","playerColor","WHITE","images","whitePiece","blackPiece","gomokuBoard","width","height","printEndGameStatus","params","DRAW","text","color","aiColor","document","getElementById","style","innerHTML","display","setEndGame","socket","disconnect","launchAi","startAi","window","performance","now","aiLaunched","emit","printNewStone","newStone","pos","BLACK","check_capture","captured","xIncrement","yIncrement","ennemyColor","push","getCapturedStones","printCapturedStones","sizeStones","c","length","goToNextPlayer","futurPlayer","launchCaptureAnimation","inter","setInterval","clearInterval","piecesOnBoard","launch_put_stone_animation","nextPlayer","launchCnimation","receiveAiMove","timeAi","Math","floor","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","toFixed","canvasOnClick","canvasOnMouseLeave","initGame","firstPlayer","query","page","getContext","on","onmousemove","onclick","onmouseleave"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsAi/initGame.js"],"sourcesContent":["import { checkEndGame } from '../../tools/checkEndGame'\nimport printBoard from '../../tools/printBoard'\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport { io } from \"socket.io-client\"\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame || data.turn === 'ai')\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.playerColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else\n        printBoard(data)\n}\n\nconst printEndGameStatus = data => {\n\tvar params = {}\n    params[data.DRAW] = {\n        text : 'END OF GAME, NO WINNER',\n        color : 'orange'\n    }\n    params[data.playerColor] = {\n        text : 'YOU WON THE GAME !',\n        color : 'green'\n    }\n    params[data.aiColor] = {\n        text : 'YOU LOST THE GAME',\n        color : 'red'\n    }\n    document.getElementById('endGame').style.color = params[data.endGame].color\n    document.getElementById('endGame').innerHTML = params[data.endGame].text\n    document.getElementById('newGame').style.display = 'block'\n}\n\nconst setEndGame = data => {\n    printEndGameStatus(data)\n\tdata.socket.disconnect()\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst printNewStone = (data, newStone, pos, color) => {\n\tvar stone\n\tif (color === data.BLACK)\n\t\tstone = data.images.blackPiece\n\telse\n\t\tstone = data.images.whitePiece\n\tdata.ctx.drawImage(\n\t\tstone,\n\t\tdata.images.gomokuBoard.width * pos.x - ((newStone.width - data.images.gomokuBoard.width) / 2),\n\t\tdata.images.gomokuBoard.height * pos.y - ((newStone.height - data.images.gomokuBoard.height) / 2),\n\t\tnewStone.width,\n\t\tnewStone.height\n\t)\n}\n\nconst check_capture = (data, captured, pos, xIncrement, yIncrement, color, ennemyColor) => {\n\tvar x;\n\tvar y;\n\n\tx = pos.x + xIncrement\n\ty = pos.y + yIncrement\n\tif (!(x >= 0 && x < 19 && y >= 0 && y < 19\n\t&& data.board[y][x] === ennemyColor))\n\t\treturn\n\tx += xIncrement\n\ty += yIncrement\n\tif (!(x >= 0 && x < 19 && y >= 0 && y < 19\n\t&& data.board[y][x] === ennemyColor))\n\t\treturn ;\n\tx += xIncrement\n\ty += yIncrement\n\tif (!(x >= 0 && x < 19 && y >= 0 && y < 19\n\t\t&& data.board[y][x] === color))\n\t\treturn ;\n\tcaptured.push({x : pos.x + xIncrement, y : pos.y + yIncrement})\n\tcaptured.push({x : pos.x + 2 * xIncrement, y : pos.y + 2 * yIncrement})\n}\n\nconst getCapturedStones = (data, captured, pos, color, ennemyColor) => {\n\n\tcheck_capture(data, captured, pos, 0, -1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, 1, -1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, 1, 0, color, ennemyColor)\n\tcheck_capture(data, captured, pos, 1, 1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, 0, 1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, -1, 1, color, ennemyColor)\n\tcheck_capture(data, captured, pos, -1, 0, color, ennemyColor)\n\tcheck_capture(data, captured, pos, -1, -1, color, ennemyColor)\n}\n\nconst printCapturedStones = (data, captured, sizeStones, color) => {\n\tvar stone\n\n\tif (color === data.BLACK)\n\t\tstone = data.images.blackPiece\n\telse\n\t\tstone = data.images.whitePiece\n\tfor (var c = 0; c < captured.length; c += 1){\n\t\tdata.ctx.drawImage(\n\t\t\tstone,\n\t\t\tdata.images.gomokuBoard.width * captured[c].x - ((sizeStones.width - data.images.gomokuBoard.width) / 2),\n\t\t\tdata.images.gomokuBoard.height * captured[c].y - ((sizeStones.height - data.images.gomokuBoard.height) / 2),\n\t\t\tsizeStones.width,\n\t\t\tsizeStones.height\n\t\t)\n\t}\n}\n\nconst goToNextPlayer = (data, futurPlayer) => {\n\tif ((data.endGame = checkEndGame(data))){\n\t\tsetEndGame(data)\n\t\treturn\n\t}\n\tif (futurPlayer === 'human'){\n\t\tdata.turn = 'human'\n\t\tdata.aiLaunched = false\n\t}\n\telse if (futurPlayer === 'ai'){\n\t\tdata.turn = 'ai'\n\t\tlaunchAi(data, data.images, data.playerColor)\n\t}\n}\n\nconst launchCaptureAnimation = (data, pos, color, futurPlayer) => {\n\tvar captured = [];\n\tvar ennemyColor;\n\tif (color === data.BLACK)\n\t\tennemyColor = data.WHITE\n\telse\n\t\tennemyColor = data.BLACK\n\tgetCapturedStones(data, captured, pos, color, ennemyColor)\n\tif (!captured.length)\n\t{\n\t\tgoToNextPlayer(data, futurPlayer)\n\t\treturn\n\t}\n\tfor (var c = 0; c < captured.length; c += 1){\n\t\tdata.board[captured[c].y][captured[c].x] = 0;\n\t}\n\tvar sizeStones = {}\n\tsizeStones.width = data.images.gomokuBoard.width\n\tsizeStones.height = data.images.gomokuBoard.height\n\tvar inter = setInterval(() => {\n\t\tprintBoard(data)\n\t\tprintCapturedStones(data, captured, sizeStones, ennemyColor)\n\t\tsizeStones.width -= data.images.gomokuBoard.width / 70\n\t\tsizeStones.height -= data.images.gomokuBoard.height / 70\n\t\tif (sizeStones.width <= 0 && sizeStones.height <= 0){\n\t\t\tclearInterval(inter)\n\t\t\tgoToNextPlayer(data, futurPlayer)\n\t\t}\n\t}, 10)\n\tdata.piecesOnBoard -= captured.length\n\tprintBoard(data)\n}\n\nconst launch_put_stone_animation = (data, pos, color, nextPlayer) => {\n\tvar newStone = {}\n\tnewStone.width = data.images.gomokuBoard.width * 10;\n\tnewStone.height = data.images.gomokuBoard.height * 10;\n\tvar inter = setInterval(() => {\n\t\tprintBoard(data)\n\t\tprintNewStone(data, newStone, pos, color);\n\t\tnewStone.width -= data.images.gomokuBoard.width / 4;\n\t\tnewStone.height -= data.images.gomokuBoard.height / 4;\n\t\tif (newStone.width <= data.images.gomokuBoard.width &&\n\t\tnewStone.height <= data.images.gomokuBoard.height){\n\t\t\tdata.board[pos.y][pos.x] = color\n\t\t\tdata.piecesOnBoard += 1;\n\t\t\tprintBoard(data);\n\t\t\tclearInterval(inter)\n\t\t\tlaunchCnimation(data, pos, color, nextPlayer);\n\t\t}\n\t}, 10);\n}\n\nconst receiveAiMove = (data, pos) => {\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    // data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    document.getElementById('timer').innerHTML = `${nbSeconds},${nbMilliSeconds}s`\n    document.getElementById('timerAverage').innerHTML = `${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`\n\tlaunch_put_stone_animation(data, pos, data.aiColor, 'human')\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame || data.turn === 'ai')\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        // data.board[stone.y][stone.x] = data.playerColor\n        // data.piecesOnBoard += 1\n\n        // printBoard(data)\n\t\t// launch_capture_animation(data, stone, data.playerColor, 'ai')\n\t\tlaunch_put_stone_animation(data, stone, data.playerColor, 'ai')\n    }\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n    if (data.endGame || data.turn === 'ai')\n            return\n        printBoard(data)\n}\n\nconst initGame = (images, playerColor, firstPlayer) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs ai'}})\n\tdata.aiLaunched = false\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayer\n    data.aiMoves = 0\n    data.aiTotalTime = 0\n    data.piecesOnBoard = 0\n    data.playerColor = playerColor\n    data.aiColor = playerColor === data.WHITE ? data.BLACK : data.WHITE\n    data.images = images\n    printBoard(data)\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n    if (data.turn === 'ai')\n        launchAi(data)\n    data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n    data.canvas.onclick = e => canvasOnClick(e, data)\n    data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n}\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}