{"ast":null,"code":"import { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\n\n/*\n//AUTO PLAY\n\nconst setEndGame = (data) => {\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLaunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n\tconsole.log(`timer : ${nbSeconds},${nbMilliSeconds}s`)\n\tconsole.log(`average : ${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`)\n    printBoard(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    printBoard(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiTotalTime = 0\n\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n*/\n\n// CLICK\n\nconst setEndGame = data => {};\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst getSuggestion = data => {\n  data.aiLaunched = true;\n  data.startAi = window.performance.now();\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame) return;\n  printBoard(data);\n  if (!data.aiLaunched) printSuggestion(data);\n};\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame || data.aiLaunched) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    printSuggestion(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.aiColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else {\n    printBoard(data);\n    printSuggestion(data);\n  }\n};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame || data.aiLaunched) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = data.aiColor;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    if (!data.board[stone.y][stone.x]) {\n      launchPutStoneAnimation(data, stone, data.playerColor, 'ai').then(() => {\n        launchCaptureAnimation(data, stone, data.playerColor, 'ai').then(captures => {\n          goToNextPlayer(data, 'ai', data.playerColor, captures);\n        });\n      });\n    }\n    if (data.endGame = checkEndGame(data)) {\n      setEndGame(data);\n      return;\n    }\n    data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n    data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n    getSuggestion(data);\n  }\n};\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst receiveAiMove = (data, pos) => {\n  data.aiLaunched = false;\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  data.suggestion = {\n    x: pos.x,\n    y: pos.y\n  };\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.piecesOnBoard += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  printBoard(data);\n  printSuggestion(data);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n};\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs human'\n    }\n  });\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  data.captures = {\n    ai: 0,\n    player: 0\n  };\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  data.aiMoves = 0;\n  data.aiTimePlay = 0;\n  data.aiColor = data.firstPlayerColor;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data);\n  data.canvas.onmousemove = e => canvasOnMouseMove(e, data);\n  getSuggestion(data);\n  launchAi(data);\n};\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","serverIp","printBoard","checkEndGame","io","setEndGame","data","printSuggestion","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","getSuggestion","aiLaunched","startAi","window","performance","now","socket","emit","aiColor","board","canvasOnMouseLeave","e","endGame","canvasOnMouseMove","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","globalAlpha","WHITE","whitePiece","blackPiece","canvasOnClick","piecesOnBoard","launchPutStoneAnimation","playerColor","then","launchCaptureAnimation","captures","goToNextPlayer","BLACK","launchAi","receiveAiMove","pos","timeAi","Math","floor","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","initGame","firstPlayerColor","query","page","on","ai","player","DRAW","document","getElementById","getContext","turn","aiTimePlay","onclick","onmouseleave","onmousemove"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\n\n/*\n//AUTO PLAY\n\nconst setEndGame = (data) => {\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLaunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n\tconsole.log(`timer : ${nbSeconds},${nbMilliSeconds}s`)\n\tconsole.log(`average : ${(data.aiTotalTime / data.aiMoves).toFixed(3)}s`)\n    printBoard(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    printBoard(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiTotalTime = 0\n\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tlaunchAi(data)\n}\n*/\n\n\n\n// CLICK\n\nconst setEndGame = (data) => {\n}\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst getSuggestion = data => {\n\tdata.aiLaunched = true\n\tdata.startAi = window.performance.now()\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n\tif (data.endGame)\n\t\t\treturn\n\t\tprintBoard(data)\n\tif (!data.aiLaunched)\n\t\tprintSuggestion(data)\n}\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame || data.aiLaunched)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        printSuggestion(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.aiColor === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else{\n        printBoard(data)\n        printSuggestion(data)\n    }\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame || data.aiLaunched)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = data.aiColor\n        data.piecesOnBoard += 1\n        printBoard(data)\n\n\t\tif (!data.board[stone.y][stone.x]){\n\t\t\tlaunchPutStoneAnimation(data, stone, data.playerColor, 'ai').then(() => {\n\t\t\t\tlaunchCaptureAnimation(data, stone, data.playerColor, 'ai').then((captures) => {\n\t\t\t\t\tgoToNextPlayer(data, 'ai', data.playerColor, captures)\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\n        if ((data.endGame = checkEndGame(data))){\n            setEndGame(data)\n            return\n        }\n        data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n        getSuggestion(data)\n    }\n}\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLaunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n\tdata.suggestion = {x : pos.x, y : pos.y}\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    printBoard(data)\n\tprintSuggestion(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.captures = {ai : 0, player : 0}\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.canvas.onclick = e => canvasOnClick(e, data)\n\tdata.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n\tdata.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n\tgetSuggestion(data)\n\tlaunchAi(data)\n}\n\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}