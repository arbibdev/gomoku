{"ast":null,"code":"// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\nvar data;\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\n\n// const getBoard = (board, node) => {\n//     var res = []\n//     for (var y = 0; y < 19; y++){\n//         res[y] = []\n//         for (var x = 0; x < 19; x++){\n//             res[y][x] = board\n//         }\n//     }\n//     while (node.parent){\n//         res[node.y][node.x] = node.color\n//         node = node.parent\n//     }\n//     return res\n// }\n\nconst getBestMove = node => {\n  var nbNode = 0;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color: depth % 2 === 0 ? 'black' : 'white',\n          heuristic: getHeuristic()\n        };\n      }\n    }\n  }\n};\nconst minmax = (node, depth) => {\n  if (depth === 1) getBestMove(node);else {\n    var nbNode;\n    // var board = getBoard(data.board, node)\n    for (var y = 0; y < 19; y++) {\n      for (var x = 0; x < 19; x++) {\n        if (!data.board[y][x] && noStones(node, x, y)) {\n          node[`${nbNode}`] = {\n            x,\n            y,\n            parent: node,\n            color: depth % 2 === 0 ? 'black' : 'white'\n          };\n          minmax(node, depth);\n          nbNode++;\n        }\n      }\n    }\n  }\n};\n\n// const minmax = (node, stones, depth) => {\n//     var node = 0\n//     data.tree[treeLine + 1] = []\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!board[y][x] && !stones[`${x},${y}`]){\n//                 if (depth > 1)\n//                     data.tree[treeLine + 1][node] = minmax(depth - 1)\n//                 else\n//                     return heuristic(actualBoard(board, stones))\n//                 node += 1\n//             }\n//         }\n//     }\n// }\n\nconst copyBoard = board => {\n  const array = [];\n  for (var c = 0; c < 19; c++) {\n    array[c] = [...board[c]];\n  }\n  return array;\n};\nconst initData = playerColor => {\n  data = {};\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.tree = [];\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(playerColor);\n  var tree = {};\n  minmax(0, 0, {}, 2);\n  getHeuristic(tree);\n  return getBestMove(tree);\n};\nexport default ia;","map":{"version":3,"names":["data","noStones","node","x","y","parent","getBestMove","nbNode","board","color","depth","heuristic","getHeuristic","minmax","copyBoard","array","c","initData","playerColor","iaColor","tree","ia"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\nvar data\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\n// const getBoard = (board, node) => {\n//     var res = []\n//     for (var y = 0; y < 19; y++){\n//         res[y] = []\n//         for (var x = 0; x < 19; x++){\n//             res[y][x] = board\n//         }\n//     }\n//     while (node.parent){\n//         res[node.y][node.x] = node.color\n//         node = node.parent\n//     }\n//     return res\n// }\n\nconst getBestMove = (node) => {\n    var nbNode = 0\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color : depth % 2 === 0 ? 'black' : 'white',\n                    heuristic : getHeuristic()\n                }\n            }\n        }\n    }\n}\n\nconst minmax = (node, depth) => {\n    if (depth === 1)\n        getBestMove(node)\n    else{\n        var nbNode\n        // var board = getBoard(data.board, node)\n        for (var y = 0; y < 19; y++){\n            for (var x = 0; x < 19; x++){\n                if (!data.board[y][x] && noStones(node, x, y)){\n                    node[`${nbNode}`] = {\n                        x, y,\n                        parent : node,\n                        color : depth % 2 === 0 ? 'black' : 'white'\n                    }\n                    minmax(node, depth)\n                    nbNode++\n                }\n            }\n        }\n    }\n\n}\n\n// const minmax = (node, stones, depth) => {\n//     var node = 0\n//     data.tree[treeLine + 1] = []\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!board[y][x] && !stones[`${x},${y}`]){\n//                 if (depth > 1)\n//                     data.tree[treeLine + 1][node] = minmax(depth - 1)\n//                 else\n//                     return heuristic(actualBoard(board, stones))\n//                 node += 1\n//             }\n//         }\n//     }\n// }\n\nconst copyBoard = (board) => {\n    const array = []\n    for (var c = 0; c < 19; c++){\n        array[c] = [...board[c]]\n    }\n    return array\n}\n\nconst initData = (playerColor) => {\n    data = {}\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.tree = []\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(playerColor)\n    var tree = {}\n    minmax(0, 0, {}, 2)\n    getHeuristic(tree)\n    return (getBestMove(tree))\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}