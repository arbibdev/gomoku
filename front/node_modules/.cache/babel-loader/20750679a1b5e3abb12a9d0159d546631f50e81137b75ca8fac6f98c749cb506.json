{"ast":null,"code":"import { getStonePosition, initBoard } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport ai from '../../tools/ai/ai';\nconst getSuggestion = data => {\n  data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n  return ai(data);\n};\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst setEndGame = data => {};\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    printSuggestion(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else {\n    printBoard(data);\n    printSuggestion(data);\n  }\n};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = data.turn;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    if (data.endGame = checkEndGame(data)) {\n      setEndGame(data);\n      return;\n    }\n    data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n    data.suggestion = getSuggestion(data);\n    printSuggestion(data);\n  }\n};\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame) return;\n  printBoard(data);\n  printSuggestion(data);\n};\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs human'\n    }\n  });\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  data.suggestion = getSuggestion(data);\n  printBoard(data);\n  printSuggestion(data);\n  data.aiMoves = 0;\n  data.aiTimePlay = 0;\n  var pos;\n  while (!checkEndGame) {\n    const launchAi = data => {\n      data.startAi = window.performance.now();\n      data.aiLaunched = true;\n      data.socket.emit('ai', {\n        aiColor: data.aiColor,\n        board: data.board\n      });\n    };\n  }\n  var pos;\n  var inter = setInterval(() => {\n    const start = window.performance.now();\n    pos = ai(data);\n    const end = window.performance.now();\n    data.aiMoves += 1;\n    data.aiTimePlay += end - start;\n    data.board[pos.y][pos.x] = data.turn;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n    console.log(data.aiTimePlay / data.aiMoves);\n    if (checkEndGame(data)) clearInterval(inter);\n  }, 0);\n};\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","printBoard","checkEndGame","ai","getSuggestion","data","playerColor","turn","WHITE","BLACK","printSuggestion","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","setEndGame","canvasOnMouseMove","e","endGame","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","board","globalAlpha","whitePiece","blackPiece","canvasOnClick","piecesOnBoard","canvasOnMouseLeave","initGame","firstPlayerColor","socket","io","serverIp","query","page","DRAW","document","getElementById","getContext","aiMoves","aiTimePlay","pos","launchAi","startAi","window","performance","now","aiLaunched","emit","aiColor","inter","setInterval","start","end","console","log","clearInterval"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport ai from '../../tools/ai/ai'\n\nconst getSuggestion = data => {\n    data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n    return ai(data)\n}\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst setEndGame = (data) => {\n}\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        printSuggestion(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else{\n        printBoard(data)\n        printSuggestion(data)\n    }\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = data.turn\n        data.piecesOnBoard += 1\n        printBoard(data)\n        if ((data.endGame = checkEndGame(data))){\n            setEndGame(data)\n            return\n        }\n        data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n        data.suggestion = getSuggestion(data)\n        printSuggestion(data)\n    }\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n    if (data.endGame)\n            return\n        printBoard(data)\n        printSuggestion(data)\n}\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    data.suggestion = getSuggestion(data)\n    printBoard(data)\n    printSuggestion(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\n\tvar pos\n\twhile (!checkEndGame){\n\t\tconst launchAi = data => {\n\t\t\tdata.startAi = window.performance.now()\n\t\t\tdata.aiLaunched = true\n\t\t\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n\t\t}\n\t}\n\n    var pos\n    var inter = setInterval(() => {\n        const start = window.performance.now()\n        pos = ai(data)\n        const end = window.performance.now()\n        data.aiMoves += 1\n        data.aiTimePlay += end - start\n        data.board[pos.y][pos.x] = data.turn\n        data.piecesOnBoard += 1\n        printBoard(data)\n        data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n        console.log(data.aiTimePlay / data.aiMoves)\n        if (checkEndGame(data))\n            clearInterval(inter)\n    }, 0)\n}\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}