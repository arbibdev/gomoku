{"ast":null,"code":"import getIaPath from \"./getIaPath\";\nconst checkEndGame = board => {\n  const checkStones = (x, y, board, orientation) => {\n    var nb = 0;\n    var color = board[y][x];\n    while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color) nb++;\n    while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color) nb++;\n    while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color) nb++;\n    while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color) nb++;\n    if (nb >= 5) return color;\n    return false;\n  };\n  const checkAlignment = (x, y, board) => {\n    var winner;\n    if ((winner = checkStones(x, y, board, 'vertical')) || (winner = checkStones(x, y, board, 'horizontal')) || (winner = checkStones(x, y, board, 'diagonal1')) || (winner = checkStones(x, y, board, 'diagonal2'))) return winner;\n    return false;\n  };\n  const checkWinner = board => {\n    var winner;\n    for (var y = 0; y < 19; y++) {\n      for (var x = 0; x < 19; x++) {\n        if (board[y][x] && (winner = checkAlignment(x, y, board))) return winner;\n      }\n    }\n    return false;\n  };\n  var winner = checkWinner(board);\n  if (winner) return winner;\n  return false;\n};\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board[y][x];\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst singleStonesHeuristic = board => {\n  var heuristic = 0;\n  var localHeuristic;\n  var freeNeighbour;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        localHeuristic = 10;\n        freeNeighbour = 1;\n        if (y - 1 >= 0 && !board[y - 1][x]) freeNeighbour += 1;\n        if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && !board[y][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1]) freeNeighbour += 1;\n        if (y + 1 < 19 && !board[y + 1][x]) freeNeighbour += 1;\n        if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && !board[y][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) localHeuristic *= freeNeighbour;\n        if (localHeuristic > 10) {\n          if (board[y][x] === data.iaColor) heuristic += localHeuristic;else heuristic -= localHeuristic;\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getNeighbour1 = (x, y, board, orientation) => {\n  if (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x] || orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1] || orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1] || orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1]) return 1;\n  return 0;\n};\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n  if (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x] || orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb] || orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb] || orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb]) return 1;\n  return 0;\n};\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL) {\n    checkedBoard[y][x] = data.VERTICAL;\n    nb++;\n    y++;\n  }\n  return nb;\n};\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL) {\n    checkedBoard[y][x] = data.HORIZONTAL;\n    nb++;\n    x++;\n  }\n  return nb;\n};\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1) {\n    checkedBoard[y][x] = data.DIAGONAL1;\n    nb++;\n    x++;\n    y++;\n  }\n  return nb;\n};\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2) {\n    checkedBoard[y][x] = data.DIAGONAL2;\n    nb++;\n    x--;\n    y++;\n  }\n  return nb;\n};\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n  var nb = 0;\n  var color = board[y][x];\n  var neighbour1 = getNeighbour1(x, y, board, orientation);\n  var saveX = x;\n  var saveY = y;\n  if (orientation === data.VERTICAL) nb = checkVerticalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.HORIZONTAL) nb = checkHorizontalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL1) nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL2) nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard);\n  if (nb > 1) {\n    var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation);\n    if (nb < 5 && !neighbour1 && !neighbour2) return false;\n    return {\n      nb,\n      neighbour1,\n      neighbour2\n    };\n  }\n  return false;\n};\nconst checkAlignment = (x, y, board, checkedBoard) => {\n  var alignment = [];\n  var ret;\n  for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++) {\n    if (ret = checkStones(x, y, board, c, checkedBoard)) alignment.push(ret);\n  }\n  return alignment;\n};\nconst initCheckedBoard = () => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = 0;\n    }\n  }\n  return res;\n};\nconst alignmentsHeuristic = board => {\n  var heuristic = 0;\n  var alignment;\n  var checkedBoard = initCheckedBoard();\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] && board[y][x] !== data.FORBIDDEN) {\n        alignment = checkAlignment(x, y, board, checkedBoard);\n        for (var c = 0; c < alignment.length; c++) {\n          if (board[y][x] === data.iaColor) {\n            // if (alignment[c].nb >= 5)\n            //     heuristic += Infinity\n            // else\n            heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n          } else {\n            // if (alignment[c].nb >= 5)\n            //     heuristic -= Infinity\n            // else\n            heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n          }\n        }\n      }\n    }\n  }\n  if (!heuristic && heuristic !== 0) console.log('OOUUUPS ! NaN');\n  return heuristic;\n};\nconst getHeuristic = node => {\n  const start = Date.now();\n  data.nbLeaves += 1; // TMP\n  var board = getBoard(node);\n  var h1 = singleStonesHeuristic(board);\n  var h2 = alignmentsHeuristic(board);\n  const end = Date.now();\n  data.heuristicTime += end - start;\n  return h1 + h2;\n};\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node[nbNode].heuristic > node.alpha) node.alpha = node[nbNode].heuristic;\n  } else {\n    if (node[nbNode].heuristic < node.beta) node.beta = node[nbNode].heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst getChild = (pos, node, depth, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\n// const uploadHeuristic = (depth, node) => {\n//     var bestMove\n//     if ((data.depth % 2) !== (depth % 2))\n//         bestMove = getBestMove(node, data.MIN, depth)\n//     else\n//         bestMove = getBestMove(node, data.MAX, depth)\n//     node.heuristic = bestMove.heuristic\n//     if (depth === data.depth)\n//         return {x : bestMove.x, y : bestMove.y}\n//     return false\n// }\n\n// const uploadHeuristic = (depth, node) => {\n//     var bestMove\n//     if ((data.depth % 2) !== (depth % 2)){\n//         bestMove = getBestMove(node, data.MIN, depth)\n//         if (bestMove.heuristic < node.heuristic)\n//             node.heuristic = bestMove.heuristic\n//     }\n//     else{\n//         bestMove = getBestMove(node, data.MAX, depth)\n//         if (bestMove.heuristic > node.heuristic)\n//             node.heuristic = bestMove.heuristic\n//     }\n//     if (depth === data.depth){\n//         node.heuristic = bestMove.heuristic\n//         return {x : bestMove.x, y : bestMove.y}\n//     }\n//     return false\n// }\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var color = (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n//     for (var c = 0; c < data.iaPath.length; c++){\n//         if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n//             node[nbNode] = getChild(data.iaPath[c], node, depth, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode])\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 break\n//             nbNode++\n//         }\n//     }\n//     var bestMove\n//     if ((bestMove = uploadHeuristic(depth, node)))\n//         return {x : bestMove.x, y : bestMove.y}\n// }\n\nconst cancelForward = (node, depth) => {\n  var endGame = checkEndGame(getBoard(node));\n  if (endGame === data.iaColor) {\n    node.heuristic = Infinity;\n    return true;\n  }\n  if (endGame === data.playerColor) {\n    node.heuristic = -Infinity;\n    return true;\n  }\n  return false;\n};\nconst uploadHeuristic = (node, child, depth) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node.heuristic === undefined || child.heuristic > node.heuristic) {\n      node.heuristic = child.heuristic;\n      if (data.depth === depth) {\n        node.bestPos = {\n          x: child.x,\n          y: child.y\n        };\n      }\n    }\n  } else {\n    if (node.heuristic === undefined || child.heuristic < node.heuristic) node.heuristic = child.heuristic;\n  }\n};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var color = data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor;\n  if (cancelForward(node, depth)) return;\n  for (var c = 0; c < data.iaPath.length; c++) {\n    if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)) {\n      node[nbNode] = getChild(data.iaPath[c], node, depth, color);\n      if (depth > 1) minmax(node[nbNode], depth - 1);else node[nbNode].heuristic = getHeuristic(node[nbNode]);\n      uploadHeuristic(node, node[nbNode], depth);\n      if (getAlphaBetaPruning(node, depth, nbNode)) break;\n      // node[nbNode] = undefined // WORKS BUT USELESS FOR THE MOMENT\n      nbNode++;\n    }\n  }\n  // var bestMove\n  // if ((bestMove = uploadHeuristic(depth, node)))\n  //     return {x : bestMove.x, y : bestMove.y}\n};\n\nconst blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      if (pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 && (board[pos[0].y][pos[0].x] === data.WHITE || board[pos[0].y][pos[0].x] === data.BLACK) || pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 && (board[pos[1].y][pos[1].x] === data.WHITE || board[pos[1].y][pos[1].x] === data.BLACK) || pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 && (board[pos[2].y][pos[2].x] === data.WHITE || board[pos[2].y][pos[2].x] === data.BLACK) || pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 && (board[pos[3].y][pos[3].x] === data.WHITE || board[pos[3].y][pos[3].x] === data.BLACK)) return false;\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && blockCase(x, y, board, offset)) board[y][x] = data.FORBIDDEN;\n    }\n  }\n};\nconst emptyBoard = board => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] !== data.FORBIDDEN) return false;\n    }\n  }\n  return true;\n};\nconst freeSquareOnTheMiddle = board => {\n  // IMPLEMENTER POUR LE CAS OÙ LE BOARD EST FULL ET RETIRER CETTE FONCTION !!!!!!\n  for (var y = 6; y < 12; y++) {\n    for (var x = 6; x < 12; x++) {\n      board[y][x] = 0;\n    }\n  }\n};\nconst getStartBoard = (board, offset) => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, offset);\n  if (emptyBoard(res)) freeSquareOnTheMiddle(res);\n  return res;\n};\nconst initData = mainData => {\n  data = {};\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = mainData.playerColor;\n  data.iaColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.board = mainData.board;\n  data.iaPath = getIaPath(mainData.board);\n  data.depth = 3;\n  data.heuristicTime = 0; // TMP\n};\n\nconst getTreeToPrint = (node, depth) => {\n  var nbNode = 0;\n  var res = {};\n  res.heuristic = node.heuristic;\n  res.x = node.x;\n  res.y = node.y;\n  while (node[nbNode]) {\n    if (depth > 0) res[nbNode] = getTreeToPrint(node[nbNode], depth - 1);\n    nbNode += 1;\n  }\n  return res;\n};\nconst printTree = (tree, indentation) => {\n  var nbNode = 0;\n  var prefix = '';\n  for (var c = 0; c < indentation; c++) {\n    prefix += '----';\n  }\n  console.log(`${prefix}(${tree.heuristic})`);\n  while (tree[nbNode]) {\n    printTree(tree[nbNode], indentation + 1);\n    nbNode++;\n  }\n};\nconst printHeuristic = (ctx, images, canvas, tree) => {\n  const printBestNodes = (node, firstCall) => {\n    if (firstCall) {\n      console.log(node.heuristic);\n      console.log('CHILDS POSITIONS :');\n    } else console.log('x:', node.x, 'y:', node.y);\n    var nbNode = 0;\n    while (node[nbNode] && node[nbNode].heuristic !== node.heuristic) nbNode++;\n    if (node[nbNode]) printBestNodes(node[nbNode]);\n  };\n  var c = -1;\n  document.onkeydown = e => {\n    if (e.key !== 'Enter') return;\n    var board = [];\n    for (var y = 0; y < 19; y++) {\n      board[y] = [];\n      for (var x = 0; x < 19; x++) {\n        board[y][x] = data.board[y][x];\n      }\n    }\n    printBestNodes(tree, 1);\n  };\n};\nconst ia = (board, mainData, images) => {\n  initData(board, mainData);\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  minmax(tree, data.depth);\n  console.log(`heuristic time: data.heuristicTime`);\n  var pos = {\n    ...tree.bestPos\n  };\n  data = undefined;\n  return tree.bestPos;\n};\n// PENSER À TOUT FREE À LA FIN !!\n\nexport default ia;","map":{"version":3,"names":["getIaPath","checkEndGame","board","checkStones","x","y","orientation","nb","color","checkAlignment","winner","checkWinner","data","getBoard","node","res","parent","noStones","singleStonesHeuristic","heuristic","localHeuristic","freeNeighbour","iaColor","getNeighbour1","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","getNeighbour2","checkVerticalAlignment","checkedBoard","checkHorizontalAlignment","checkDiagonal1Alignment","checkDiagonal2Alignment","neighbour1","saveX","saveY","neighbour2","alignment","ret","c","push","initCheckedBoard","alignmentsHeuristic","FORBIDDEN","length","Math","pow","console","log","getHeuristic","start","Date","now","nbLeaves","h1","h2","end","heuristicTime","getAlphaBetaPruning","depth","nbNode","alpha","beta","getChild","pos","cancelForward","endGame","Infinity","playerColor","uploadHeuristic","child","undefined","bestPos","minmax","callsToMinMax","iaPath","blockCase","offset","i","WHITE","BLACK","blockBoard","emptyBoard","freeSquareOnTheMiddle","getStartBoard","initData","mainData","MIN","MAX","getTreeToPrint","printTree","tree","indentation","prefix","printHeuristic","ctx","images","canvas","printBestNodes","firstCall","document","onkeydown","e","key","ia"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/tools/ia/ia.js"],"sourcesContent":["import getIaPath from \"./getIaPath\"\n\nconst checkEndGame = (board) => {\n\n    const checkStones = (x, y, board, orientation) => {\n        var nb = 0\n        var color = board[y][x]\n        while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color)nb++\n        while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color)nb++\n        while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n        while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n        if (nb >= 5)\n            return color\n        return false\n    }\n    \n    const checkAlignment = (x, y, board) => {\n        var winner\n        if (\n            (winner = checkStones(x, y, board, 'vertical')) ||\n            (winner = checkStones(x, y, board, 'horizontal')) ||\n            (winner = checkStones(x, y, board, 'diagonal1')) ||\n            (winner = checkStones(x, y, board, 'diagonal2'))\n        )\n            return winner\n        return false\n    }\n    \n    const checkWinner = (board) => {\n        var winner\n        for (var y = 0; y < 19; y++){\n            for (var x = 0; x < 19; x++){\n                if (board[y][x] && (winner = checkAlignment(x, y, board)))\n                    return winner\n            }\n        }\n        return false\n    }\n\n    var winner = checkWinner(board)\n    if (winner)\n        return winner\n    return false\n}\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board[y][x]\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst singleStonesHeuristic = board => {\n    var heuristic = 0\n    var localHeuristic\n    var freeNeighbour\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                localHeuristic = 10\n                freeNeighbour = 1\n                if (y - 1 >= 0 && !board[y - 1][x])\n                    freeNeighbour += 1\n                if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && !board[y][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && !board[y + 1][x])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && !board[y][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n                localHeuristic *= freeNeighbour\n                if (localHeuristic > 10)\n                {\n                    if (board[y][x] === data.iaColor)\n                        heuristic += localHeuristic\n                    else\n                        heuristic -= localHeuristic\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getNeighbour1 = (x, y, board, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x]) ||\n        (orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1]) ||\n        (orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) ||\n        (orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1])\n    )\n        return 1\n    return 0\n}\n\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x]) ||\n        (orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb]) ||\n        (orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb]) ||\n        (orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb])\n    )\n        return 1\n    return 0\n}\n\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL){\n        checkedBoard[y][x] = data.VERTICAL\n        nb++\n        y++\n    }\n    return nb\n}\n\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL){\n        checkedBoard[y][x] = data.HORIZONTAL\n        nb++\n        x++\n    }\n    return nb\n}\n\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1){\n        checkedBoard[y][x] = data.DIAGONAL1\n        nb++\n        x++\n        y++\n    }\n    return nb\n}\n\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2){\n        checkedBoard[y][x] = data.DIAGONAL2\n        nb++\n        x--\n        y++\n    }\n    return nb\n}\n\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n    var nb = 0\n    var color = board[y][x]\n    var neighbour1 = getNeighbour1(x, y, board, orientation)\n    var saveX = x\n    var saveY = y\n    if (orientation === data.VERTICAL)\n        nb = checkVerticalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.HORIZONTAL)\n        nb = checkHorizontalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL1)\n        nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL2)\n        nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard)\n    if (nb > 1){\n        var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation)\n        if (nb < 5 && !neighbour1 && !neighbour2)\n            return false\n        return {\n            nb,\n            neighbour1,\n            neighbour2\n        }\n    }\n    return false\n}\n\nconst checkAlignment = (x, y, board, checkedBoard) => {\n    var alignment = []\n    var ret\n    for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++){\n        if ((ret = checkStones(x, y, board, c, checkedBoard)))\n            alignment.push(ret)\n    }\n    return alignment\n}\n\nconst initCheckedBoard = () => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = 0\n        }\n    }\n    return res\n}\n\nconst alignmentsHeuristic = (board) => {\n    var heuristic = 0\n    var alignment\n    var checkedBoard = initCheckedBoard()\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] && board[y][x] !== data.FORBIDDEN){\n                alignment = checkAlignment(x, y, board, checkedBoard)\n                for (var c = 0; c < alignment.length; c++){\n                    if (board[y][x] === data.iaColor){\n                        // if (alignment[c].nb >= 5)\n                        //     heuristic += Infinity\n                        // else\n                            heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    }\n                    else{\n                        // if (alignment[c].nb >= 5)\n                        //     heuristic -= Infinity\n                        // else\n                            heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    }\n                }\n            }\n        }\n    }\n    if (!heuristic && heuristic !== 0)\n        console.log('OOUUUPS ! NaN')\n    return heuristic\n}\n\nconst getHeuristic = (node) => {\n    const start = Date.now();\n    data.nbLeaves += 1 // TMP\n    var board = getBoard(node)\n    var h1 = singleStonesHeuristic(board)\n    var h2 = alignmentsHeuristic(board)\n    const end = Date.now()\n    data.heuristicTime += end - start\n    return h1 + h2\n}\n\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n    if ((data.depth % 2) === (depth % 2)){\n        if (node[nbNode].heuristic > node.alpha)\n            node.alpha = node[nbNode].heuristic\n    }\n    else{\n        if ((node[nbNode].heuristic < node.beta))\n            node.beta = node[nbNode].heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst getChild = (pos, node, depth, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\n// const uploadHeuristic = (depth, node) => {\n//     var bestMove\n//     if ((data.depth % 2) !== (depth % 2))\n//         bestMove = getBestMove(node, data.MIN, depth)\n//     else\n//         bestMove = getBestMove(node, data.MAX, depth)\n//     node.heuristic = bestMove.heuristic\n//     if (depth === data.depth)\n//         return {x : bestMove.x, y : bestMove.y}\n//     return false\n// }\n\n// const uploadHeuristic = (depth, node) => {\n//     var bestMove\n//     if ((data.depth % 2) !== (depth % 2)){\n//         bestMove = getBestMove(node, data.MIN, depth)\n//         if (bestMove.heuristic < node.heuristic)\n//             node.heuristic = bestMove.heuristic\n//     }\n//     else{\n//         bestMove = getBestMove(node, data.MAX, depth)\n//         if (bestMove.heuristic > node.heuristic)\n//             node.heuristic = bestMove.heuristic\n//     }\n//     if (depth === data.depth){\n//         node.heuristic = bestMove.heuristic\n//         return {x : bestMove.x, y : bestMove.y}\n//     }\n//     return false\n// }\n\n// const minmax = (node, depth) => {\n//     data.callsToMinMax += 1\n//     var nbNode = 0\n//     var color = (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n//     for (var c = 0; c < data.iaPath.length; c++){\n//         if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n//             node[nbNode] = getChild(data.iaPath[c], node, depth, color)\n//             if (depth > 1)\n//                 minmax(node[nbNode], depth - 1)\n//             else\n//                 node[nbNode].heuristic = getHeuristic(node[nbNode])\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 break\n//             nbNode++\n//         }\n//     }\n//     var bestMove\n//     if ((bestMove = uploadHeuristic(depth, node)))\n//         return {x : bestMove.x, y : bestMove.y}\n// }\n\nconst cancelForward = (node, depth) => {\n    var endGame = checkEndGame(getBoard(node))\n    if (endGame === data.iaColor){\n        node.heuristic = Infinity\n        return true\n    }\n    if (endGame === data.playerColor){\n        node.heuristic = -Infinity\n        return true\n    }\n    return false\n}\n\nconst uploadHeuristic = (node, child, depth) => {\n    if (data.depth % 2 === depth % 2){\n        if (node.heuristic === undefined || child.heuristic > node.heuristic){\n            node.heuristic = child.heuristic\n            if (data.depth === depth){\n                node.bestPos = {\n                    x : child.x,\n                    y : child.y\n                }\n            }\n        }\n    }\n    else{\n        if (node.heuristic === undefined || child.heuristic < node.heuristic)\n            node.heuristic = child.heuristic\n    }\n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var color = data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor\n    if (cancelForward(node, depth))\n        return\n    for (var c = 0; c < data.iaPath.length; c++){\n        if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n            node[nbNode] = getChild(data.iaPath[c], node, depth, color)\n            if (depth > 1)\n                minmax(node[nbNode], depth - 1)\n            else\n                node[nbNode].heuristic = getHeuristic(node[nbNode])\n            uploadHeuristic(node, node[nbNode], depth)\n            if (getAlphaBetaPruning(node, depth, nbNode))\n                break\n            // node[nbNode] = undefined // WORKS BUT USELESS FOR THE MOMENT\n            nbNode++\n        }\n    }\n    // var bestMove\n    // if ((bestMove = uploadHeuristic(depth, node)))\n    //     return {x : bestMove.x, y : bestMove.y}\n}\n\nconst blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            if (\n                (\n                    pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 &&\n                    (board[pos[0].y][pos[0].x] === data.WHITE || board[pos[0].y][pos[0].x] === data.BLACK)\n                ) ||\n                (\n                    pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 &&\n                    (board[pos[1].y][pos[1].x] === data.WHITE || board[pos[1].y][pos[1].x] === data.BLACK)\n                ) ||\n                (\n                    pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 &&\n                    (board[pos[2].y][pos[2].x] === data.WHITE || board[pos[2].y][pos[2].x] === data.BLACK)\n                ) ||\n                (\n                    pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 &&\n                    (board[pos[3].y][pos[3].x] === data.WHITE || board[pos[3].y][pos[3].x] === data.BLACK)\n                )\n            )\n                    return false\n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n            \n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && blockCase(x, y, board, offset))\n                board[y][x] = data.FORBIDDEN\n        }\n    }\n}\n\nconst emptyBoard = board => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] !== data.FORBIDDEN)\n                return false\n        }\n    }\n    return true\n}\n\nconst freeSquareOnTheMiddle = board => { // IMPLEMENTER POUR LE CAS OÙ LE BOARD EST FULL ET RETIRER CETTE FONCTION !!!!!!\n    for (var y = 6; y < 12; y++){\n        for (var x = 6; x < 12; x++){\n            board[y][x] = 0\n        }\n    }\n}\n\nconst getStartBoard = (board, offset) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, offset)\n    if (emptyBoard(res))\n        freeSquareOnTheMiddle(res)\n    return res\n}\n\nconst initData = (mainData) => {\n    data = {}\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = mainData.playerColor\n    data.iaColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n    data.board = mainData.board\n    data.iaPath = getIaPath(mainData.board)\n    data.depth = 3\n    data.heuristicTime = 0 // TMP\n}\n\nconst getTreeToPrint = (node, depth) => {\n    var nbNode = 0\n    var res = {}\n    res.heuristic = node.heuristic\n    res.x = node.x\n    res.y = node.y\n    while (node[nbNode]){\n        if (depth > 0)\n            res[nbNode] = getTreeToPrint(node[nbNode], depth - 1)\n        nbNode += 1\n    }\n    return res\n}\n\nconst printTree = (tree, indentation) => {\n    var nbNode = 0\n    var prefix = ''\n    for (var c = 0; c < indentation; c++){\n        prefix += '----'\n    }\n    console.log(`${prefix}(${tree.heuristic})`)\n    while (tree[nbNode]){\n        printTree(tree[nbNode], indentation + 1)\n        nbNode++\n    }\n}\n\nconst printHeuristic = (ctx, images, canvas, tree) => {\n\n    const printBestNodes = (node, firstCall) => {\n        if (firstCall){\n            console.log(node.heuristic)\n            console.log('CHILDS POSITIONS :')\n        }\n        else\n            console.log('x:', node.x, 'y:', node.y)\n        var nbNode = 0\n        while (node[nbNode] && node[nbNode].heuristic !== node.heuristic)\n            nbNode++\n        if (node[nbNode])\n            printBestNodes(node[nbNode])\n    }\n\n    var c = -1\n    document.onkeydown = e => {\n        if (e.key !== 'Enter')\n            return\n        var board = []\n        for (var y = 0; y < 19; y++){\n            board[y] = []\n            for (var x = 0; x < 19; x++){\n                board[y][x] = data.board[y][x]\n            }\n        }\n        printBestNodes(tree, 1)\n    }\n}\n\nconst ia = (board, mainData, images) => {\n    initData(board, mainData)\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    minmax(tree, data.depth)\n    console.log(`heuristic time: data.heuristicTime`)\n    var pos = {...tree.bestPos}\n    data = undefined\n    return tree.bestPos\n}\n// PENSER À TOUT FREE À LA FIN !!\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}