{"ast":null,"code":"// const checkVerticalAlignment = (x, y, board, playerColor) => {\n//     var nb = 0\n//     var color = board[y][x]\n//     while (y < 19 && nb < 5 && board[y][x] === color){\n//         y++\n//         nb++\n//     }\n//     if (nb === 5)\n//         return color === playerColor ? 'human' : 'ia'\n//     return false\n// }\n\n// const checkHorizontalAlignment = (x, y, board, playerColor) => {\n//     var nb = 0\n//     var color = board[y][x]\n//     while (x < 19 && nb < 5 && board[y][x] === color){\n//         x++\n//         nb++\n//     }\n//     if (nb === 5)\n//         return color === playerColor ? 'human' : 'ia'\n//     return false\n// }\n\n// const checkDiagonalAlignment1 = (x, y, board, playerColor) => {\n//     var nb = 0\n//     var color = board[y][x]\n//     while (x < 19 && y < 19 && nb < 5 && board[y][x] === color){\n//         x++\n//         y++\n//         nb++\n//     }\n//     if (nb === 5)\n//         return color === playerColor ? 'human' : 'ia'\n//     return false\n// }\n\n// const checkDiagonalAlignment2 = (x, y, board, playerColor) => {\n//     var nb = 0\n//     var color = board[y][x]\n//     while (x >= 0 && y < 19 && nb < 5 && board[y][x] === color){\n//         x--\n//         y++\n//         nb++\n//     }\n//     if (nb === 5)\n//         return color === playerColor ? 'human' : 'ia'\n//     return false\n// }\n\nconst checkStones = (x, y, board, playerColor, orientation) => {\n  var nb = 0;\n  var color = board[y][x];\n  while (orientation === 'vertical' && y < 19 && nb++ < 5 && board[y][x] === color) y++;\n  while (orientation === 'horizontal' && x < 19 && nb++ < 5 && board[y][x] === color) x++;\n  while (orientation === 'diagonal1' && x < 19 && y < 19 && nb++ < 5 && board[y][x] === color) {\n    x++;\n    y++;\n  }\n  while (orientation === 'diagonal2' && x >= 0 && y < 19 && nb++ < 5 && board[y][x] === color) {\n    x--;\n    y++;\n    nb++;\n  }\n  if (nb === 5) return color === playerColor ? 'human' : 'ia';\n  return false;\n};\nconst checkAlignment = (x, y, board, playerColor) => {\n  var winner;\n  if (winner = checkStones(x, y, board, playerColor, 'vertical')) return winner;\n  if (winner = checkStones(x, y, board, playerColor, 'horizontal')) return winner;\n  if (winner = checkStones(x, y, board, playerColor, 'diagonal1')) return winner;\n  if (winner = checkStones(x, y, board, playerColor, 'diagonal2')) return winner;\n  return false;\n};\nconst checkWinner = (data, playerColor) => {\n  var winner;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (data.board[y][x] && (winner = checkAlignment(x, y, data.board, playerColor))) return winner;\n    }\n  }\n  return false;\n};\nconst checkEndGame = (data, playerColor) => {\n  var winner = checkWinner(data, playerColor);\n  if (winner) return winner;\n  if (data.piecesOnBoard === 19 * 19) return 'draw';\n  return false;\n};\nexport default checkEndGame;","map":{"version":3,"names":["checkStones","x","y","board","playerColor","orientation","nb","color","checkAlignment","winner","checkWinner","data","checkEndGame","piecesOnBoard"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/checkEndGame.js"],"sourcesContent":["// const checkVerticalAlignment = (x, y, board, playerColor) => {\n//     var nb = 0\n//     var color = board[y][x]\n//     while (y < 19 && nb < 5 && board[y][x] === color){\n//         y++\n//         nb++\n//     }\n//     if (nb === 5)\n//         return color === playerColor ? 'human' : 'ia'\n//     return false\n// }\n\n// const checkHorizontalAlignment = (x, y, board, playerColor) => {\n//     var nb = 0\n//     var color = board[y][x]\n//     while (x < 19 && nb < 5 && board[y][x] === color){\n//         x++\n//         nb++\n//     }\n//     if (nb === 5)\n//         return color === playerColor ? 'human' : 'ia'\n//     return false\n// }\n\n// const checkDiagonalAlignment1 = (x, y, board, playerColor) => {\n//     var nb = 0\n//     var color = board[y][x]\n//     while (x < 19 && y < 19 && nb < 5 && board[y][x] === color){\n//         x++\n//         y++\n//         nb++\n//     }\n//     if (nb === 5)\n//         return color === playerColor ? 'human' : 'ia'\n//     return false\n// }\n\n// const checkDiagonalAlignment2 = (x, y, board, playerColor) => {\n//     var nb = 0\n//     var color = board[y][x]\n//     while (x >= 0 && y < 19 && nb < 5 && board[y][x] === color){\n//         x--\n//         y++\n//         nb++\n//     }\n//     if (nb === 5)\n//         return color === playerColor ? 'human' : 'ia'\n//     return false\n// }\n\nconst checkStones = (x, y, board, playerColor, orientation) => {\n    var nb = 0\n    var color = board[y][x]\n    while (orientation === 'vertical' && y < 19 && nb++ < 5 && board[y][x] === color)\n        y++\n    while (orientation === 'horizontal' && x < 19 && nb++ < 5 && board[y][x] === color)\n        x++\n    while (orientation === 'diagonal1' && x < 19 && y < 19 && nb++ < 5 && board[y][x] === color){\n        x++\n        y++\n    }\n    while (orientation === 'diagonal2' && x >= 0 && y < 19 && nb++ < 5 && board[y][x] === color){\n        x--\n        y++\n        nb++\n    }\n    if (nb === 5)\n        return color === playerColor ? 'human' : 'ia'\n    return false\n}\n\nconst checkAlignment = (x, y, board, playerColor) => {\n    var winner\n    if ((winner = checkStones(x, y, board, playerColor, 'vertical')))\n        return winner\n    if ((winner = checkStones(x, y, board, playerColor, 'horizontal')))\n        return winner\n    if ((winner = checkStones(x, y, board, playerColor, 'diagonal1')))\n        return winner\n    if ((winner = checkStones(x, y, board, playerColor, 'diagonal2')))\n        return winner\n    return false\n}\n\nconst checkWinner = (data, playerColor) => {\n    var winner\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (data.board[y][x] && (winner = checkAlignment(x, y, data.board, playerColor)))\n                return winner\n        }\n    }\n    return false\n}\n\nconst checkEndGame = (data, playerColor) => {\n    var winner = checkWinner(data, playerColor)\n    if (winner)\n        return winner\n    if (data.piecesOnBoard === 19*19)\n        return 'draw'\n    return false\n}\n\nexport default checkEndGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}