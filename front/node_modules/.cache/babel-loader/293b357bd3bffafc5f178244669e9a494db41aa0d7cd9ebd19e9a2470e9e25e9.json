{"ast":null,"code":"import { freeBufferMemory, getBoard } from \"./tools\";\nconst getAlignmentValue = (neighbour1, neighbour2, sizeAlignment, data) => {\n  var h;\n  if (neighbour1 && neighbour2) {\n    if (sizeAlignment === 2) h += data.heuristic.align2Free;else if (sizeAlignment === 3) h += data.heuristic.align3Free;else if (sizeAlignment === 4) h += data.heuristic.align4Free;else h += data.heuristic.align5;\n  } else {\n    if (sizeAlignment === 2) h += data.heuristic.align2;else if (sizeAlignment === 3) h += data.heuristic.align3;else if (sizeAlignment === 4) h += data.heuristic.align4;else h += data.heuristic.align5;\n  }\n  return h;\n};\nconst verticalAlignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.y -= 1;\n  }\n  if (pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.y += 1;\n  while (pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst horizontalAlignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n  }\n  if (pos.x >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  while (pos.x < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst diagonal1Alignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y -= 1;\n  }\n  if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  pos.y += 1;\n  while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst diagonal2Alignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y -= 1;\n  }\n  if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x -= 1;\n  pos.y += 1;\n  while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst checkAlignments = (board, node, data) => {\n  var h = 0;\n  h += verticalAlignment(board, node, data);\n  h += horizontalAlignment(board, node, data);\n  h += diagonal1Alignment(board, node, data);\n  h += diagonal2Alignment(board, node, data);\n  if (node.color === data.aiColor) return h;\n  return -h;\n};\nconst getBlockingValue = (lengthBlocking, data) => {\n  if (lengthBlocking === 0) return 0;\n  if (lengthBlocking === 1) return data.heuristic.block1;\n  if (lengthBlocking === 2) return data.heuristic.block2;\n  if (lengthBlocking === 3) return data.heuristic.block3;\n  return data.heuristic.block4;\n};\nconst verticalBlocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking;\n  var x = node.x;\n  var y = node.y;\n  var saveX = x;\n  while (x - 1 >= 0 && board[y][x - 1] === color) {\n    x--;\n    lengthBlocking += 1;\n  }\n  x = saveX;\n  while (x + 1 < 19 && board[y][x + 1] === color) {\n    x++;\n    lengthBlocking += 1;\n  }\n  return getBlockingValue(lengthBlocking, data);\n};\nconst checkBlockings = (board, node, data) => {\n  var h = 0;\n  h += verticalBlocking(board, node, data);\n  if (node.color === data.aiColor) return h;\n  return -h;\n};\nconst getHeuristic = (node, data) => {\n  var heuristic = 0;\n  getBoard(node, data.bufferMemory);\n  heuristic += checkAlignments(data.bufferMemory, node, data);\n  heuristic += checkBlockings(data.bufferMemory, node, data);\n  freeBufferMemory(node, data.bufferMemory);\n};\nexport default getHeuristic;","map":{"version":3,"names":["freeBufferMemory","getBoard","getAlignmentValue","neighbour1","neighbour2","sizeAlignment","data","h","heuristic","align2Free","align3Free","align4Free","align5","align2","align3","align4","verticalAlignment","board","node","color","pos","x","y","horizontalAlignment","diagonal1Alignment","diagonal2Alignment","checkAlignments","aiColor","getBlockingValue","lengthBlocking","block1","block2","block3","block4","verticalBlocking","BLACK","WHITE","saveX","checkBlockings","getHeuristic","bufferMemory"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/heuristic3.js"],"sourcesContent":["import { freeBufferMemory, getBoard } from \"./tools\"\n\nconst getAlignmentValue = (neighbour1, neighbour2, sizeAlignment, data) => {\n    var h\n    if (neighbour1 && neighbour2){\n        if (sizeAlignment === 2)\n            h += data.heuristic.align2Free\n        else if (sizeAlignment === 3)\n            h += data.heuristic.align3Free\n        else if (sizeAlignment === 4)\n            h += data.heuristic.align4Free\n        else\n            h += data.heuristic.align5\n    }\n    else{\n        if (sizeAlignment === 2)\n            h += data.heuristic.align2\n        else if (sizeAlignment === 3)\n            h += data.heuristic.align3\n        else if (sizeAlignment === 4)\n            h += data.heuristic.align4\n        else\n            h += data.heuristic.align5\n    }\n    return h\n}\n\nconst verticalAlignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.y -= 1\n    }\n    if (pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.y += 1\n    while (pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst horizontalAlignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n    }\n    if (pos.x >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    while (pos.x < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst diagonal1Alignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y -= 1\n    }\n    if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    pos.y += 1\n    while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst diagonal2Alignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y -= 1\n    }\n    if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x -= 1\n    pos.y += 1\n    while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst checkAlignments = (board, node, data) => {\n    var h = 0\n\n    h += verticalAlignment(board, node, data)\n    h += horizontalAlignment(board, node, data)\n    h += diagonal1Alignment(board, node, data)\n    h += diagonal2Alignment(board, node, data)\n    if (node.color === data.aiColor)\n        return h\n    return -h\n}\n\nconst getBlockingValue = (lengthBlocking, data) => {\n    if (lengthBlocking === 0)\n        return 0\n    if (lengthBlocking === 1)\n        return data.heuristic.block1\n    if (lengthBlocking === 2)\n        return data.heuristic.block2\n    if (lengthBlocking === 3)\n        return data.heuristic.block3\n    return data.heuristic.block4\n}\n\nconst verticalBlocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking\n    var x = node.x\n    var y = node.y\n    var saveX = x\n    while (x - 1 >= 0 && board[y][x - 1] === color){\n        x--\n        lengthBlocking += 1\n    }\n    x = saveX\n    while (x + 1 < 19 && board[y][x + 1] === color){\n        x++\n        lengthBlocking += 1\n    }\n    return getBlockingValue(lengthBlocking, data)\n}\n\nconst checkBlockings = (board, node, data) => {\n    var h = 0\n    h += verticalBlocking(board, node, data)\n    if (node.color === data.aiColor)\n        return h\n    return -h\n}\n\nconst getHeuristic = (node, data) => {\n    var heuristic = 0\n    getBoard(node, data.bufferMemory)\n    heuristic += checkAlignments(data.bufferMemory, node, data)\n    heuristic += checkBlockings(data.bufferMemory, node, data)\n    freeBufferMemory(node, data.bufferMemory)\n}\n\nexport default getHeuristic"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,QAAQ,QAAQ,SAAS;AAEpD,MAAMC,iBAAiB,GAAG,CAACC,UAAU,EAAEC,UAAU,EAAEC,aAAa,EAAEC,IAAI,KAAK;EACvE,IAAIC,CAAC;EACL,IAAIJ,UAAU,IAAIC,UAAU,EAAC;IACzB,IAAIC,aAAa,KAAK,CAAC,EACnBE,CAAC,IAAID,IAAI,CAACE,SAAS,CAACC,UAAU,MAC7B,IAAIJ,aAAa,KAAK,CAAC,EACxBE,CAAC,IAAID,IAAI,CAACE,SAAS,CAACE,UAAU,MAC7B,IAAIL,aAAa,KAAK,CAAC,EACxBE,CAAC,IAAID,IAAI,CAACE,SAAS,CAACG,UAAU,MAE9BJ,CAAC,IAAID,IAAI,CAACE,SAAS,CAACI,MAAM;EAClC,CAAC,MACG;IACA,IAAIP,aAAa,KAAK,CAAC,EACnBE,CAAC,IAAID,IAAI,CAACE,SAAS,CAACK,MAAM,MACzB,IAAIR,aAAa,KAAK,CAAC,EACxBE,CAAC,IAAID,IAAI,CAACE,SAAS,CAACM,MAAM,MACzB,IAAIT,aAAa,KAAK,CAAC,EACxBE,CAAC,IAAID,IAAI,CAACE,SAAS,CAACO,MAAM,MAE1BR,CAAC,IAAID,IAAI,CAACE,SAAS,CAACI,MAAM;EAClC;EACA,OAAOL,CAAC;AACZ,CAAC;AAED,MAAMS,iBAAiB,GAAG,CAACC,KAAK,EAAEC,IAAI,EAAEZ,IAAI,KAAK;EAC7C,IAAIa,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB,IAAIC,GAAG,GAAG;IAACC,CAAC,EAAGH,IAAI,CAACG,CAAC;IAAEC,CAAC,EAAGJ,IAAI,CAACI;EAAC,CAAC;EAClC,IAAInB,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOe,GAAG,CAACE,CAAC,IAAI,CAAC,IAAIL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC/CC,GAAG,CAACE,CAAC,IAAI,CAAC;EACd;EACA,IAAIF,GAAG,CAACE,CAAC,IAAI,CAAC,IAAI,CAACL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,EAClClB,UAAU,GAAG,CAAC;EAClBiB,GAAG,CAACE,CAAC,IAAI,CAAC;EACV,OAAOF,GAAG,CAACE,CAAC,GAAG,EAAE,IAAIL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC/CC,GAAG,CAACE,CAAC,IAAI,CAAC;IACVjB,aAAa,IAAI,CAAC;EACtB;EACA,IAAIe,GAAG,CAACE,CAAC,GAAG,EAAE,IAAI,CAACL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,EAClCjB,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC,IAAK,CAACF,UAAU,IAAI,CAACC,UAAW,EACjD,OAAO,CAAC;EACZ,OAAOF,iBAAiB,CAACC,UAAU,EAAEC,UAAU,EAAEC,aAAa,EAAEC,IAAI,CAAC;AACzE,CAAC;AAED,MAAMiB,mBAAmB,GAAG,CAACN,KAAK,EAAEC,IAAI,EAAEZ,IAAI,KAAK;EAC/C,IAAIa,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB,IAAIC,GAAG,GAAG;IAACC,CAAC,EAAGH,IAAI,CAACG,CAAC;IAAEC,CAAC,EAAGJ,IAAI,CAACI;EAAC,CAAC;EAClC,IAAInB,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOe,GAAG,CAACC,CAAC,IAAI,CAAC,IAAIJ,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC/CC,GAAG,CAACC,CAAC,IAAI,CAAC;EACd;EACA,IAAID,GAAG,CAACC,CAAC,IAAI,CAAC,IAAI,CAACJ,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,EAClClB,UAAU,GAAG,CAAC;EAClBiB,GAAG,CAACC,CAAC,IAAI,CAAC;EACV,OAAOD,GAAG,CAACC,CAAC,GAAG,EAAE,IAAIJ,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC/CC,GAAG,CAACC,CAAC,IAAI,CAAC;IACVhB,aAAa,IAAI,CAAC;EACtB;EACA,IAAIe,GAAG,CAACC,CAAC,GAAG,EAAE,IAAI,CAACJ,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,EAClCjB,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC,IAAK,CAACF,UAAU,IAAI,CAACC,UAAW,EACjD,OAAO,CAAC;EACZ,OAAOF,iBAAiB,CAACC,UAAU,EAAEC,UAAU,EAAEC,aAAa,EAAEC,IAAI,CAAC;AACzE,CAAC;AAED,MAAMkB,kBAAkB,GAAG,CAACP,KAAK,EAAEC,IAAI,EAAEZ,IAAI,KAAK;EAC9C,IAAIa,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB,IAAIC,GAAG,GAAG;IAACC,CAAC,EAAGH,IAAI,CAACG,CAAC;IAAEC,CAAC,EAAGJ,IAAI,CAACI;EAAC,CAAC;EAClC,IAAInB,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOe,GAAG,CAACC,CAAC,IAAI,CAAC,IAAID,GAAG,CAACE,CAAC,IAAI,CAAC,IAAIL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC7DC,GAAG,CAACC,CAAC,IAAI,CAAC;IACVD,GAAG,CAACE,CAAC,IAAI,CAAC;EACd;EACA,IAAIF,GAAG,CAACC,CAAC,IAAI,CAAC,IAAID,GAAG,CAACE,CAAC,IAAI,CAAC,IAAI,CAACL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,EAChDlB,UAAU,GAAG,CAAC;EAClBiB,GAAG,CAACC,CAAC,IAAI,CAAC;EACVD,GAAG,CAACE,CAAC,IAAI,CAAC;EACV,OAAOF,GAAG,CAACC,CAAC,GAAG,EAAE,IAAID,GAAG,CAACE,CAAC,GAAG,EAAE,IAAIL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC7DC,GAAG,CAACC,CAAC,IAAI,CAAC;IACVD,GAAG,CAACE,CAAC,IAAI,CAAC;IACVjB,aAAa,IAAI,CAAC;EACtB;EACA,IAAIe,GAAG,CAACC,CAAC,GAAG,EAAE,IAAID,GAAG,CAACE,CAAC,GAAG,EAAE,IAAI,CAACL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,EAChDjB,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC,IAAK,CAACF,UAAU,IAAI,CAACC,UAAW,EACjD,OAAO,CAAC;EACZ,OAAOF,iBAAiB,CAACC,UAAU,EAAEC,UAAU,EAAEC,aAAa,EAAEC,IAAI,CAAC;AACzE,CAAC;AAED,MAAMmB,kBAAkB,GAAG,CAACR,KAAK,EAAEC,IAAI,EAAEZ,IAAI,KAAK;EAC9C,IAAIa,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB,IAAIC,GAAG,GAAG;IAACC,CAAC,EAAGH,IAAI,CAACG,CAAC;IAAEC,CAAC,EAAGJ,IAAI,CAACI;EAAC,CAAC;EAClC,IAAInB,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOe,GAAG,CAACC,CAAC,GAAG,EAAE,IAAID,GAAG,CAACE,CAAC,IAAI,CAAC,IAAIL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC7DC,GAAG,CAACC,CAAC,IAAI,CAAC;IACVD,GAAG,CAACE,CAAC,IAAI,CAAC;EACd;EACA,IAAIF,GAAG,CAACC,CAAC,GAAG,EAAE,IAAID,GAAG,CAACE,CAAC,IAAI,CAAC,IAAI,CAACL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,EAChDlB,UAAU,GAAG,CAAC;EAClBiB,GAAG,CAACC,CAAC,IAAI,CAAC;EACVD,GAAG,CAACE,CAAC,IAAI,CAAC;EACV,OAAOF,GAAG,CAACC,CAAC,IAAI,CAAC,IAAID,GAAG,CAACE,CAAC,GAAG,EAAE,IAAIL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC7DC,GAAG,CAACC,CAAC,IAAI,CAAC;IACVD,GAAG,CAACE,CAAC,IAAI,CAAC;IACVjB,aAAa,IAAI,CAAC;EACtB;EACA,IAAIe,GAAG,CAACC,CAAC,IAAI,CAAC,IAAID,GAAG,CAACE,CAAC,GAAG,EAAE,IAAI,CAACL,KAAK,CAACG,GAAG,CAACE,CAAC,CAAC,CAACF,GAAG,CAACC,CAAC,CAAC,EAChDjB,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC,IAAK,CAACF,UAAU,IAAI,CAACC,UAAW,EACjD,OAAO,CAAC;EACZ,OAAOF,iBAAiB,CAACC,UAAU,EAAEC,UAAU,EAAEC,aAAa,EAAEC,IAAI,CAAC;AACzE,CAAC;AAED,MAAMoB,eAAe,GAAG,CAACT,KAAK,EAAEC,IAAI,EAAEZ,IAAI,KAAK;EAC3C,IAAIC,CAAC,GAAG,CAAC;EAETA,CAAC,IAAIS,iBAAiB,CAACC,KAAK,EAAEC,IAAI,EAAEZ,IAAI,CAAC;EACzCC,CAAC,IAAIgB,mBAAmB,CAACN,KAAK,EAAEC,IAAI,EAAEZ,IAAI,CAAC;EAC3CC,CAAC,IAAIiB,kBAAkB,CAACP,KAAK,EAAEC,IAAI,EAAEZ,IAAI,CAAC;EAC1CC,CAAC,IAAIkB,kBAAkB,CAACR,KAAK,EAAEC,IAAI,EAAEZ,IAAI,CAAC;EAC1C,IAAIY,IAAI,CAACC,KAAK,KAAKb,IAAI,CAACqB,OAAO,EAC3B,OAAOpB,CAAC;EACZ,OAAO,CAACA,CAAC;AACb,CAAC;AAED,MAAMqB,gBAAgB,GAAG,CAACC,cAAc,EAAEvB,IAAI,KAAK;EAC/C,IAAIuB,cAAc,KAAK,CAAC,EACpB,OAAO,CAAC;EACZ,IAAIA,cAAc,KAAK,CAAC,EACpB,OAAOvB,IAAI,CAACE,SAAS,CAACsB,MAAM;EAChC,IAAID,cAAc,KAAK,CAAC,EACpB,OAAOvB,IAAI,CAACE,SAAS,CAACuB,MAAM;EAChC,IAAIF,cAAc,KAAK,CAAC,EACpB,OAAOvB,IAAI,CAACE,SAAS,CAACwB,MAAM;EAChC,OAAO1B,IAAI,CAACE,SAAS,CAACyB,MAAM;AAChC,CAAC;AAED,MAAMC,gBAAgB,GAAG,CAACjB,KAAK,EAAEC,IAAI,EAAEZ,IAAI,KAAK;EAC5C,IAAIa,KAAK,GAAGD,IAAI,CAACC,KAAK,KAAKb,IAAI,CAAC6B,KAAK,GAAG7B,IAAI,CAAC8B,KAAK,GAAG9B,IAAI,CAAC6B,KAAK;EAC/D,IAAIN,cAAc;EAClB,IAAIR,CAAC,GAAGH,IAAI,CAACG,CAAC;EACd,IAAIC,CAAC,GAAGJ,IAAI,CAACI,CAAC;EACd,IAAIe,KAAK,GAAGhB,CAAC;EACb,OAAOA,CAAC,GAAG,CAAC,IAAI,CAAC,IAAIJ,KAAK,CAACK,CAAC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC3CE,CAAC,EAAE;IACHQ,cAAc,IAAI,CAAC;EACvB;EACAR,CAAC,GAAGgB,KAAK;EACT,OAAOhB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAIJ,KAAK,CAACK,CAAC,CAAC,CAACD,CAAC,GAAG,CAAC,CAAC,KAAKF,KAAK,EAAC;IAC3CE,CAAC,EAAE;IACHQ,cAAc,IAAI,CAAC;EACvB;EACA,OAAOD,gBAAgB,CAACC,cAAc,EAAEvB,IAAI,CAAC;AACjD,CAAC;AAED,MAAMgC,cAAc,GAAG,CAACrB,KAAK,EAAEC,IAAI,EAAEZ,IAAI,KAAK;EAC1C,IAAIC,CAAC,GAAG,CAAC;EACTA,CAAC,IAAI2B,gBAAgB,CAACjB,KAAK,EAAEC,IAAI,EAAEZ,IAAI,CAAC;EACxC,IAAIY,IAAI,CAACC,KAAK,KAAKb,IAAI,CAACqB,OAAO,EAC3B,OAAOpB,CAAC;EACZ,OAAO,CAACA,CAAC;AACb,CAAC;AAED,MAAMgC,YAAY,GAAG,CAACrB,IAAI,EAAEZ,IAAI,KAAK;EACjC,IAAIE,SAAS,GAAG,CAAC;EACjBP,QAAQ,CAACiB,IAAI,EAAEZ,IAAI,CAACkC,YAAY,CAAC;EACjChC,SAAS,IAAIkB,eAAe,CAACpB,IAAI,CAACkC,YAAY,EAAEtB,IAAI,EAAEZ,IAAI,CAAC;EAC3DE,SAAS,IAAI8B,cAAc,CAAChC,IAAI,CAACkC,YAAY,EAAEtB,IAAI,EAAEZ,IAAI,CAAC;EAC1DN,gBAAgB,CAACkB,IAAI,EAAEZ,IAAI,CAACkC,YAAY,CAAC;AAC7C,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}