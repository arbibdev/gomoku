{"ast":null,"code":"import { freeBufferMemory, getBoard } from \"./tools\";\nconst getAlignmentValue = (neighbour1, neighbour2, sizeAlignment, data) => {\n  if (neighbour1 && neighbour2) {\n    if (sizeAlignment === 2) return data.heuristic.align2Free;else if (sizeAlignment === 3) return data.heuristic.align3Free;else if (sizeAlignment === 4) return data.heuristic.align4Free;\n    return data.heuristic.align5;\n  } else {\n    if (sizeAlignment === 2) return data.heuristic.align2;\n    if (sizeAlignment === 3) return data.heuristic.align3;else if (sizeAlignment === 4) h += data.heuristic.align4;else h += data.heuristic.align5;\n  }\n  return h;\n};\nconst verticalAlignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.y -= 1;\n  }\n  if (pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.y += 1;\n  while (pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst horizontalAlignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n  }\n  if (pos.x >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  while (pos.x < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst diagonal1Alignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y -= 1;\n  }\n  if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  pos.y += 1;\n  while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst diagonal2Alignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y -= 1;\n  }\n  if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x -= 1;\n  pos.y += 1;\n  while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst checkAlignments = (board, node, data) => {\n  var h = 0;\n  h += verticalAlignment(board, node, data);\n  h += horizontalAlignment(board, node, data);\n  h += diagonal1Alignment(board, node, data);\n  h += diagonal2Alignment(board, node, data);\n  console.log(h);\n  if (node.color === data.aiColor) return h;\n  return -h;\n};\nconst getBlockingValue = (lengthBlocking, data) => {\n  if (lengthBlocking === 0) return 0;\n  if (lengthBlocking === 1) return data.heuristic.block1;\n  if (lengthBlocking === 2) return data.heuristic.block2;\n  if (lengthBlocking === 3) return data.heuristic.block3;\n  return data.heuristic.block4;\n};\nconst verticalBlocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking;\n  var x = node.x;\n  var y = node.y;\n  var saveY = y;\n  while (y - 1 >= 0 && board[y - 1][x] === color) {\n    y--;\n    lengthBlocking += 1;\n  }\n  y = saveY;\n  while (y + 1 < 19 && board[y + 1][x] === color) {\n    y++;\n    lengthBlocking += 1;\n  }\n  return getBlockingValue(lengthBlocking, data);\n};\nconst horizontalBlocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking;\n  var x = node.x;\n  var y = node.y;\n  var saveX = x;\n  while (x - 1 >= 0 && board[y][x - 1] === color) {\n    x--;\n    lengthBlocking += 1;\n  }\n  x = saveX;\n  while (x + 1 < 19 && board[y][x + 1] === color) {\n    x++;\n    lengthBlocking += 1;\n  }\n  return getBlockingValue(lengthBlocking, data);\n};\nconst diagonal1Blocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking;\n  var x = node.x;\n  var y = node.y;\n  var saveX = x;\n  var saveY = y;\n  while (x - 1 >= 0 && y - 1 >= 0 && board[y - 1][x - 1] === color) {\n    x--;\n    y--;\n    lengthBlocking += 1;\n  }\n  x = saveX;\n  y = saveY;\n  while (x + 1 < 19 && y + 1 < 19 && board[y + 1][x + 1] === color) {\n    x++;\n    y++;\n    lengthBlocking += 1;\n  }\n  return getBlockingValue(lengthBlocking, data);\n};\nconst diagonal2Blocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking;\n  var x = node.x;\n  var y = node.y;\n  var saveX = x;\n  var saveY = y;\n  while (x + 1 >= 0 && y - 1 >= 0 && board[y - 1][x + 1] === color) {\n    x++;\n    y--;\n    lengthBlocking += 1;\n  }\n  x = saveX;\n  y = saveY;\n  while (x - 1 < 19 && y + 1 < 19 && board[y + 1][x - 1] === color) {\n    x--;\n    y++;\n    lengthBlocking += 1;\n  }\n  return getBlockingValue(lengthBlocking, data);\n};\nconst checkBlockings = (board, node, data) => {\n  var h = 0;\n  h += verticalBlocking(board, node, data);\n  h += horizontalBlocking(board, node, data);\n  h += diagonal1Blocking(board, node, data);\n  h += diagonal2Blocking(board, node, data);\n  if (node.color === data.aiColor) return h;\n  return -h;\n};\nconst getHeuristic = (node, data) => {\n  const start = window.performance.now();\n  var heuristic = 0;\n  getBoard(node, data.bufferMemory);\n  heuristic += checkAlignments(data.bufferMemory, node, data);\n  heuristic += checkBlockings(data.bufferMemory, node, data);\n  freeBufferMemory(node, data.bufferMemory);\n  const end = window.performance.now();\n  data.heuristicTime += end - start;\n  return heuristic;\n};\nexport default getHeuristic;","map":{"version":3,"names":["freeBufferMemory","getBoard","getAlignmentValue","neighbour1","neighbour2","sizeAlignment","data","heuristic","align2Free","align3Free","align4Free","align5","align2","align3","h","align4","verticalAlignment","board","node","color","pos","x","y","horizontalAlignment","diagonal1Alignment","diagonal2Alignment","checkAlignments","console","log","aiColor","getBlockingValue","lengthBlocking","block1","block2","block3","block4","verticalBlocking","BLACK","WHITE","saveY","horizontalBlocking","saveX","diagonal1Blocking","diagonal2Blocking","checkBlockings","getHeuristic","start","window","performance","now","bufferMemory","end","heuristicTime"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/heuristic3.js"],"sourcesContent":["import { freeBufferMemory, getBoard } from \"./tools\"\n\nconst getAlignmentValue = (neighbour1, neighbour2, sizeAlignment, data) => {\n    if (neighbour1 && neighbour2){\n        if (sizeAlignment === 2)\n            return data.heuristic.align2Free\n        else if (sizeAlignment === 3)\n            return data.heuristic.align3Free\n        else if (sizeAlignment === 4)\n            return data.heuristic.align4Free\n        return data.heuristic.align5\n    }\n    else{\n        if (sizeAlignment === 2)\n            return data.heuristic.align2\n        if (sizeAlignment === 3)\n            return data.heuristic.align3\n        else if (sizeAlignment === 4)\n            h += data.heuristic.align4\n        else\n            h += data.heuristic.align5\n    }\n    return h\n}\n\nconst verticalAlignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.y -= 1\n    }\n    if (pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.y += 1\n    while (pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst horizontalAlignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n    }\n    if (pos.x >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    while (pos.x < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst diagonal1Alignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y -= 1\n    }\n    if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    pos.y += 1\n    while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst diagonal2Alignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y -= 1\n    }\n    if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x -= 1\n    pos.y += 1\n    while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst checkAlignments = (board, node, data) => {\n    var h = 0\n    h += verticalAlignment(board, node, data)\n    h += horizontalAlignment(board, node, data)\n    h += diagonal1Alignment(board, node, data)\n    h += diagonal2Alignment(board, node, data)\n    console.log(h)\n    if (node.color === data.aiColor)\n        return h\n    return -h\n}\n\nconst getBlockingValue = (lengthBlocking, data) => {\n    if (lengthBlocking === 0)\n        return 0\n    if (lengthBlocking === 1)\n        return data.heuristic.block1\n    if (lengthBlocking === 2)\n        return data.heuristic.block2\n    if (lengthBlocking === 3)\n        return data.heuristic.block3\n    return data.heuristic.block4\n}\n\nconst verticalBlocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking\n    var x = node.x\n    var y = node.y\n    var saveY = y\n    while (y - 1 >= 0 && board[y - 1][x] === color){\n        y--\n        lengthBlocking += 1\n    }\n    y = saveY\n    while (y + 1 < 19 && board[y + 1][x] === color){\n        y++\n        lengthBlocking += 1\n    }\n    return getBlockingValue(lengthBlocking, data)\n}\n\nconst horizontalBlocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking\n    var x = node.x\n    var y = node.y\n    var saveX = x\n    while (x - 1 >= 0 && board[y][x - 1] === color){\n        x--\n        lengthBlocking += 1\n    }\n    x = saveX\n    while (x + 1 < 19 && board[y][x + 1] === color){\n        x++\n        lengthBlocking += 1\n    }\n    return getBlockingValue(lengthBlocking, data)\n}\n\nconst diagonal1Blocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking\n    var x = node.x\n    var y = node.y\n    var saveX = x\n    var saveY = y\n    while (x - 1 >= 0 && y - 1 >= 0 && board[y - 1][x - 1] === color){\n        x--\n        y--\n        lengthBlocking += 1\n    }\n    x = saveX\n    y = saveY\n    while (x + 1 < 19 && y + 1 < 19 && board[y + 1][x + 1] === color){\n        x++\n        y++\n        lengthBlocking += 1\n    }\n    return getBlockingValue(lengthBlocking, data)\n}\n\nconst diagonal2Blocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking\n    var x = node.x\n    var y = node.y\n    var saveX = x\n    var saveY = y\n    while (x + 1 >= 0 && y - 1 >= 0 && board[y - 1][x + 1] === color){\n        x++\n        y--\n        lengthBlocking += 1\n    }\n    x = saveX\n    y = saveY\n    while (x - 1 < 19 && y + 1 < 19 && board[y + 1][x - 1] === color){\n        x--\n        y++\n        lengthBlocking += 1\n    }\n    return getBlockingValue(lengthBlocking, data)\n}\n\nconst checkBlockings = (board, node, data) => {\n    var h = 0\n    h += verticalBlocking(board, node, data)\n    h += horizontalBlocking(board, node, data)\n    h += diagonal1Blocking(board, node, data)\n    h += diagonal2Blocking(board, node, data)\n    if (node.color === data.aiColor)\n        return h\n    return -h\n}\n\nconst getHeuristic = (node, data) => {\n    const start = window.performance.now()\n    var heuristic = 0\n    getBoard(node, data.bufferMemory)\n    heuristic += checkAlignments(data.bufferMemory, node, data)\n    heuristic += checkBlockings(data.bufferMemory, node, data)\n    freeBufferMemory(node, data.bufferMemory)\n    const end = window.performance.now()\n    data.heuristicTime += end - start\n    return heuristic\n}\n\nexport default getHeuristic"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}