{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board[y][x];\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst singleStonesHeuristic = board => {\n  var heuristic = 0;\n  var localHeuristic;\n  var freeNeighbour;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        // console.log(x, y, board[y][x])\n        localHeuristic = 10;\n        freeNeighbour = 1;\n        if (y - 1 >= 0 && !board[y - 1][x]) freeNeighbour += 1;\n        if (x + 1 < 19 && !board[y][x + 1]) freeNeighbour += 1;\n        if (y + 1 < 19 && !board[y + 1][x]) freeNeighbour += 1;\n        if (x - 1 >= 0 && !board[y][x - 1]) freeNeighbour += 1;\n        localHeuristic *= freeNeighbour;\n        if (board[y][x] === data.iaColor) heuristic += localHeuristic;else heuristic -= localHeuristic;\n      }\n    }\n  }\n  console.log(heuristic);\n  return heuristic;\n};\nconst checkStones = (x, y, board, playerColor, orientation) => {\n  var nb = 0;\n  var color = board[y][x];\n  while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color) nb++;\n  while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color) nb++;\n  while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color) nb++;\n  while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color) nb++;\n  if (nb > 1) return true;\n  return false;\n};\nconst checkAlignment = (x, y, board, playerColor) => {\n  var winner;\n  if ((alignment = checkStones(x, y, board, playerColor, 'vertical')) || (winner = checkStones(x, y, board, playerColor, 'horizontal')) || (winner = checkStones(x, y, board, playerColor, 'diagonal1')) || (winner = checkStones(x, y, board, playerColor, 'diagonal2'))) return winner;\n  return false;\n};\nconst alignmentsHeuristic = (data, playerColor) => {\n  var winner;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (data.board[y][x] && (winner = checkAlignment(x, y, data.board, playerColor))) return winner;\n    }\n  }\n  return false;\n};\nconst getHeuristic = node => {\n  var board = getBoard(node);\n  var h1 = singleStonesHeuristic(board);\n  var h2 = alignmentsHeuristic(board);\n  return h1 + h2;\n  // return 10\n  // var ret = data.heuristic[data.heuristicIndex]\n  // data.heuristicIndex += 1\n  // return ret\n};\n\nconst getBestHeuristic = (node, extrem) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[`${nbNode}`]) {\n    if (bestHeuristic === false || extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic || extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic) {\n      bestHeuristic = node[`${nbNode}`].heuristic;\n    }\n    nbNode++;\n  }\n  return bestHeuristic;\n};\nconst randomChoice = (node, bestHeuristic) => {\n  var nbNode = 0;\n  var bestMove = [];\n  while (node[`${nbNode}`]) {\n    if (node[`${nbNode}`].heuristic === bestHeuristic) {\n      bestMove.push({\n        x: node[`${nbNode}`].x,\n        y: node[`${nbNode}`].y\n      });\n    }\n    nbNode++;\n  }\n  var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length);\n  return {\n    heuristic: bestHeuristic,\n    x: bestMove[moveChoosen].x,\n    y: bestMove[moveChoosen].y\n  };\n};\nconst getBestMove = (node, extrem, depth) => {\n  var bestHeuristic = getBestHeuristic(node, extrem);\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  return randomChoice(node, bestHeuristic);\n};\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node[`${nbNode}`].heuristic > node.alpha) node.alpha = node[`${nbNode}`].heuristic;\n  } else {\n    if (node[`${nbNode}`].heuristic < node.beta) node.beta = node[`${nbNode}`].heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\n\n// const getChilds = (node, depth) => {\n//     var nbNode = 0\n//     var c = 0\n//     var x = 0\n//     var y = 0\n//     while (c < 2){\n//         if (!data.board[y][x] && noStones(node, x, y)){\n//             node[`${nbNode}`] = {\n//                 x, y,\n//                 parent : node,\n//                 color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor,\n//                 alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n//             }\n//             if (depth > 1)\n//                 minmax(node[`${nbNode}`], depth - 1)\n//             else\n//                 node[`${nbNode}`].heuristic = getHeuristic(node)\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 return\n//             nbNode++\n//             c++\n//         }\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y += 1\n//         }\n//     }\n// }\n\nconst increment = pos => {\n  pos.x++;\n  if (pos.x === 19) {\n    pos.x = 0;\n    pos.y++;\n  }\n  if (pos.y === 19) return false;\n  return true;\n};\nconst getChild = (pos, node, depth) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color: data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst uploadHeuristic = (depth, node) => {\n  var bestMove;\n  if (data.depth % 2 !== depth % 2) bestMove = getBestMove(node, 'min', depth);else bestMove = getBestMove(node, 'max', depth);\n  node.heuristic = bestMove.heuristic;\n  if (depth === data.depth) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n  return false;\n};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var pos = {\n    x: 0,\n    y: 0\n  };\n  while (true) {\n    if (!data.board[pos.y][pos.x] && noStones(node, pos.x, pos.y)) {\n      node[`${nbNode}`] = getChild(pos, node, depth);\n      if (depth > 1) minmax(node[`${nbNode}`], depth - 1);else node[`${nbNode}`].heuristic = getHeuristic(node[`${nbNode}`]);\n      if (getAlphaBetaPruning(node, depth, nbNode)) break;\n      nbNode++;\n    }\n    if (!increment(pos)) break;\n  }\n  var bestMove;\n  if (bestMove = uploadHeuristic(depth, node)) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n};\nconst blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      // if ((\n      //         pos[0].x >= 0 && pos[0].x < 19 &&\n      //         pos[1].x >= 0 && pos[1].x < 19 &&\n      //         pos[2].x >= 0 && pos[2].x < 19 &&\n      //         pos[3].x >= 0 && pos[3].x < 19 &&\n      //         pos[0].y >= 0 && pos[0].y < 19 &&\n      //         pos[1].y >= 0 && pos[1].y < 19 &&\n      //         pos[2].y >= 0 && pos[2].y < 19 &&\n      //         pos[3].y >= 0 && pos[3].y < 19\n      //     ) &&\n      //     (\n      //         (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black') ||\n      //         (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black') ||\n      //         (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black') ||\n      //         (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')\n      //     )\n      // )\n      //     return false\n      if (pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 && (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black') || pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 && (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black') || pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 && (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black') || pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 && (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')) return false;\n      // console.log('pos[0] ==> ', pos[0].x, pos[0].y)\n      // console.log('pos[1] ==> ', pos[1].x, pos[1].y)\n      // console.log('pos[2] ==> ', pos[2].x, pos[2].y)\n      // console.log('pos[3] ==> ', pos[3].x, pos[3].y)\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && blockCase(x, y, board, offset)) board[y][x] = 1;\n    }\n  }\n};\nconst getStartBoard = (board, offset) => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, offset);\n  return res;\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  // data.board = getStartBoard(board, 1)\n  data.board = board;\n  data.depth = 1;\n  data.callsToMinMax = 0;\n  data.heuristicIndex = 0;\n  //data.heuristic = [-1, 3, 5, -6, -4]\n  data.heuristic = [8, 5, 6, -4, 3, 8, 4, -6, 1, 5, 2];\n};\nconst getTreeToPrint = (node, depth) => {\n  var nbNode = 0;\n  var res = {};\n  res.heuristic = node.heuristic;\n  while (node[`${nbNode}`]) {\n    if (depth > 0) res[`${nbNode}`] = getTreeToPrint(node[`${nbNode}`], depth - 1);\n    nbNode += 1;\n  }\n  return res;\n};\nconst printTree = (tree, indentation) => {\n  var nbNode = 0;\n  var prefix = '';\n  for (var c = 0; c < indentation; c++) {\n    prefix += '----';\n  }\n  console.log(`${prefix}(${tree.heuristic})`);\n  while (tree[`${nbNode}`]) {\n    printTree(tree[`${nbNode}`], indentation + 1);\n    nbNode++;\n  }\n};\nconst ia = (board, playerColor, mainData) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  mainData.forbiddenStones = data.board;\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  var pos = minmax(tree, data.depth);\n  // var treeToPrint = getTreeToPrint(tree, data.depth)\n  printTree(tree, 0);\n  console.log('calls to minmax : ', data.callsToMinMax);\n  return pos;\n};\nexport default ia;","map":{"version":3,"names":["getRandomInt","data","getBoard","node","res","y","x","board","parent","color","noStones","singleStonesHeuristic","heuristic","localHeuristic","freeNeighbour","iaColor","console","log","checkStones","playerColor","orientation","nb","checkAlignment","winner","alignment","alignmentsHeuristic","getHeuristic","h1","h2","getBestHeuristic","extrem","nbNode","bestHeuristic","randomChoice","bestMove","push","moveChoosen","length","getBestMove","depth","getAlphaBetaPruning","alpha","beta","increment","pos","getChild","uploadHeuristic","minmax","callsToMinMax","blockCase","offset","c","i","blockBoard","getStartBoard","initData","heuristicIndex","getTreeToPrint","printTree","tree","indentation","prefix","ia","mainData","forbiddenStones","Infinity"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board[y][x]\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst singleStonesHeuristic = board => {\n    var heuristic = 0\n    var localHeuristic\n    var freeNeighbour\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                // console.log(x, y, board[y][x])\n                localHeuristic = 10\n                freeNeighbour = 1\n                if (y - 1 >= 0 && !board[y - 1][x])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && !board[y][x + 1])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && !board[y + 1][x])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && !board[y][x - 1])\n                    freeNeighbour += 1\n                localHeuristic *= freeNeighbour\n                if (board[y][x] === data.iaColor)\n                    heuristic += localHeuristic\n                else\n                    heuristic -= localHeuristic\n            }\n        }\n    }\n    console.log(heuristic)\n    return heuristic\n}\n\nconst checkStones = (x, y, board, playerColor, orientation) => {\n    var nb = 0\n    var color = board[y][x]\n    while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color)nb++\n    while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color)nb++\n    while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n    while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n    if (nb > 1)\n        return true\n    return false\n}\n\nconst checkAlignment = (x, y, board, playerColor) => {\n    var winner\n    if (\n        (alignment = checkStones(x, y, board, playerColor, 'vertical')) ||\n        (winner = checkStones(x, y, board, playerColor, 'horizontal')) ||\n        (winner = checkStones(x, y, board, playerColor, 'diagonal1')) ||\n        (winner = checkStones(x, y, board, playerColor, 'diagonal2'))\n    )\n        return winner\n    return false\n}\n\nconst alignmentsHeuristic = (data, playerColor) => {\n    var winner\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (data.board[y][x] && (winner = checkAlignment(x, y, data.board, playerColor)))\n                return winner\n        }\n    }\n    return false\n}\n\nconst getHeuristic = (node) => {\n    var board = getBoard(node)\n    var h1 = singleStonesHeuristic(board)\n    var h2 = alignmentsHeuristic(board)\n    return h1 + h2\n    // return 10\n    // var ret = data.heuristic[data.heuristicIndex]\n    // data.heuristicIndex += 1\n    // return ret\n}\n\nconst getBestHeuristic = (node, extrem) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[`${nbNode}`]){\n        if (\n            bestHeuristic === false ||\n            (extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic) ||\n            (extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[`${nbNode}`].heuristic\n        }\n        nbNode++\n    }\n    return bestHeuristic\n}\n\nconst randomChoice = (node, bestHeuristic) => {\n    var nbNode = 0\n    var bestMove = []\n    while (node[`${nbNode}`]){\n        if (node[`${nbNode}`].heuristic === bestHeuristic){\n            bestMove.push({\n                x : node[`${nbNode}`].x,\n                y : node[`${nbNode}`].y\n            })\n        }\n        nbNode++\n    }\n    var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length)\n    return {\n        heuristic : bestHeuristic,\n        x : bestMove[moveChoosen].x,\n        y : bestMove[moveChoosen].y\n    }\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var bestHeuristic = getBestHeuristic(node, extrem)\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    return randomChoice(node, bestHeuristic)\n    \n}\n\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n    if ((data.depth % 2) === (depth % 2)){\n        if (node[`${nbNode}`].heuristic > node.alpha)\n            node.alpha = node[`${nbNode}`].heuristic\n    }\n    else{\n        if ((node[`${nbNode}`].heuristic < node.beta))\n            node.beta = node[`${nbNode}`].heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\n// const getChilds = (node, depth) => {\n//     var nbNode = 0\n//     var c = 0\n//     var x = 0\n//     var y = 0\n//     while (c < 2){\n//         if (!data.board[y][x] && noStones(node, x, y)){\n//             node[`${nbNode}`] = {\n//                 x, y,\n//                 parent : node,\n//                 color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor,\n//                 alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n//             }\n//             if (depth > 1)\n//                 minmax(node[`${nbNode}`], depth - 1)\n//             else\n//                 node[`${nbNode}`].heuristic = getHeuristic(node)\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 return\n//             nbNode++\n//             c++\n//         }\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y += 1\n//         }\n//     }\n// }\n\nconst increment = (pos) => {\n    pos.x++\n    if (pos.x === 19){\n        pos.x = 0\n        pos.y++\n    }\n    if (pos.y === 19)\n        return false\n    return true\n}\n\nconst getChild = (pos, node, depth) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst uploadHeuristic = (depth, node) => {\n    var bestMove\n    if ((data.depth % 2) !== (depth % 2))\n        bestMove = getBestMove(node, 'min', depth)\n    else\n        bestMove = getBestMove(node, 'max', depth)\n    node.heuristic = bestMove.heuristic\n    if (depth === data.depth)\n        return {x : bestMove.x, y : bestMove.y}\n    return false\n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var pos = {x : 0, y : 0}\n    while (true){\n        if (!data.board[pos.y][pos.x] && noStones(node, pos.x, pos.y)){\n            node[`${nbNode}`] = getChild(pos, node, depth)\n            if (depth > 1)\n                minmax(node[`${nbNode}`], depth - 1)\n            else\n                node[`${nbNode}`].heuristic = getHeuristic(node[`${nbNode}`])\n            if (getAlphaBetaPruning(node, depth, nbNode))\n                break\n            nbNode++\n        }\n        if (!increment(pos))\n            break\n    }\n    var bestMove\n    if ((bestMove = uploadHeuristic(depth, node)))\n        return {x : bestMove.x, y : bestMove.y}\n}\n\n\nconst blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            // if ((\n            //         pos[0].x >= 0 && pos[0].x < 19 &&\n            //         pos[1].x >= 0 && pos[1].x < 19 &&\n            //         pos[2].x >= 0 && pos[2].x < 19 &&\n            //         pos[3].x >= 0 && pos[3].x < 19 &&\n            //         pos[0].y >= 0 && pos[0].y < 19 &&\n            //         pos[1].y >= 0 && pos[1].y < 19 &&\n            //         pos[2].y >= 0 && pos[2].y < 19 &&\n            //         pos[3].y >= 0 && pos[3].y < 19\n            //     ) &&\n            //     (\n            //         (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black') ||\n            //         (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black') ||\n            //         (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black') ||\n            //         (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')\n            //     )\n            // )\n            //     return false\n            if (\n                (\n                    pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 &&\n                    (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black')\n                ) ||\n                (\n                    pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 &&\n                    (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black')\n                ) ||\n                (\n                    pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 &&\n                    (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black')\n                ) ||\n                (\n                    pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 &&\n                    (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')\n                )\n            )\n                    return false\n            // console.log('pos[0] ==> ', pos[0].x, pos[0].y)\n            // console.log('pos[1] ==> ', pos[1].x, pos[1].y)\n            // console.log('pos[2] ==> ', pos[2].x, pos[2].y)\n            // console.log('pos[3] ==> ', pos[3].x, pos[3].y)\n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n            \n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && blockCase(x, y, board, offset))\n                board[y][x] = 1\n        }\n    }\n}\n\nconst getStartBoard = (board, offset) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, offset)\n    return res\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    // data.board = getStartBoard(board, 1)\n    data.board = board\n    data.depth = 1\n    data.callsToMinMax = 0\n    data.heuristicIndex = 0\n    //data.heuristic = [-1, 3, 5, -6, -4]\n    data.heuristic = [8, 5, 6, -4, 3, 8, 4, -6, 1, 5, 2]\n}\n\nconst getTreeToPrint = (node, depth) => {\n    var nbNode = 0\n    var res = {}\n    res.heuristic = node.heuristic\n    while (node[`${nbNode}`]){\n        if (depth > 0)\n            res[`${nbNode}`] = getTreeToPrint(node[`${nbNode}`], depth - 1)\n        nbNode += 1\n    }\n    return res\n}\n\nconst printTree = (tree, indentation) => {\n    var nbNode = 0\n    var prefix = ''\n    for (var c = 0; c < indentation; c++){\n        prefix += '----'\n    }\n    console.log(`${prefix}(${tree.heuristic})`)\n    while (tree[`${nbNode}`]){\n        printTree(tree[`${nbNode}`], indentation + 1)\n        nbNode++\n    }\n}\n\nconst ia = (board, playerColor, mainData) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    mainData.forbiddenStones = data.board\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    var pos = minmax(tree, data.depth)\n    // var treeToPrint = getTreeToPrint(tree, data.depth)\n    printTree(tree, 0)\n    console.log('calls to minmax : ', data.callsToMinMax)\n    return pos\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}