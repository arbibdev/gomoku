{"ast":null,"code":"import { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\nimport ai from '../../tools/ai/ai';\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst setEndGame = data => {};\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst receiveAiMove = (data, pos) => {\n  data.aiLunched = false;\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.piecesOnBoard += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  printBoard(data);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n  data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  // launchAi(data)\n};\n\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs human'\n    }\n  });\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  printBoard(data);\n  printSuggestion(data);\n  data.aiMoves = 0;\n  data.aiTimePlay = 0;\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  data.aiColor = data.firstPlayerColor;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  // data.canvas.onclick = e => launchAi(data)\n  launchAi(data);\n};\n\n// CLICK WITH C ALGO\n\n// const printSuggestion = data => {\n// \tlaunchAi\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame || data.aiLaunched)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// launchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.canvas.onclick = e => canvasOnClick(e, data)\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","serverIp","printBoard","checkEndGame","io","ai","printSuggestion","data","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","setEndGame","launchAi","startAi","window","performance","now","aiLaunched","socket","emit","aiColor","board","receiveAiMove","pos","aiLunched","timeAi","Math","floor","playerColor","BLACK","WHITE","piecesOnBoard","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","endGame","initGame","firstPlayerColor","query","page","DRAW","canvas","document","getElementById","getContext","turn","aiTimePlay","on"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\nimport ai from '../../tools/ai/ai'\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst setEndGame = (data) => {\n}\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    printBoard(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t// launchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    printBoard(data)\n    printSuggestion(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t// data.canvas.onclick = e => launchAi(data)\n\tlaunchAi(data)\n}\n\n\n\n\n\n// CLICK WITH C ALGO\n\n\n\n\n// const printSuggestion = data => {\n// \tlaunchAi\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame || data.aiLaunched)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// launchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.canvas.onclick = e => canvasOnClick(e, data)\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n\nexport default initGame"],"mappings":"AACA,SAASA,gBAAgB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,mBAAmB;AACzE,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,EAAE,MAAM,mBAAmB;;AAElC;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAGC,IAAI,IAAI;EAC5BA,IAAI,CAACC,GAAG,CAACC,SAAS,CACdF,IAAI,CAACG,MAAM,CAACC,UAAU,EACtBJ,IAAI,CAACG,MAAM,CAACE,WAAW,CAACC,KAAK,GAAGN,IAAI,CAACI,UAAU,CAACG,CAAC,GAAG,EAAE,EACtDP,IAAI,CAACG,MAAM,CAACE,WAAW,CAACG,MAAM,GAAGR,IAAI,CAACI,UAAU,CAACK,CAAC,GAAG,EAAE,CAC1D;AACL,CAAC;AAED,MAAMC,UAAU,GAAIV,IAAI,IAAK,CAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,MAAMW,QAAQ,GAAGX,IAAI,IAAI;EACxBA,IAAI,CAACY,OAAO,GAAGC,MAAM,CAACC,WAAW,CAACC,GAAG,EAAE;EACvCf,IAAI,CAACgB,UAAU,GAAG,IAAI;EACtBhB,IAAI,CAACiB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"},"metadata":{},"sourceType":"module","externalDependencies":[]}