{"ast":null,"code":"var nbConbinations = 0;\nvar nbWins = 0;\nconst checkStones = (x, y, board, orientation) => {\n  var nb = 0;\n  var color = board[y][x];\n  while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color) nb++;\n  while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color) nb++;\n  while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color) nb++;\n  while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color) nb++;\n  if (nb >= 5) return color;\n  return false;\n};\nconst checkAlignment = (x, y, board) => {\n  var winner;\n  if ((winner = checkStones(x, y, board, 'vertical')) || (winner = checkStones(x, y, board, 'horizontal')) || (winner = checkStones(x, y, board, 'diagonal1')) || (winner = checkStones(x, y, board, 'diagonal2'))) return winner;\n  return false;\n};\nconst checkWinner = board => {\n  var winner;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] && (winner = checkAlignment(x, y, board))) return winner;\n    }\n  }\n  return false;\n};\nconst initArray = sizeArray => {\n  var array = [];\n  for (var y = 0; y < sizeArray; y++) {\n    array[y] = [];\n    for (var x = 0; x < sizeArray; x++) {\n      array[y][x] = 0;\n    }\n  }\n  return array;\n};\nconst testAllConbinations = (array, sizeArray, stones) => {\n  if (!stones) {\n    nbConbinations += 1;\n    if (checkWinner(array, sizeArray)) {\n      nbWins += 1;\n    }\n  }\n  for (var y = 0; y < sizeArray; y++) {\n    for (var x = 0; x < sizeArray; x++) {\n      if (!array[y][x]) {\n        array[y][x] = 1;\n        testAllConbinations(array, sizeArray, stones - 1);\n        array[y][x] = 0;\n      }\n    }\n  }\n};\nconst test = () => {\n  var sizeArray = 2;\n  var stones = 2;\n  var array = initArray(sizeArray);\n  testAllConbinations(array, sizeArray, stones);\n  console.log(nbConbinations);\n};\nexport default test;","map":{"version":3,"names":["nbConbinations","nbWins","checkStones","x","y","board","orientation","nb","color","checkAlignment","winner","checkWinner","initArray","sizeArray","array","testAllConbinations","stones","test","console","log"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsAi/test.js"],"sourcesContent":["var nbConbinations = 0\nvar nbWins = 0\n\nconst checkStones = (x, y, board, orientation) => {\n    var nb = 0\n    var color = board[y][x]\n    while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color)nb++\n    while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color)nb++\n    while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n    while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n    if (nb >= 5)\n        return color\n    return false\n}\n\nconst checkAlignment = (x, y, board) => {\n    var winner\n    if (\n        (winner = checkStones(x, y, board, 'vertical')) ||\n        (winner = checkStones(x, y, board, 'horizontal')) ||\n        (winner = checkStones(x, y, board, 'diagonal1')) ||\n        (winner = checkStones(x, y, board, 'diagonal2'))\n    )\n        return winner\n    return false\n}\n\nconst checkWinner = (board) => {\n    var winner\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] && (winner = checkAlignment(x, y, board)))\n                return winner\n        }\n    }\n    return false\n}\n\n\n\nconst initArray = (sizeArray) => {\n\tvar array = []\n\tfor (var y = 0; y < sizeArray; y++){\n\t\tarray[y] = []\n\t\tfor (var x = 0; x < sizeArray; x++){\n\t\t\tarray[y][x] = 0\n\t\t}\n\t}\n\treturn array\n}\n\nconst testAllConbinations = (array, sizeArray, stones) => {\n\tif (!stones){\n\t\tnbConbinations += 1\n\t\tif (checkWinner(array, sizeArray)){\n\t\t\tnbWins += 1\n\t\t}\n\t}\n\tfor (var y = 0; y < sizeArray; y++){\n\t\tfor (var x = 0; x < sizeArray; x++){\n\t\t\tif (!array[y][x]){\n\t\t\t\tarray[y][x] = 1\n\t\t\t\ttestAllConbinations(array, sizeArray, stones - 1)\n\t\t\t\tarray[y][x] = 0\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst test = () => {\n\tvar sizeArray = 2\n\tvar stones = 2\n\tvar array = initArray(sizeArray)\n\ttestAllConbinations(array, sizeArray, stones)\n\tconsole.log(nbConbinations)\n}\n\nexport default test"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}