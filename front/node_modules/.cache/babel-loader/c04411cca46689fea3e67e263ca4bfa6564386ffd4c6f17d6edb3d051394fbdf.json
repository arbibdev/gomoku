{"ast":null,"code":"import { freeBufferMemory, getBoard } from \"./tools\";\nconst getAlignmentValue = (neighbour1, neighbour2, sizeAlignment, data) => {\n  if (neighbour1 && neighbour2) {\n    if (sizeAlignment === 2) return data.heuristic.align2Free;else if (sizeAlignment === 3) return data.heuristic.align3Free;else if (sizeAlignment === 4) return data.heuristic.align4Free;\n    return data.heuristic.align5;\n  } else {\n    if (sizeAlignment === 2) return data.heuristic.align2;\n    if (sizeAlignment === 3) return data.heuristic.align3;\n    if (sizeAlignment === 4) return data.heuristic.align4;\n    return data.heuristic.align5;\n  }\n};\nconst verticalAlignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.y -= 1;\n  }\n  if (pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.y += 1;\n  while (pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst horizontalAlignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n  }\n  if (pos.x >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  while (pos.x < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst diagonal1Alignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y -= 1;\n  }\n  if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  pos.y += 1;\n  while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst diagonal2Alignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y -= 1;\n  }\n  if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x -= 1;\n  pos.y += 1;\n  while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst checkAlignments = (board, node, data) => {\n  var h = 0;\n  h += verticalAlignment(board, node, data);\n  h += horizontalAlignment(board, node, data);\n  h += diagonal1Alignment(board, node, data);\n  h += diagonal2Alignment(board, node, data);\n  if (node.color === data.aiColor) return h;\n  return -h;\n};\nconst getBlockingValue = (lengthBlocking, data, neighbour1, neighbour2) => {\n  if (lengthBlocking === 0) return 0;\n  if (!neighbour1 && !neighbour2) {\n    if (lengthBlocking === 1) return data.heuristic.block1;\n    if (lengthBlocking === 2) return data.heuristic.block2;\n    if (lengthBlocking === 3) return data.heuristic.block3;\n  } else {\n    if (lengthBlocking === 1) return data.heuristic.block1Free;\n    if (lengthBlocking === 2) return data.heuristic.block2Free;\n    if (lengthBlocking === 3) return data.heuristic.block3Free;\n  }\n  return data.heuristic.block4;\n};\nconst verticalBlocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking = 0;\n  var x = node.x;\n  var y = node.y;\n  var saveY = y;\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  while (y - 1 >= 0 && board[y - 1][x] === color) {\n    y--;\n    lengthBlocking += 1;\n  }\n  if (y - 1 >= 0 && !board[y - 1][x]) neighbour1 = 1;\n  y = saveY;\n  while (y + 1 < 19 && board[y + 1][x] === color) {\n    y++;\n    lengthBlocking += 1;\n  }\n  if (y + 1 < 19 && !board[y + 1][x]) neighbour2 = 1;\n  return getBlockingValue(lengthBlocking, data, neighbour1, neighbour2);\n};\nconst horizontalBlocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking = 0;\n  var x = node.x;\n  var y = node.y;\n  var saveX = x;\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  while (x - 1 >= 0 && board[y][x - 1] === color) {\n    x--;\n    lengthBlocking += 1;\n  }\n  if (x - 1 >= 0 && !board[y][x - 1]) neighbour1 = 1;\n  x = saveX;\n  while (x + 1 < 19 && board[y][x + 1] === color) {\n    x++;\n    lengthBlocking += 1;\n  }\n  if (x + 1 < 19 && !board[y][x + 1]) neighbour2 = 1;\n  return getBlockingValue(lengthBlocking, data, neighbour1, neighbour2);\n};\nconst diagonal1Blocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking = 0;\n  var x = node.x;\n  var y = node.y;\n  var saveX = x;\n  var saveY = y;\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  while (x - 1 >= 0 && y - 1 >= 0 && board[y - 1][x - 1] === color) {\n    x--;\n    y--;\n    lengthBlocking += 1;\n  }\n  if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) neighbour1 = 1;\n  x = saveX;\n  y = saveY;\n  while (x + 1 < 19 && y + 1 < 19 && board[y + 1][x + 1] === color) {\n    x++;\n    y++;\n    lengthBlocking += 1;\n  }\n  if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1]) neighbour2 = 1;\n  return getBlockingValue(lengthBlocking, data, neighbour1, neighbour2);\n};\nconst diagonal2Blocking = (board, node, data) => {\n  var color = node.color === data.BLACK ? data.WHITE : data.BLACK;\n  var lengthBlocking = 0;\n  var x = node.x;\n  var y = node.y;\n  var saveX = x;\n  var saveY = y;\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  while (x + 1 >= 0 && y - 1 >= 0 && board[y - 1][x + 1] === color) {\n    x++;\n    y--;\n    lengthBlocking += 1;\n  }\n  if (x + 1 >= 0 && y - 1 >= 0 && !board[y - 1][x + 1]) neighbour1 = 1;\n  x = saveX;\n  y = saveY;\n  while (x - 1 < 19 && y + 1 < 19 && board[y + 1][x - 1] === color) {\n    x--;\n    y++;\n    lengthBlocking += 1;\n  }\n  if (x - 1 < 19 && y + 1 < 19 && !board[y + 1][x - 1]) neighbour2 = 1;\n  return getBlockingValue(lengthBlocking, data, neighbour1, neighbour2);\n};\nconst checkBlockings = (board, node, data) => {\n  var h = 0;\n  h += verticalBlocking(board, node, data);\n  h += horizontalBlocking(board, node, data);\n  h += diagonal1Blocking(board, node, data);\n  h += diagonal2Blocking(board, node, data);\n  if (node.color === data.aiColor) return h;\n  return -h;\n};\nconst copyBufferMemory = bufferMemory => {\n  var ret = [];\n  for (var y = 0; y < 19; y++) {\n    ret[y] = [];\n    for (var x = 0; x < 19; x++) {\n      ret[y][x] = bufferMemory[y][x];\n    }\n  }\n  return ret;\n};\nconst getHeuristic = (node, data) => {\n  const start = window.performance.now();\n  var heuristic = 0;\n  getBoard(node, data.bufferMemory);\n  var res;\n  node.heuristicInfos = {};\n  res = checkAlignments(data.bufferMemory, node, data);\n  node.heuristicInfos.alignments = res;\n  heuristic += res;\n  res = checkBlockings(data.bufferMemory, node, data);\n  node.heuristicInfos.blockings = res;\n  heuristic += res;\n  data.saveMinMax.push({\n    heuristic,\n    board: copyBoard\n  });\n  freeBufferMemory(node, data.bufferMemory);\n  const end = window.performance.now();\n  data.heuristicTime += end - start;\n  return heuristic;\n};\nexport default getHeuristic;","map":{"version":3,"names":["freeBufferMemory","getBoard","getAlignmentValue","neighbour1","neighbour2","sizeAlignment","data","heuristic","align2Free","align3Free","align4Free","align5","align2","align3","align4","verticalAlignment","board","node","color","pos","x","y","horizontalAlignment","diagonal1Alignment","diagonal2Alignment","checkAlignments","h","aiColor","getBlockingValue","lengthBlocking","block1","block2","block3","block1Free","block2Free","block3Free","block4","verticalBlocking","BLACK","WHITE","saveY","horizontalBlocking","saveX","diagonal1Blocking","diagonal2Blocking","checkBlockings","copyBufferMemory","bufferMemory","ret","getHeuristic","start","window","performance","now","res","heuristicInfos","alignments","blockings","saveMinMax","push","copyBoard","end","heuristicTime"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/heuristic3.js"],"sourcesContent":["import { freeBufferMemory, getBoard } from \"./tools\"\n\nconst getAlignmentValue = (neighbour1, neighbour2, sizeAlignment, data) => {\n    if (neighbour1 && neighbour2){\n        if (sizeAlignment === 2)\n            return data.heuristic.align2Free\n        else if (sizeAlignment === 3)\n            return data.heuristic.align3Free\n        else if (sizeAlignment === 4)\n            return data.heuristic.align4Free\n        return data.heuristic.align5\n    }\n    else{\n        if (sizeAlignment === 2)\n            return data.heuristic.align2\n        if (sizeAlignment === 3)\n            return data.heuristic.align3\n        if (sizeAlignment === 4)\n            return data.heuristic.align4\n        return data.heuristic.align5\n    }\n}\n\nconst verticalAlignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.y -= 1\n    }\n    if (pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.y += 1\n    while (pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst horizontalAlignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n    }\n    if (pos.x >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    while (pos.x < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst diagonal1Alignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y -= 1\n    }\n    if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    pos.y += 1\n    while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst diagonal2Alignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y -= 1\n    }\n    if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x -= 1\n    pos.y += 1\n    while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getAlignmentValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst checkAlignments = (board, node, data) => {\n    var h = 0\n    h += verticalAlignment(board, node, data)\n    h += horizontalAlignment(board, node, data)\n    h += diagonal1Alignment(board, node, data)\n    h += diagonal2Alignment(board, node, data)\n    if (node.color === data.aiColor)\n        return h\n    return -h\n}\n\nconst getBlockingValue = (lengthBlocking, data, neighbour1, neighbour2) => {\n    if (lengthBlocking === 0)\n        return 0\n    if (!neighbour1 && !neighbour2){\n        if (lengthBlocking === 1)\n            return data.heuristic.block1\n        if (lengthBlocking === 2)\n            return data.heuristic.block2\n        if (lengthBlocking === 3)\n            return data.heuristic.block3\n    }\n    else {\n        if (lengthBlocking === 1)\n            return data.heuristic.block1Free\n        if (lengthBlocking === 2)\n            return data.heuristic.block2Free\n        if (lengthBlocking === 3)\n            return data.heuristic.block3Free\n    }\n    return data.heuristic.block4\n}\n\nconst verticalBlocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking = 0\n    var x = node.x\n    var y = node.y\n    var saveY = y\n    var neighbour1 = 0\n    var neighbour2 = 0\n    while (y - 1 >= 0 && board[y - 1][x] === color){\n        y--\n        lengthBlocking += 1\n    }\n    if (y - 1 >= 0 && !board[y - 1][x])\n        neighbour1 = 1\n    y = saveY\n    while (y + 1 < 19 && board[y + 1][x] === color){\n        y++\n        lengthBlocking += 1\n    }\n    if (y + 1 < 19 && !board[y + 1][x])\n        neighbour2 = 1\n    return getBlockingValue(lengthBlocking, data, neighbour1, neighbour2)\n}\n\nconst horizontalBlocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking = 0\n    var x = node.x\n    var y = node.y\n    var saveX = x\n    var neighbour1 = 0\n    var neighbour2 = 0\n    while (x - 1 >= 0 && board[y][x - 1] === color){\n        x--\n        lengthBlocking += 1\n    }\n    if (x - 1 >= 0 && !board[y][x - 1])\n        neighbour1 = 1\n    x = saveX\n    while (x + 1 < 19 && board[y][x + 1] === color){\n        x++\n        lengthBlocking += 1\n    }\n    if (x + 1 < 19 && !board[y][x + 1])\n        neighbour2 = 1\n    return getBlockingValue(lengthBlocking, data, neighbour1, neighbour2)\n}\n\nconst diagonal1Blocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking = 0\n    var x = node.x\n    var y = node.y\n    var saveX = x\n    var saveY = y\n    var neighbour1 = 0\n    var neighbour2 = 0\n    while (x - 1 >= 0 && y - 1 >= 0 && board[y - 1][x - 1] === color){\n        x--\n        y--\n        lengthBlocking += 1\n    }\n    if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n        neighbour1 = 1\n    x = saveX\n    y = saveY\n    while (x + 1 < 19 && y + 1 < 19 && board[y + 1][x + 1] === color){\n        x++\n        y++\n        lengthBlocking += 1\n    }\n    if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1])\n        neighbour2 = 1\n    return getBlockingValue(lengthBlocking, data, neighbour1, neighbour2)\n}\n\nconst diagonal2Blocking = (board, node, data) => {\n    var color = node.color === data.BLACK ? data.WHITE : data.BLACK\n    var lengthBlocking = 0\n    var x = node.x\n    var y = node.y\n    var saveX = x\n    var saveY = y\n    var neighbour1 = 0\n    var neighbour2 = 0\n    while (x + 1 >= 0 && y - 1 >= 0 && board[y - 1][x + 1] === color){\n        x++\n        y--\n        lengthBlocking += 1\n    }\n    if (x + 1 >= 0 && y - 1 >= 0 && !board[y - 1][x + 1])\n        neighbour1 = 1\n    x = saveX\n    y = saveY\n    while (x - 1 < 19 && y + 1 < 19 && board[y + 1][x - 1] === color){\n        x--\n        y++\n        lengthBlocking += 1\n    }\n    if (x - 1 < 19 && y + 1 < 19 && !board[y + 1][x - 1])\n        neighbour2 = 1\n    return getBlockingValue(lengthBlocking, data, neighbour1, neighbour2)\n}\n\nconst checkBlockings = (board, node, data) => {\n    var h = 0\n    h += verticalBlocking(board, node, data)\n    h += horizontalBlocking(board, node, data)\n    h += diagonal1Blocking(board, node, data)\n    h += diagonal2Blocking(board, node, data)\n    if (node.color === data.aiColor)\n        return h\n    return -h\n}\n\nconst copyBufferMemory = (bufferMemory) => {\n    var ret = []\n    for (var y = 0; y < 19; y++){\n        ret[y] = []\n        for (var x = 0; x < 19; x++){\n            ret[y][x] = bufferMemory[y][x]\n        }\n    }\n    return ret\n}\n\nconst getHeuristic = (node, data) => {\n    const start = window.performance.now()\n    var heuristic = 0\n    getBoard(node, data.bufferMemory)\n    var res\n    node.heuristicInfos = {}\n    res = checkAlignments(data.bufferMemory, node, data)\n    node.heuristicInfos.alignments = res\n    heuristic += res\n    res = checkBlockings(data.bufferMemory, node, data)\n    node.heuristicInfos.blockings = res\n    heuristic += res\n    data.saveMinMax.push({heuristic, board : copyBoard})\n    freeBufferMemory(node, data.bufferMemory)\n    const end = window.performance.now()\n    data.heuristicTime += end - start\n    return heuristic\n}\n\nexport default getHeuristic"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}