{"ast":null,"code":"import { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\nimport ai from '../../tools/ai/ai';\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst setEndGame = data => {};\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    printSuggestion(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else {\n    printBoard(data);\n    printSuggestion(data);\n  }\n};\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame) return;\n  printBoard(data);\n  printSuggestion(data);\n};\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// launchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n// CLICK WITH C ALGO\n\n// \n\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","serverIp","printBoard","checkEndGame","io","ai","printSuggestion","data","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","setEndGame","canvasOnMouseMove","e","endGame","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","board","globalAlpha","turn","WHITE","whitePiece","blackPiece","canvasOnMouseLeave","initGame"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\nimport ai from '../../tools/ai/ai'\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst setEndGame = (data) => {\n}\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        printSuggestion(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else{\n        printBoard(data)\n        printSuggestion(data)\n    }\n}\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\nconst canvasOnMouseLeave = (e, data) => {\n    if (data.endGame)\n            return\n        printBoard(data)\n        printSuggestion(data)\n}\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// launchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n\n\n\n\n// CLICK WITH C ALGO\n\n\n\n\n// \n\nexport default initGame"],"mappings":"AACA,SAASA,gBAAgB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,mBAAmB;AACzE,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,EAAE,MAAM,mBAAmB;;AAElC;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAGC,IAAI,IAAI;EAC5BA,IAAI,CAACC,GAAG,CAACC,SAAS,CACdF,IAAI,CAACG,MAAM,CAACC,UAAU,EACtBJ,IAAI,CAACG,MAAM,CAACE,WAAW,CAACC,KAAK,GAAGN,IAAI,CAACI,UAAU,CAACG,CAAC,GAAG,EAAE,EACtDP,IAAI,CAACG,MAAM,CAACE,WAAW,CAACG,MAAM,GAAGR,IAAI,CAACI,UAAU,CAACK,CAAC,GAAG,EAAE,CAC1D;AACL,CAAC;AAED,MAAMC,UAAU,GAAIV,IAAI,IAAK,CAC7B,CAAC;AAED,MAAMW,iBAAiB,GAAG,CAACC,CAAC,EAAEZ,IAAI,KAAK;EACnC,IAAIA,IAAI,CAACa,OAAO,EACZ;EACJ,IAAIC,iBAAiB,GAAGd,IAAI,CAACe,MAAM,CAACC,WAAW;EAC/C,IAAIC,kBAAkB,GAAGjB,IAAI,CAACe,MAAM,CAACG,YAAY;EACjD,IAAIC,KAAK,GAAG3B,gBAAgB,CAACQ,IAAI,EAAEY,CAAC,EAAEE,iBAAiB,EAAEG,kBAAkB,CAAC;EAC5E,IAAIE,KAAK,CAACV,CAAC,KAAK,EAAE,EACd;EACJ,IAAI,CAACT,IAAI,CAACoB,KAAK,CAACD,KAAK,CAACV,CAAC,CAAC,CAACU,KAAK,CAACZ,CAAC,CAAC,EAAC;IAC9BZ,UAAU,CAACK,IAAI,CAAC;IAChBD,eAAe,CAACC,IAAI,CAAC;IACrBA,IAAI,CAACC,GAAG,CAACoB,WAAW,GAAG,GAAG;IAC1BrB,IAAI,CAACC,GAAG,CAACC,SAAS,CACdF,IAAI,CAACsB,IAAI,KAAKtB,IAAI,CAACuB,KAAK,GAAGvB,IAAI,CAACG,MAAM,CAACqB,UAAU,GAAGxB,IAAI,CAACG,MAAM,CAACsB,UAAU,EAC1EzB,IAAI,CAACG,MAAM,CAACE,WAAW,CAACC,KAAK,GAAGa,KAAK,CAACZ,CAAC,EACvCP,IAAI,CAACG,MAAM,CAACE,WAAW,CAACG,MAAM,GAAGW,KAAK,CAACV,CAAC,CAC3C;IACDT,IAAI,CAACC,GAAG,CAACoB,WAAW,GAAG,CAAC;EAC5B,CAAC,MACG;IACA1B,UAAU,CAACK,IAAI,CAAC;IAChBD,eAAe,CAACC,IAAI,CAAC;EACzB;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM0B,kBAAkB,GAAG,CAACd,CAAC,EAAEZ,IAAI,KAAK;EACpC,IAAIA,IAAI,CAACa,OAAO,EACR;EACJlB,UAAU,CAACK,IAAI,CAAC;EAChBD,eAAe,CAACC,IAAI,CAAC;AAC7B,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAKA;;AAEA,eAAe2B,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}