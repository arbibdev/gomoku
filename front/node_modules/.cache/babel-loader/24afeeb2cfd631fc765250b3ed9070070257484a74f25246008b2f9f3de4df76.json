{"ast":null,"code":"import { getStonePosition, initBoard } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport ai from '../../tools/ai/ai';\nconst getSuggestion = data => {\n  data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n  const start = window.performance.now();\n  var pos = ai(data);\n  const end = window.performance.now();\n  return pos;\n};\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst setEndGame = data => {};\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    printSuggestion(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else {\n    printBoard(data);\n    printSuggestion(data);\n  }\n};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = data.turn;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    if (data.endGame = checkEndGame(data)) {\n      setEndGame(data);\n      return;\n    }\n    data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n    data.suggestion = getSuggestion(data);\n    printSuggestion(data);\n  }\n};\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame) return;\n  printBoard(data);\n  printSuggestion(data);\n};\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  data.suggestion = getSuggestion(data);\n  printBoard(data);\n  printSuggestion(data);\n  data.iaMoves = 0;\n  var pos;\n  var inter = setInterval(() => {\n    pos = ai(data);\n    data.board[pos.y][pos.x] = data.turn;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n    if (checkEndGame(data)) clearInterval(inter);\n  }, 0);\n};\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","printBoard","checkEndGame","ai","getSuggestion","data","playerColor","turn","WHITE","BLACK","start","window","performance","now","pos","end","printSuggestion","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","setEndGame","canvasOnMouseMove","e","endGame","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","board","globalAlpha","whitePiece","blackPiece","canvasOnClick","piecesOnBoard","canvasOnMouseLeave","initGame","firstPlayerColor","DRAW","document","getElementById","getContext","iaMoves","inter","setInterval","clearInterval"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport ai from '../../tools/ai/ai'\n\nconst getSuggestion = data => {\n    data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n    const start = window.performance.now()\n    var pos = ai(data)\n    const end = window.performance.now()\n    return pos\n}\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst setEndGame = (data) => {\n\n}\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        printSuggestion(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else{\n        printBoard(data)\n        printSuggestion(data)\n    }\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = data.turn\n        data.piecesOnBoard += 1\n        printBoard(data)\n        if ((data.endGame = checkEndGame(data))){\n            setEndGame(data)\n            return\n        }\n        data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n        data.suggestion = getSuggestion(data)\n        printSuggestion(data)\n    }\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n    if (data.endGame)\n            return\n        printBoard(data)\n        printSuggestion(data)\n}\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    data.suggestion = getSuggestion(data)\n    printBoard(data)\n    printSuggestion(data)\n    data.iaMoves = 0\n    var pos\n    var inter = setInterval(() => {\n        pos = ai(data)\n        data.board[pos.y][pos.x] = data.turn\n        data.piecesOnBoard += 1\n        printBoard(data)\n        data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n        if (checkEndGame(data))\n            clearInterval(inter)\n    }, 0)\n}\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}