{"ast":null,"code":"import { freeBufferMemory, getBoard } from \"./tools\";\nconst getHeuristicValue = (neighbour1, neighbour2, sizeAlignment, data) => {\n  var h;\n  if (neighbour1 && neighbour2) {\n    if (sizeAlignment === 2) h += data.heuristic.align2Free;else if (sizeAlignment === 3) h += data.heuristic.align3Free;else if (sizeAlignment === 4) h += data.heuristic.align4Free;else h += data.heuristic.align5;\n  } else {\n    if (sizeAlignment === 2) h += data.heuristic.align2;else if (sizeAlignment === 3) h += data.heuristic.align3;else if (sizeAlignment === 4) h += data.heuristic.align4;else h += data.heuristic.align5;\n  }\n  return h;\n};\nconst verticalAlignment = (board, node, data) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  var h = 0;\n  while (pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.y -= 1;\n  }\n  if (pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.y += 1;\n  while (pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return getHeuristicValue(neighbour1, neighbour2, sizeAlignment, data);\n};\nconst horizontalAlignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n  }\n  if (pos.x >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  while (pos.x < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst diagonal1Alignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y -= 1;\n  }\n  if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x += 1;\n  pos.y += 1;\n  while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst diagonal2Alignment = (board, node) => {\n  var color = node.color;\n  var pos = {\n    x: node.x,\n    y: node.y\n  };\n  var neighbour1 = 0;\n  var neighbour2 = 0;\n  var sizeAlignment = 0;\n  while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color) {\n    pos.x += 1;\n    pos.y -= 1;\n  }\n  if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x]) neighbour1 = 1;\n  pos.x -= 1;\n  pos.y += 1;\n  while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color) {\n    pos.x -= 1;\n    pos.y += 1;\n    sizeAlignment += 1;\n  }\n  if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x]) neighbour2 = 1;\n  if (sizeAlignment < 2 || !neighbour1 && !neighbour2) return 0;\n  return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1);\n};\nconst checkAlignments = (board, node, data) => {\n  var h = 0;\n  h += verticalAlignment(board, node, data);\n  h += horizontalAlignment(board, node);\n  h += diagonal1Alignment(board, node);\n  h += diagonal2Alignment(board, node);\n  if (node.color === data.aiColor) return h;\n  return -h;\n};\nconst checkBlockings = () => {};\nconst getHeuristic = (node, data) => {\n  var heuristic = 0;\n  getBoard(node, data.bufferMemory);\n  heuristic += checkAlignments(data.bufferMemory, node, data);\n  heuristic += checkBlockings();\n  freeBufferMemory(node, data.bufferMemory);\n};\nexport default getHeuristic;","map":{"version":3,"names":["freeBufferMemory","getBoard","getHeuristicValue","neighbour1","neighbour2","sizeAlignment","data","h","heuristic","align2Free","align3Free","align4Free","align5","align2","align3","align4","verticalAlignment","board","node","color","pos","x","y","horizontalAlignment","Math","pow","diagonal1Alignment","diagonal2Alignment","checkAlignments","aiColor","checkBlockings","getHeuristic","bufferMemory"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/gomoku/src/tools/ai/heuristic3.js"],"sourcesContent":["import { freeBufferMemory, getBoard } from \"./tools\"\n\nconst getHeuristicValue = (neighbour1, neighbour2, sizeAlignment, data) => {\n    var h\n    if (neighbour1 && neighbour2){\n        if (sizeAlignment === 2)\n            h += data.heuristic.align2Free\n        else if (sizeAlignment === 3)\n            h += data.heuristic.align3Free\n        else if (sizeAlignment === 4)\n            h += data.heuristic.align4Free\n        else\n            h += data.heuristic.align5\n    }\n    else{\n        if (sizeAlignment === 2)\n            h += data.heuristic.align2\n        else if (sizeAlignment === 3)\n            h += data.heuristic.align3\n        else if (sizeAlignment === 4)\n            h += data.heuristic.align4\n        else\n            h += data.heuristic.align5\n    }\n    return h\n}\n\nconst verticalAlignment = (board, node, data) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    var h = 0\n    while (pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.y -= 1\n    }\n    if (pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.y += 1\n    while (pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return getHeuristicValue(neighbour1, neighbour2, sizeAlignment, data)\n}\n\nconst horizontalAlignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n    }\n    if (pos.x >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    while (pos.x < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst diagonal1Alignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x >= 0 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y -= 1\n    }\n    if (pos.x >= 0 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x += 1\n    pos.y += 1\n    while (pos.x < 19 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x < 19 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst diagonal2Alignment = (board, node) => {\n    var color = node.color\n    var pos = {x : node.x, y : node.y}\n    var neighbour1 = 0\n    var neighbour2 = 0\n    var sizeAlignment = 0\n    while (pos.x < 19 && pos.y >= 0 && board[pos.y][pos.x] === color){\n        pos.x += 1\n        pos.y -= 1\n    }\n    if (pos.x < 19 && pos.y >= 0 && !board[pos.y][pos.x])\n        neighbour1 = 1\n    pos.x -= 1\n    pos.y += 1\n    while (pos.x >= 0 && pos.y < 19 && board[pos.y][pos.x] === color){\n        pos.x -= 1\n        pos.y += 1\n        sizeAlignment += 1\n    }\n    if (pos.x >= 0 && pos.y < 19 && !board[pos.y][pos.x])\n        neighbour2 = 1\n    if (sizeAlignment < 2 || (!neighbour1 && !neighbour2))\n        return 0\n    return Math.pow(10, sizeAlignment) * (neighbour1 + neighbour2 + 1)\n}\n\nconst checkAlignments = (board, node, data) => {\n    var h = 0\n    h += verticalAlignment(board, node, data)\n    h += horizontalAlignment(board, node)\n    h += diagonal1Alignment(board, node)\n    h += diagonal2Alignment(board, node)\n    if (node.color === data.aiColor)\n        return h\n    return -h\n}\n\nconst checkBlockings = () => {\n\n}\n\nconst getHeuristic = (node, data) => {\n    var heuristic = 0\n    getBoard(node, data.bufferMemory)\n    heuristic += checkAlignments(data.bufferMemory, node, data)\n    heuristic += checkBlockings()\n    freeBufferMemory(node, data.bufferMemory)\n}\n\nexport default getHeuristic"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}