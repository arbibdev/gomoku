{"ast":null,"code":"const blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      if (pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 && (board[pos[0].y][pos[0].x] === 1 || board[pos[0].y][pos[0].x] === data.BLACK) || pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 && (board[pos[1].y][pos[1].x] === 1 || board[pos[1].y][pos[1].x] === data.BLACK) || pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 && (board[pos[2].y][pos[2].x] === 1 || board[pos[2].y][pos[2].x] === data.BLACK) || pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 && (board[pos[3].y][pos[3].x] === 1 || board[pos[3].y][pos[3].x] === data.BLACK)) return false;\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && blockCase(x, y, board, offset)) board[y][x] = 9;\n    }\n  }\n};\nconst isEmpty = board => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] === 9) return false;\n    }\n  }\n  return true;\n};\nconst getBlockedBoard = (board, offset) => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, offset);\n  return res;\n};\nconst getBlockedBoards = board => {\n  var blockedBoards = [];\n  var blockedBoard;\n  var offset = 1;\n  while (true) {\n    blockedBoard = getBlockedBoard(board, offset);\n    blockedBoards.push(blockedBoard);\n    if (isEmpty(blockedBoard)) return blockedBoards;\n    offset += 1;\n  }\n};\nconst getIaPath = board => {\n  var iaPath = [];\n  var blockedBoards = getBlockedBoards();\n  for (var c = 0; c < blockedBoards.length; c++) {\n    for (var y = 0; y < 19; y++) {\n      for (var x = 0; x < 19; x++) {\n        if (!blockedBoards[c][y][x]) {\n          iaPath.push({\n            x,\n            y\n          });\n          if (c + 1 < blockedBoards.length) {\n            blockedBoards[c + 1][y][x] = 9;\n          }\n        }\n      }\n    }\n  }\n  console.log(iaPath);\n};\nexport default getIaPath;","map":{"version":3,"names":["blockCase","x","y","board","offset","pos","c","i","data","BLACK","blockBoard","isEmpty","getBlockedBoard","res","getBlockedBoards","blockedBoards","blockedBoard","push","getIaPath","iaPath","length","console","log"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/pages/humanvsia/getIaPath.js"],"sourcesContent":["const blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            if (\n                (\n                    pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 &&\n                    (board[pos[0].y][pos[0].x] === 1 || board[pos[0].y][pos[0].x] === data.BLACK)\n                ) ||\n                (\n                    pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 &&\n                    (board[pos[1].y][pos[1].x] === 1 || board[pos[1].y][pos[1].x] === data.BLACK)\n                ) ||\n                (\n                    pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 &&\n                    (board[pos[2].y][pos[2].x] === 1 || board[pos[2].y][pos[2].x] === data.BLACK)\n                ) ||\n                (\n                    pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 &&\n                    (board[pos[3].y][pos[3].x] === 1 || board[pos[3].y][pos[3].x] === data.BLACK)\n                )\n            )\n                    return false\n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n            \n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && blockCase(x, y, board, offset))\n                board[y][x] = 9\n        }\n    }\n}\n\nconst isEmpty = board => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] === 9)\n                return false\n        }\n    }\n    return true\n}\n\nconst getBlockedBoard = (board, offset) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, offset)\n    return res\n}\n\nconst getBlockedBoards = board => {\n    var blockedBoards = []\n    var blockedBoard\n    var offset = 1\n    while (true){\n        blockedBoard = getBlockedBoard(board, offset)\n        blockedBoards.push(blockedBoard)\n        if (isEmpty(blockedBoard))\n            return blockedBoards\n        offset += 1\n    }\n}\n\nconst getIaPath = board => {\n    var iaPath = []\n    var blockedBoards = getBlockedBoards()\n    for (var c = 0; c < blockedBoards.length; c++){\n        for (var y = 0; y < 19; y++){\n            for(var x = 0; x < 19; x++){\n                if (!blockedBoards[c][y][x]){\n                    iaPath.push({x, y})\n                    if (c + 1 < blockedBoards.length){\n                        blockedBoards[c + 1][y][x] = 9\n                    }\n                }\n            }\n        }\n    }\n    console.log(iaPath)\n}\n\nexport default getIaPath"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}