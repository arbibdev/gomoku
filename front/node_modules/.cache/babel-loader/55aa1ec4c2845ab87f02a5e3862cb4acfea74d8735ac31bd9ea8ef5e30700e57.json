{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\nconst printBackground = (data, images) => {\n  data.ctx.fillStyle = '#a6683e';\n  data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height);\n  for (var y = 0; y < 18; y++) {\n    for (var x = 0; x < 18; x++) data.ctx.drawImage(images.gomokuBoard, x * images.gomokuBoard.width + images.blackPiece.width / 2, y * images.gomokuBoard.height + images.blackPiece.width / 2);\n  }\n};\nconst printStones = (data, images) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (data.board[y][x]) {\n        var stone;\n        if (data.board[y][x] === 'black') stone = images.blackPiece;else if (data.board[y][x] === 'white') stone = images.whitePiece;else stone = images.forbidden;\n        data.ctx.drawImage(stone, images.gomokuBoard.width * x, images.gomokuBoard.height * y);\n      }\n    }\n  }\n};\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board;\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst getHeuristic = node => {\n  var board = getBoard(node);\n  return 10;\n};\nconst getBestMove = (node, extrem, depth) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[`${nbNode}`]) {\n    if (bestHeuristic === false || extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic || extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic) {\n      bestHeuristic = node[`${nbNode}`].heuristic;\n    }\n    nbNode++;\n  }\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  nbNode = 0;\n  var bestMove = [];\n  while (node[`${nbNode}`]) {\n    if (node[`${nbNode}`].heuristic === bestHeuristic) {\n      bestMove.push({\n        x: node[`${nbNode}`].x,\n        y: node[`${nbNode}`].y\n      });\n    }\n    nbNode++;\n  }\n  var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length);\n  return {\n    heuristic: bestHeuristic,\n    x: bestMove[moveChoosen].x,\n    y: bestMove[moveChoosen].y\n  };\n};\nconst minmax = (node, depth) => {\n  var nbNode = 0;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color: data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor\n        };\n        if (depth > 1) {\n          minmax(node, depth - 1);\n        } else node[`${nbNode}`].heuristic = getHeuristic(node);\n        nbNode++;\n      }\n    }\n  }\n  var bestMove;\n  if (data.depth % 2 !== depth % 2) bestMove = getBestMove(node, 'min', depth);else bestMove = getBestMove(node, 'max', depth);\n  if (depth === data.depth) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n  node.heuristic = bestMove.heuristic;\n};\nconst blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      if (board[pos[0].y][pos[0].x] || board[pos[1].y][pos[1].x] || board[pos[2].y][pos[2].x] || board[pos[3].y][pos[3].x]) return false;\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (blockCase(x, y, board, offset)) board[y][x] = 1;\n    }\n  }\n};\nconst getStartBoard = board => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, 2);\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.board = getStartBoard(board);\n  data.depth = 1;\n};\nconst ia = (board, playerColor, mainData, images) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  mainData.board = data.board;\n  printBackground(mainData, images);\n  printStones(mainData, images);\n  return;\n  var tree = {};\n  return minmax(tree, data.depth);\n};\nexport default ia;","map":{"version":3,"names":["getRandomInt","printBackground","data","images","ctx","fillStyle","fillRect","canvas","width","height","y","x","drawImage","gomokuBoard","blackPiece","printStones","board","stone","whitePiece","forbidden","getBoard","node","res","parent","color","noStones","getHeuristic","getBestMove","extrem","depth","nbNode","bestHeuristic","heuristic","bestMove","push","moveChoosen","length","minmax","iaColor","playerColor","blockCase","offset","pos","c","i","blockBoard","getStartBoard","initData","ia","mainData","tree"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\n\nconst printBackground = (data, images) => {\n    data.ctx.fillStyle = '#a6683e'\n    data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height)\n    for (var y = 0; y < 18; y++){\n        for (var x = 0; x < 18; x++)\n            data.ctx.drawImage(\n                images.gomokuBoard,\n                x * images.gomokuBoard.width + images.blackPiece.width / 2,\n                y * images.gomokuBoard.height + images.blackPiece.width / 2\n            )\n    }\n}\n\nconst printStones = (data, images) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (data.board[y][x]){\n                var stone\n                if (data.board[y][x] === 'black')\n                    stone = images.blackPiece\n                else if (data.board[y][x] === 'white')\n                    stone = images.whitePiece\n                else\n                    stone = images.forbidden\n                data.ctx.drawImage(\n                    stone,\n                    images.gomokuBoard.width * x,\n                    images.gomokuBoard.height * y\n                )\n            }\n        }\n    }\n}\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst getHeuristic = (node) => {\n    var board = getBoard(node)\n    return 10\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[`${nbNode}`]){\n        if (\n            bestHeuristic === false ||\n            (extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic) ||\n            (extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[`${nbNode}`].heuristic\n        }\n        nbNode++\n    }\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    nbNode = 0\n    var bestMove = []\n    while (node[`${nbNode}`]){\n        if (node[`${nbNode}`].heuristic === bestHeuristic){\n            bestMove.push({\n                x : node[`${nbNode}`].x,\n                y : node[`${nbNode}`].y\n            })\n        }\n        nbNode++\n    }\n    var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length)\n    return {\n        heuristic : bestHeuristic,\n        x : bestMove[moveChoosen].x,\n        y : bestMove[moveChoosen].y\n    }\n}\n\nconst minmax = (node, depth) => {\n    var nbNode = 0\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n                }\n                if (depth > 1){\n                    minmax(node, depth - 1)\n                }\n                else\n                    node[`${nbNode}`].heuristic = getHeuristic(node)\n                nbNode++\n            }\n        }\n    }\n    var bestMove\n    if ((data.depth % 2) !== (depth % 2))\n        bestMove = getBestMove(node, 'min', depth)\n    else\n        bestMove = getBestMove(node, 'max', depth)\n    if (depth === data.depth)\n        return {x : bestMove.x, y : bestMove.y}\n    node.heuristic = bestMove.heuristic\n}\n\n\nconst blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            if (\n                board[pos[0].y][pos[0].x] ||\n                board[pos[1].y][pos[1].x] ||\n                board[pos[2].y][pos[2].x] ||\n                board[pos[3].y][pos[3].x]\n            )\n                return false \n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (blockCase(x, y, board, offset))\n                board[y][x] = 1\n        }\n    }\n}\n\nconst getStartBoard = board => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, 2)\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.board = getStartBoard(board)\n    data.depth = 1\n}\n\nconst ia = (board, playerColor, mainData, images) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    mainData.board = data.board\n    printBackground(mainData, images)\n    printStones(mainData, images)\n    return\n    var tree = {}\n    return(minmax(tree, data.depth))\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}