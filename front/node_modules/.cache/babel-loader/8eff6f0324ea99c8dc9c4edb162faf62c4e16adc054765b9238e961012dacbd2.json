{"ast":null,"code":"import { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\nimport ai from '../../tools/ai/ai';\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst setEndGame = data => {};\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tlaunchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     printBoard(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n// CLICK WITH C ALGO\n\nconst getSuggestion = data => {};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame || data.aiLaunched) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = data.turn;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    if (data.endGame = checkEndGame(data)) {\n      setEndGame(data);\n      return;\n    }\n    data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE;\n    data.suggestion = getSuggestion(data);\n    printSuggestion(data);\n  }\n};\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n};\nconst receiveAiMove = (data, pos) => {\n  data.aiLunched = false;\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.piecesOnBoard += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  printBoard(data);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n  data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  // launchAi(data)\n};\n\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs human'\n    }\n  });\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  // printBoard(data)\n  // printSuggestion(data)\n  data.aiMoves = 0;\n  data.aiTimePlay = 0;\n  data.aiColor = data.firstPlayerColor;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  // data.canvas.onclick = e => launchAi(data)\n  data.suggestion = getSuggestion(data);\n  launchAi(data);\n};\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","serverIp","printBoard","checkEndGame","io","ai","printSuggestion","data","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","setEndGame","getSuggestion","canvasOnClick","e","endGame","aiLaunched","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","board","turn","piecesOnBoard","WHITE","BLACK","launchAi","startAi","window","performance","now","receiveAiMove","pos","aiLunched","timeAi","Math","floor","playerColor","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","aiColor","initGame","firstPlayerColor","socket","on","query","page","DRAW","document","getElementById","getContext","aiTimePlay","onclick"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\nimport ai from '../../tools/ai/ai'\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst setEndGame = (data) => {\n}\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tlaunchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     printBoard(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n\n\n\n\n// CLICK WITH C ALGO\n\nconst getSuggestion = data => {\n\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame || data.aiLaunched)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = data.turn\n        data.piecesOnBoard += 1\n        printBoard(data)\n        if ((data.endGame = checkEndGame(data))){\n            setEndGame(data)\n            return\n        }\n        data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n        data.suggestion = getSuggestion(data)\n        printSuggestion(data)\n    }\n}\n\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\t\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    printBoard(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t// launchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    // printBoard(data)\n    // printSuggestion(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.canvas.onclick = e => canvasOnClick(e, data)\n\t// data.canvas.onclick = e => launchAi(data)\n\tdata.suggestion = getSuggestion(data)\n\tlaunchAi(data)\n}\n\n\nexport default initGame"],"mappings":"AACA,SAASA,gBAAgB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,mBAAmB;AACzE,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,EAAE,MAAM,mBAAmB;;AAElC;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAGC,IAAI,IAAI;EAC5BA,IAAI,CAACC,GAAG,CAACC,SAAS,CACdF,IAAI,CAACG,MAAM,CAACC,UAAU,EACtBJ,IAAI,CAACG,MAAM,CAACE,WAAW,CAACC,KAAK,GAAGN,IAAI,CAACI,UAAU,CAACG,CAAC,GAAG,EAAE,EACtDP,IAAI,CAACG,MAAM,CAACE,WAAW,CAACG,MAAM,GAAGR,IAAI,CAACI,UAAU,CAACK,CAAC,GAAG,EAAE,CAC1D;AACL,CAAC;AAED,MAAMC,UAAU,GAAIV,IAAI,IAAK,CAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}