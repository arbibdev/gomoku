{"ast":null,"code":"// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBoard = (board, node) => {\n//     var res = []\n//     for (var y = 0; y < 19; y++){\n//         res[y] = []\n//         for (var x = 0; x < 19; x++){\n//             res[y][x] = board\n//         }\n//     }\n//     while (node.parent){\n//         res[node.y][node.x] = node.color\n//         node = node.parent\n//     }\n//     return res\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\nvar data;\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst getHeuristic = () => {};\nconst getBestMove = (node, extrem) => {\n  var nbNode = 0;\n  var bestPos = [];\n  var bestHeuristic = [];\n  while (node[`${nbNode}`]) {\n    if (bestPos) {\n      bestHeuristic = node[`${nbNode}`].heuristic;\n    }\n  }\n};\nconst minmax = (node, depth) => {\n  var nbNode;\n  // var board = getBoard(data.board, node)\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color: data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor\n        };\n        if (depth > 1) {\n          minmax(node, depth - 1);\n        } else node[`${nbNode}`].heuristic = getHeuristic();\n        nbNode++;\n      }\n    }\n  }\n  if (data.depth % 2 !== depth % 2) node.bestMove = getBestMove(node, 'min');else node.bestMove = getBestMove(node, 'max');\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.board = board;\n  data.depth = 1;\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  var tree = {};\n  minmax(tree, data.depth);\n  getHeuristic(tree);\n  return getBestMove(tree);\n};\nexport default ia;","map":{"version":3,"names":["data","noStones","node","x","y","parent","getHeuristic","getBestMove","extrem","nbNode","bestPos","bestHeuristic","heuristic","minmax","depth","board","color","iaColor","playerColor","bestMove","initData","ia","tree"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBoard = (board, node) => {\n//     var res = []\n//     for (var y = 0; y < 19; y++){\n//         res[y] = []\n//         for (var x = 0; x < 19; x++){\n//             res[y][x] = board\n//         }\n//     }\n//     while (node.parent){\n//         res[node.y][node.x] = node.color\n//         node = node.parent\n//     }\n//     return res\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\nvar data\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst getHeuristic = () => {\n\n}\n\nconst getBestMove = (node, extrem) => {\n    var nbNode = 0\n    var bestPos = []\n    var bestHeuristic = []\n    while (node[`${nbNode}`]){\n        if (bestPos){\n            bestHeuristic = node[`${nbNode}`].heuristic\n        }\n    }\n}\n\nconst minmax = (node, depth) => {\n    var nbNode\n    // var board = getBoard(data.board, node)\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n                }\n                if (depth > 1){\n                    minmax(node, depth - 1)\n                }\n                else\n                    node[`${nbNode}`].heuristic = getHeuristic()\n                nbNode++\n            }\n        }\n    }\n    if ((data.depth % 2) !== (depth % 2))\n        node.bestMove = getBestMove(node, 'min')\n    else\n        node.bestMove = getBestMove(node, 'max')\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.board = board\n    data.depth = 1\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    var tree = {}\n    minmax(tree, data.depth)\n    getHeuristic(tree)\n    return (getBestMove(tree))\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}