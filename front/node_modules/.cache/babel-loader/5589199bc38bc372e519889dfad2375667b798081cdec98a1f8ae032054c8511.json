{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\nvar data;\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst getHeuristic = node => {\n  var board = getBoard(data.board, node);\n};\nconst getBestMove = (node, extrem, depth) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[`${nbNode}`]) {\n    if (bestHeuristic === false || extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic || extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic) {\n      bestHeuristic = node[`${nbNode}`].heuristic;\n    }\n  }\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  var bestMove = [];\n  while (node[`${nbNode}`]) {\n    if (node[`${nbNode}`].heuristic === bestHeuristic) {\n      bestMove.push({\n        x: node[`${nbNode}`].x,\n        y: node[`${nbNode}`].y\n      });\n    }\n  }\n  var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length);\n  return {\n    heuristic: bestHeuristic,\n    bestMove: {\n      x: bestMove[moveChoosen].x,\n      y: bestMove[moveChoosen].y\n    }\n  };\n};\nconst minmax = (node, depth) => {\n  var nbNode;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color: data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor\n        };\n        if (depth > 1) {\n          minmax(node, depth - 1);\n        } else node[`${nbNode}`].heuristic = getHeuristic(node);\n        nbNode++;\n      }\n    }\n  }\n  if (data.depth % 2 !== depth % 2) node = {\n    ...node,\n    ...getBestMove(node, 'min', depth)\n  };else node = {\n    ...node,\n    ...getBestMove(node, 'max', depth)\n  };\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.board = board;\n  data.depth = 1;\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  var tree = {};\n  minmax(tree, data.depth);\n  getHeuristic(tree);\n  return getBestMove(tree);\n};\nexport default ia;","map":{"version":3,"names":["getRandomInt","data","noStones","node","x","y","parent","getHeuristic","board","getBoard","getBestMove","extrem","depth","nbNode","bestHeuristic","heuristic","bestMove","push","moveChoosen","length","minmax","color","iaColor","playerColor","initData","ia","tree"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\nvar data\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst getHeuristic = (node) => {\n    var board = getBoard(data.board, node)\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[`${nbNode}`]){\n        if (\n            bestHeuristic === false ||\n            (extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic) ||\n            (extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[`${nbNode}`].heuristic\n        }\n    }\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    var bestMove = []\n    while (node[`${nbNode}`]){\n        if (node[`${nbNode}`].heuristic === bestHeuristic){\n            bestMove.push({\n                x : node[`${nbNode}`].x,\n                y : node[`${nbNode}`].y\n            })\n        }\n    }\n    var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length)\n    return {\n        heuristic : bestHeuristic,\n        bestMove : {\n            x : bestMove[moveChoosen].x,\n            y : bestMove[moveChoosen].y\n        }\n    }\n}\n\nconst minmax = (node, depth) => {\n    var nbNode\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n                }\n                if (depth > 1){\n                    minmax(node, depth - 1)\n                }\n                else\n                    node[`${nbNode}`].heuristic = getHeuristic(node)\n                nbNode++\n            }\n        }\n    }\n    if ((data.depth % 2) !== (depth % 2))\n        node = {...node, ...getBestMove(node, 'min', depth)}\n    else\n        node = {...node, ...getBestMove(node, 'max', depth)}\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.board = board\n    data.depth = 1\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    var tree = {}\n    minmax(tree, data.depth)\n    getHeuristic(tree)\n    return (getBestMove(tree))\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}