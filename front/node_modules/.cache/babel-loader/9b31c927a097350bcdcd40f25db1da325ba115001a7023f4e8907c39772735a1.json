{"ast":null,"code":"import { getStonePosition, initBoard, serverIp } from '../../tools/tools';\nimport printBoard from '../../tools/printBoard';\nimport { checkEndGame } from '../../tools/checkEndGame';\nimport { io } from \"socket.io-client\";\nimport ai from '../../tools/ai/ai';\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\n// const printSuggestion = data => {\n//     data.ctx.drawImage(\n//         data.images.suggestion,\n//         data.images.gomokuBoard.width * data.suggestion.x - 75,\n//         data.images.gomokuBoard.height * data.suggestion.y - 75\n//     )\n// }\n\nconst setEndGame = data => {};\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tlaunchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     printBoard(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n// CLICK WITH C ALGO\n\nconst printSuggestion = data => {\n  data.ctx.drawImage(data.images.suggestion, data.images.gomokuBoard.width * data.suggestion.x - 75, data.images.gomokuBoard.height * data.suggestion.y - 75);\n};\nconst getSuggestion = data => {\n  data.aiLaunched = true;\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst canvasOnMouseLeave = (e, data) => {\n  if (data.endGame) return;\n  printBoard(data);\n  if (!data.aiLaunched) printSuggestion(data);\n};\nconst canvasOnMouseMove = (e, data) => {\n  if (data.endGame || data.aiLaunched) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (stone.y === 19) return;\n  if (!data.board[stone.y][stone.x]) {\n    printBoard(data);\n    printSuggestion(data);\n    data.ctx.globalAlpha = 0.5;\n    data.ctx.drawImage(data.ai === data.WHITE ? data.images.whitePiece : data.images.blackPiece, data.images.gomokuBoard.width * stone.x, data.images.gomokuBoard.height * stone.y);\n    data.ctx.globalAlpha = 1;\n  } else {\n    printBoard(data);\n    printSuggestion(data);\n  }\n};\nconst canvasOnClick = (e, data) => {\n  if (data.endGame || data.aiLaunched) return;\n  var canvasOffsetWidth = data.canvas.offsetWidth;\n  var canvasOffsetHeight = data.canvas.offsetHeight;\n  var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight);\n  if (!data.board[stone.y][stone.x]) {\n    data.board[stone.y][stone.x] = data.aiColor;\n    data.piecesOnBoard += 1;\n    printBoard(data);\n    if (data.endGame = checkEndGame(data)) {\n      setEndGame(data);\n      return;\n    }\n    console.log(data.aiColor);\n    data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n    data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n    console.log(data.aiColor);\n    getSuggestion(data);\n  }\n};\nconst launchAi = data => {\n  data.startAi = window.performance.now();\n  data.aiLaunched = true;\n  data.socket.emit('ai', {\n    aiColor: data.aiColor,\n    board: data.board\n  });\n};\nconst receiveAiMove = (data, pos) => {\n  data.aiLaunched = false;\n  const timeAi = Math.floor(window.performance.now() - data.startAi);\n  // data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n  data.suggestion = {\n    x: pos.x,\n    y: pos.y\n  };\n  data.piecesOnBoard += 1;\n  var nbSeconds = Math.floor(timeAi / 1000) % 1000;\n  var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0');\n  data.aiMoves += 1;\n  data.piecesOnBoard += 1;\n  data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`);\n  printBoard(data);\n  printSuggestion(data);\n  if (data.endGame = checkEndGame(data)) {\n    setEndGame(data);\n    return;\n  }\n  // data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n  // data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n  // launchAi(data)\n};\n\nconst initGame = (images, firstPlayerColor) => {\n  var data = {};\n  data.socket = io(serverIp, {\n    query: {\n      page: 'human vs human'\n    }\n  });\n  data.socket.on('ai', pos => {\n    receiveAiMove(data, pos);\n  });\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.DRAW = 3;\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  data.turn = firstPlayerColor;\n  data.piecesOnBoard = 0;\n  data.firstPlayerColor = firstPlayerColor;\n  data.images = images;\n  // printBoard(data)\n  // printSuggestion(data)\n  data.aiMoves = 0;\n  data.aiTimePlay = 0;\n  data.aiColor = data.firstPlayerColor;\n  data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK;\n  data.canvas.onclick = e => canvasOnClick(e, data);\n  data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data);\n  data.canvas.onmousemove = e => canvasOnMouseMove(e, data);\n\n  // data.canvas.onclick = e => launchAi(data)\n  getSuggestion(data);\n  launchAi(data);\n};\nexport default initGame;","map":{"version":3,"names":["getStonePosition","initBoard","serverIp","printBoard","checkEndGame","io","ai","setEndGame","data","printSuggestion","ctx","drawImage","images","suggestion","gomokuBoard","width","x","height","y","getSuggestion","aiLaunched","startAi","window","performance","now","socket","emit","aiColor","board","canvasOnMouseLeave","e","endGame","canvasOnMouseMove","canvasOffsetWidth","canvas","offsetWidth","canvasOffsetHeight","offsetHeight","stone","globalAlpha","WHITE","whitePiece","blackPiece","canvasOnClick","piecesOnBoard","console","log","BLACK","playerColor","launchAi","receiveAiMove","pos","timeAi","Math","floor","nbSeconds","nbMilliSeconds","padStart","aiMoves","aiTotalTime","parseFloat","initGame","firstPlayerColor","query","page","on","DRAW","document","getElementById","getContext","turn","aiTimePlay","onclick","onmouseleave","onmousemove"],"sources":["/Users/adauchy/work/ft/gomoku/myGomokuGit/front/src/pages/humanVsHuman/initGame.js"],"sourcesContent":["\nimport { getStonePosition, initBoard, serverIp } from '../../tools/tools'\nimport printBoard from '../../tools/printBoard'\nimport { checkEndGame } from '../../tools/checkEndGame'\nimport { io } from \"socket.io-client\"\nimport ai from '../../tools/ai/ai'\n\n// const getSuggestion = data => {\n//     data.playerColor = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//     return ai(data)\n// }\n\n// const printSuggestion = data => {\n//     data.ctx.drawImage(\n//         data.images.suggestion,\n//         data.images.gomokuBoard.width * data.suggestion.x - 75,\n//         data.images.gomokuBoard.height * data.suggestion.y - 75\n//     )\n// }\n\nconst setEndGame = (data) => {\n}\n\n// const canvasOnMouseMove = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (stone.y === 19)\n//         return\n//     if (!data.board[stone.y][stone.x]){\n//         printBoard(data)\n//         printSuggestion(data)\n//         data.ctx.globalAlpha = 0.5\n//         data.ctx.drawImage(\n//             data.turn === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n//             data.images.gomokuBoard.width * stone.x,\n//             data.images.gomokuBoard.height * stone.y\n//         )\n//         data.ctx.globalAlpha = 1\n//     }\n//     else{\n//         printBoard(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnClick = (e, data) => {\n//     if (data.endGame)\n//         return\n//     var canvasOffsetWidth = data.canvas.offsetWidth\n//     var canvasOffsetHeight = data.canvas.offsetHeight\n//     var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n//     if (!data.board[stone.y][stone.x]){\n//         data.board[stone.y][stone.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         if ((data.endGame = checkEndGame(data))){\n//             setEndGame(data)\n//             return\n//         }\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         data.suggestion = getSuggestion(data)\n//         printSuggestion(data)\n//     }\n// }\n\n// const canvasOnMouseLeave = (e, data) => {\n//     if (data.endGame)\n//             return\n//         printBoard(data)\n//         printSuggestion(data)\n// }\n\n// CLICK WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n//     data.canvas.onclick = e => canvasOnClick(e, data)\n//     data.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n// }\n\n// AUTOPLAY WITH JAVASCRIPT ALGO\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     data.suggestion = getSuggestion(data)\n//     printBoard(data)\n//     printSuggestion(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n//     var pos\n//     var inter = setInterval(() => {\n//         const start = window.performance.now()\n//         pos = ai(data)\n//         const end = window.performance.now()\n//         data.aiMoves += 1\n//         data.aiTimePlay += end - start\n//         data.board[pos.y][pos.x] = data.turn\n//         data.piecesOnBoard += 1\n//         printBoard(data)\n//         data.turn = data.turn === data.WHITE ? data.BLACK : data.WHITE\n//         console.log(data.aiTimePlay / data.aiMoves)\n//         if (checkEndGame(data))\n//             clearInterval(inter)\n//     }, 0)\n// }\n\n// AUTO PLAY WITH C ALGO\n\n\n\n// const launchAi = data => {\n// \tdata.startAi = window.performance.now()\n// \tdata.aiLaunched = true\n// \tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n// }\n\n// const receiveAiMove = (data, pos) => {\n// \tdata.aiLaunched = false\n//     const timeAi = Math.floor(window.performance.now() - data.startAi)\n//     data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n//     data.piecesOnBoard += 1\n//     var nbSeconds = Math.floor(timeAi / 1000) % 1000\n//     var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n//     data.aiMoves += 1\n// \tdata.piecesOnBoard += 1\n//     data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n//     printBoard(data)\n//     if ((data.endGame = checkEndGame(data))){\n//         setEndGame(data)\n//         return\n//     }\n// \tdata.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \tlaunchAi(data)\n// }\n\n// const initGame = (images, firstPlayerColor) => {\n//     var data = {}\n// \tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n//     data.WHITE = 1\n//     data.BLACK = 2\n//     data.DRAW = 3\n//     data.canvas = document.getElementById('canvas')\n//     data.ctx = data.canvas.getContext('2d')\n//     data.board = initBoard()\n//     data.turn = firstPlayerColor\n//     data.piecesOnBoard = 0\n//     data.firstPlayerColor = firstPlayerColor\n//     data.images = images\n//     printBoard(data)\n//     data.aiMoves = 0\n//     data.aiTimePlay = 0\n\n// \tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n// \tdata.aiColor = data.firstPlayerColor\n// \tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n// \t// data.canvas.onclick = e => launchAi(data)\n// \tlaunchAi(data)\n// }\n\n\n\n\n\n// CLICK WITH C ALGO\n\nconst printSuggestion = data => {\n    data.ctx.drawImage(\n        data.images.suggestion,\n        data.images.gomokuBoard.width * data.suggestion.x - 75,\n        data.images.gomokuBoard.height * data.suggestion.y - 75\n    )\n}\n\nconst getSuggestion = data => {\n\tdata.aiLaunched = true\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst canvasOnMouseLeave = (e, data) => {\n\tif (data.endGame)\n\t\t\treturn\n\t\tprintBoard(data)\n\tif (!data.aiLaunched)\n\t\tprintSuggestion(data)\n}\n\nconst canvasOnMouseMove = (e, data) => {\n    if (data.endGame || data.aiLaunched)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (stone.y === 19)\n        return\n    if (!data.board[stone.y][stone.x]){\n        printBoard(data)\n        printSuggestion(data)\n        data.ctx.globalAlpha = 0.5\n        data.ctx.drawImage(\n            data.ai === data.WHITE ? data.images.whitePiece : data.images.blackPiece,\n            data.images.gomokuBoard.width * stone.x,\n            data.images.gomokuBoard.height * stone.y\n        )\n        data.ctx.globalAlpha = 1\n    }\n    else{\n        printBoard(data)\n        printSuggestion(data)\n    }\n}\n\nconst canvasOnClick = (e, data) => {\n    if (data.endGame || data.aiLaunched)\n        return\n    var canvasOffsetWidth = data.canvas.offsetWidth\n    var canvasOffsetHeight = data.canvas.offsetHeight\n    var stone = getStonePosition(data, e, canvasOffsetWidth, canvasOffsetHeight)\n    if (!data.board[stone.y][stone.x]){\n        data.board[stone.y][stone.x] = data.aiColor\n        data.piecesOnBoard += 1\n        printBoard(data)\n        if ((data.endGame = checkEndGame(data))){\n            setEndGame(data)\n            return\n        }\n\t\tconsole.log(data.aiColor)\n        data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t\tconsole.log(data.aiColor)\n        getSuggestion(data)\n    }\n}\n\n\nconst launchAi = data => {\n\tdata.startAi = window.performance.now()\n\tdata.aiLaunched = true\n\tdata.socket.emit('ai', {aiColor : data.aiColor, board : data.board})\n}\n\nconst receiveAiMove = (data, pos) => {\n\tdata.aiLaunched = false\n    const timeAi = Math.floor(window.performance.now() - data.startAi)\n    // data.board[pos.y][pos.x] = data.playerColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.suggestion = {x : pos.x, y : pos.y}\n    data.piecesOnBoard += 1\n    var nbSeconds = Math.floor(timeAi / 1000) % 1000\n    var nbMilliSeconds = `${timeAi % 1000}`.padStart(3, '0')\n    data.aiMoves += 1\n\tdata.piecesOnBoard += 1\n    data.aiTotalTime += parseFloat(`${nbSeconds}.${nbMilliSeconds}`)\n    printBoard(data)\n\tprintSuggestion(data)\n    if ((data.endGame = checkEndGame(data))){\n        setEndGame(data)\n        return\n    }\n\t// data.aiColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t// data.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\t// launchAi(data)\n}\n\nconst initGame = (images, firstPlayerColor) => {\n    var data = {}\n\tdata.socket = io(serverIp, {query : {page : 'human vs human'}})\n\tdata.socket.on('ai', pos => {receiveAiMove(data, pos)})\n    data.WHITE = 1\n    data.BLACK = 2\n    data.DRAW = 3\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    data.turn = firstPlayerColor\n    data.piecesOnBoard = 0\n    data.firstPlayerColor = firstPlayerColor\n    data.images = images\n    // printBoard(data)\n    // printSuggestion(data)\n    data.aiMoves = 0\n    data.aiTimePlay = 0\n\tdata.aiColor = data.firstPlayerColor\n\tdata.playerColor = data.aiColor === data.BLACK ? data.WHITE : data.BLACK\n\tdata.canvas.onclick = e => canvasOnClick(e, data)\n\tdata.canvas.onmouseleave = e => canvasOnMouseLeave(e, data)\n\tdata.canvas.onmousemove = e => canvasOnMouseMove(e, data)\n\n\t// data.canvas.onclick = e => launchAi(data)\n\tgetSuggestion(data)\n\tlaunchAi(data)\n}\n\n\nexport default initGame"],"mappings":"AACA,SAASA,gBAAgB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,mBAAmB;AACzE,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,EAAE,MAAM,mBAAmB;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAIC,IAAI,IAAK,CAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAEA,MAAMC,eAAe,GAAGD,IAAI,IAAI;EAC5BA,IAAI,CAACE,GAAG,CAACC,SAAS,CACdH,IAAI,CAACI,MAAM,CAACC,UAAU,EACtBL,IAAI,CAACI,MAAM,CAACE,WAAW,CAACC,KAAK,GAAGP,IAAI,CAACK,UAAU,CAACG,CAAC,GAAG,EAAE,EACtDR,IAAI,CAACI,MAAM,CAACE,WAAW,CAACG,MAAM,GAAGT,IAAI,CAACK,UAAU,CAACK,CAAC,GAAG,EAAE,CAC1D;AACL,CAAC;AAED,MAAMC,aAAa,GAAGX,IAAI,IAAI;EAC7BA,IAAI,CAACY,UAAU,GAAG,IAAI;EACtBZ,IAAI,CAACa,OAAO,GAAGC,MAAM,CAACC,WAAW,CAACC,GAAG,EAAE;EACvChB,IAAI,CAACY,UAAU,GAAG,IAAI;EACtBZ,IAAI,CAACiB,MAAM,CAACC,IAAI,CAAC,IAAI,EAAE;IAACC,OAAO,EAAGnB,IAAI,CAACmB,OAAO;IAAEC,KAAK,EAAGpB,IAAI,CAACoB;EAAK,CAAC,CAAC;AACrE,CAAC;AAED,MAAMC,kBAAkB,GAAG,CAACC,CAAC,EAAEtB,IAAI,KAAK;EACvC,IAAIA,IAAI,CAACuB,OAAO,EACd;EACD5B,UAAU,CAACK,IAAI,CAAC;EACjB,IAAI,CAACA,IAAI,CAACY,UAAU,EACnBX,eAAe,CAACD,IAAI,CAAC;AACvB,CAAC;AAED,MAAMwB,iBAAiB,GAAG,CAACF,CAAC,EAAEtB,IAAI,KAAK;EACnC,IAAIA,IAAI,CAACuB,OAAO,IAAIvB,IAAI,CAACY,UAAU,EAC/B;EACJ,IAAIa,iBAAiB,GAAGzB,IAAI,CAAC0B,MAAM,CAACC,WAAW;EAC/C,IAAIC,kBAAkB,GAAG5B,IAAI,CAAC0B,MAAM,CAACG,YAAY;EACjD,IAAIC,KAAK,GAAGtC,gBAAgB,CAACQ,IAAI,EAAEsB,CAAC,EAAEG,iBAAiB,EAAEG,kBAAkB,CAAC;EAC5E,IAAIE,KAAK,CAACpB,CAAC,KAAK,EAAE,EACd;EACJ,IAAI,CAACV,IAAI,CAACoB,KAAK,CAACU,KAAK,CAACpB,CAAC,CAAC,CAACoB,KAAK,CAACtB,CAAC,CAAC,EAAC;IAC9Bb,UAAU,CAACK,IAAI,CAAC;IAChBC,eAAe,CAACD,IAAI,CAAC;IACrBA,IAAI,CAACE,GAAG,CAAC6B,WAAW,GAAG,GAAG;IAC1B/B,IAAI,CAACE,GAAG,CAACC,SAAS,CACdH,IAAI,CAACF,EAAE,KAAKE,IAAI,CAACgC,KAAK,GAAGhC,IAAI,CAACI,MAAM,CAAC6B,UAAU,GAAGjC,IAAI,CAACI,MAAM,CAAC8B,UAAU,EACxElC,IAAI,CAACI,MAAM,CAACE,WAAW,CAACC,KAAK,GAAGuB,KAAK,CAACtB,CAAC,EACvCR,IAAI,CAACI,MAAM,CAACE,WAAW,CAACG,MAAM,GAAGqB,KAAK,CAACpB,CAAC,CAC3C;IACDV,IAAI,CAACE,GAAG,CAAC6B,WAAW,GAAG,CAAC;EAC5B,CAAC,MACG;IACApC,UAAU,CAACK,IAAI,CAAC;IAChBC,eAAe,CAACD,IAAI,CAAC;EACzB;AACJ,CAAC;AAED,MAAMmC,aAAa,GAAG,CAACb,CAAC,EAAEtB,IAAI,KAAK;EAC/B,IAAIA,IAAI,CAACuB,OAAO,IAAIvB,IAAI,CAACY,UAAU,EAC/B;EACJ,IAAIa,iBAAiB,GAAGzB,IAAI,CAAC0B,MAAM,CAACC,WAAW;EAC/C,IAAIC,kBAAkB,GAAG5B,IAAI,CAAC0B,MAAM,CAACG,YAAY;EACjD,IAAIC,KAAK,GAAGtC,gBAAgB,CAACQ,IAAI,EAAEsB,CAAC,EAAEG,iBAAiB,EAAEG,kBAAkB,CAAC;EAC5E,IAAI,CAAC5B,IAAI,CAACoB,KAAK,CAACU,KAAK,CAACpB,CAAC,CAAC,CAACoB,KAAK,CAACtB,CAAC,CAAC,EAAC;IAC9BR,IAAI,CAACoB,KAAK,CAACU,KAAK,CAACpB,CAAC,CAAC,CAACoB,KAAK,CAACtB,CAAC,CAAC,GAAGR,IAAI,CAACmB,OAAO;IAC3CnB,IAAI,CAACoC,aAAa,IAAI,CAAC;IACvBzC,UAAU,CAACK,IAAI,CAAC;IAChB,IAAKA,IAAI,CAACuB,OAAO,GAAG3B,YAAY,CAACI,IAAI,CAAC,EAAE;MACpCD,UAAU,CAACC,IAAI,CAAC;MAChB;IACJ;IACNqC,OAAO,CAACC,GAAG,CAACtC,IAAI,CAACmB,OAAO,CAAC;IACnBnB,IAAI,CAACmB,OAAO,GAAGnB,IAAI,CAACmB,OAAO,KAAKnB,IAAI,CAACuC,KAAK,GAAGvC,IAAI,CAACgC,KAAK,GAAGhC,IAAI,CAACuC,KAAK;IAC1EvC,IAAI,CAACwC,WAAW,GAAGxC,IAAI,CAACmB,OAAO,KAAKnB,IAAI,CAACuC,KAAK,GAAGvC,IAAI,CAACgC,KAAK,GAAGhC,IAAI,CAACuC,KAAK;IACxEF,OAAO,CAACC,GAAG,CAACtC,IAAI,CAACmB,OAAO,CAAC;IACnBR,aAAa,CAACX,IAAI,CAAC;EACvB;AACJ,CAAC;AAGD,MAAMyC,QAAQ,GAAGzC,IAAI,IAAI;EACxBA,IAAI,CAACa,OAAO,GAAGC,MAAM,CAACC,WAAW,CAACC,GAAG,EAAE;EACvChB,IAAI,CAACY,UAAU,GAAG,IAAI;EACtBZ,IAAI,CAACiB,MAAM,CAACC,IAAI,CAAC,IAAI,EAAE;IAACC,OAAO,EAAGnB,IAAI,CAACmB,OAAO;IAAEC,KAAK,EAAGpB,IAAI,CAACoB;EAAK,CAAC,CAAC;AACrE,CAAC;AAED,MAAMsB,aAAa,GAAG,CAAC1C,IAAI,EAAE2C,GAAG,KAAK;EACpC3C,IAAI,CAACY,UAAU,GAAG,KAAK;EACpB,MAAMgC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAAChC,MAAM,CAACC,WAAW,CAACC,GAAG,EAAE,GAAGhB,IAAI,CAACa,OAAO,CAAC;EAClE;EACHb,IAAI,CAACK,UAAU,GAAG;IAACG,CAAC,EAAGmC,GAAG,CAACnC,CAAC;IAAEE,CAAC,EAAGiC,GAAG,CAACjC;EAAC,CAAC;EACrCV,IAAI,CAACoC,aAAa,IAAI,CAAC;EACvB,IAAIW,SAAS,GAAGF,IAAI,CAACC,KAAK,CAACF,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI;EAChD,IAAII,cAAc,GAAI,GAAEJ,MAAM,GAAG,IAAK,EAAC,CAACK,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACxDjD,IAAI,CAACkD,OAAO,IAAI,CAAC;EACpBlD,IAAI,CAACoC,aAAa,IAAI,CAAC;EACpBpC,IAAI,CAACmD,WAAW,IAAIC,UAAU,CAAE,GAAEL,SAAU,IAAGC,cAAe,EAAC,CAAC;EAChErD,UAAU,CAACK,IAAI,CAAC;EACnBC,eAAe,CAACD,IAAI,CAAC;EAClB,IAAKA,IAAI,CAACuB,OAAO,GAAG3B,YAAY,CAACI,IAAI,CAAC,EAAE;IACpCD,UAAU,CAACC,IAAI,CAAC;IAChB;EACJ;EACH;EACA;EACA;AACD,CAAC;;AAED,MAAMqD,QAAQ,GAAG,CAACjD,MAAM,EAAEkD,gBAAgB,KAAK;EAC3C,IAAItD,IAAI,GAAG,CAAC,CAAC;EAChBA,IAAI,CAACiB,MAAM,GAAGpB,EAAE,CAACH,QAAQ,EAAE;IAAC6D,KAAK,EAAG;MAACC,IAAI,EAAG;IAAgB;EAAC,CAAC,CAAC;EAC/DxD,IAAI,CAACiB,MAAM,CAACwC,EAAE,CAAC,IAAI,EAAEd,GAAG,IAAI;IAACD,aAAa,CAAC1C,IAAI,EAAE2C,GAAG,CAAC;EAAA,CAAC,CAAC;EACpD3C,IAAI,CAACgC,KAAK,GAAG,CAAC;EACdhC,IAAI,CAACuC,KAAK,GAAG,CAAC;EACdvC,IAAI,CAAC0D,IAAI,GAAG,CAAC;EACb1D,IAAI,CAAC0B,MAAM,GAAGiC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EAC/C5D,IAAI,CAACE,GAAG,GAAGF,IAAI,CAAC0B,MAAM,CAACmC,UAAU,CAAC,IAAI,CAAC;EACvC7D,IAAI,CAACoB,KAAK,GAAG3B,SAAS,EAAE;EACxBO,IAAI,CAAC8D,IAAI,GAAGR,gBAAgB;EAC5BtD,IAAI,CAACoC,aAAa,GAAG,CAAC;EACtBpC,IAAI,CAACsD,gBAAgB,GAAGA,gBAAgB;EACxCtD,IAAI,CAACI,MAAM,GAAGA,MAAM;EACpB;EACA;EACAJ,IAAI,CAACkD,OAAO,GAAG,CAAC;EAChBlD,IAAI,CAAC+D,UAAU,GAAG,CAAC;EACtB/D,IAAI,CAACmB,OAAO,GAAGnB,IAAI,CAACsD,gBAAgB;EACpCtD,IAAI,CAACwC,WAAW,GAAGxC,IAAI,CAACmB,OAAO,KAAKnB,IAAI,CAACuC,KAAK,GAAGvC,IAAI,CAACgC,KAAK,GAAGhC,IAAI,CAACuC,KAAK;EACxEvC,IAAI,CAAC0B,MAAM,CAACsC,OAAO,GAAG1C,CAAC,IAAIa,aAAa,CAACb,CAAC,EAAEtB,IAAI,CAAC;EACjDA,IAAI,CAAC0B,MAAM,CAACuC,YAAY,GAAG3C,CAAC,IAAID,kBAAkB,CAACC,CAAC,EAAEtB,IAAI,CAAC;EAC3DA,IAAI,CAAC0B,MAAM,CAACwC,WAAW,GAAG5C,CAAC,IAAIE,iBAAiB,CAACF,CAAC,EAAEtB,IAAI,CAAC;;EAEzD;EACAW,aAAa,CAACX,IAAI,CAAC;EACnByC,QAAQ,CAACzC,IAAI,CAAC;AACf,CAAC;AAGD,eAAeqD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}