{"ast":null,"code":"const singleStonesHeuristic = board => {\n  var heuristic = 0;\n  var localHeuristic;\n  var freeNeighbour;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        localHeuristic = 10;\n        freeNeighbour = 1;\n        if (y - 1 >= 0 && !board[y - 1][x]) freeNeighbour += 1;\n        if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && !board[y][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1]) freeNeighbour += 1;\n        if (y + 1 < 19 && !board[y + 1][x]) freeNeighbour += 1;\n        if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && !board[y][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) localHeuristic *= freeNeighbour;\n        if (localHeuristic > 10) {\n          if (board[y][x] === data.iaColor) heuristic += localHeuristic;else heuristic -= localHeuristic;\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getNeighbour1 = (x, y, board, orientation) => {\n  if (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x] || orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1] || orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1] || orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1]) return 1;\n  return 0;\n};\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n  if (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x] || orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb] || orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb] || orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb]) return 1;\n  return 0;\n};\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL) {\n    checkedBoard[y][x] = data.VERTICAL;\n    nb++;\n    y++;\n  }\n  return nb;\n};\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL) {\n    checkedBoard[y][x] = data.HORIZONTAL;\n    nb++;\n    x++;\n  }\n  return nb;\n};\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1) {\n    checkedBoard[y][x] = data.DIAGONAL1;\n    nb++;\n    x++;\n    y++;\n  }\n  return nb;\n};\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2) {\n    checkedBoard[y][x] = data.DIAGONAL2;\n    nb++;\n    x--;\n    y++;\n  }\n  return nb;\n};\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n  var nb = 0;\n  var color = board[y][x];\n  var neighbour1 = getNeighbour1(x, y, board, orientation);\n  var saveX = x;\n  var saveY = y;\n  if (orientation === data.VERTICAL) nb = checkVerticalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.HORIZONTAL) nb = checkHorizontalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL1) nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL2) nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard);\n  if (nb > 1) {\n    var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation);\n    if (nb < 5 && !neighbour1 && !neighbour2) return false;\n    return {\n      nb,\n      neighbour1,\n      neighbour2\n    };\n  }\n  return false;\n};\nconst checkAlignment = (x, y, board, checkedBoard) => {\n  var alignment = [];\n  var ret;\n  for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++) {\n    if (ret = checkStones(x, y, board, c, checkedBoard)) alignment.push(ret);\n  }\n  return alignment;\n};\nconst initCheckedBoard = () => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = 0;\n    }\n  }\n  return res;\n};\nconst alignmentsHeuristic = board => {\n  var heuristic = 0;\n  var alignment;\n  var checkedBoard = initCheckedBoard();\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] && board[y][x] !== data.FORBIDDEN) {\n        alignment = checkAlignment(x, y, board, checkedBoard);\n        for (var c = 0; c < alignment.length; c++) {\n          if (board[y][x] === data.iaColor) heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);else heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getHeuristic = (node, data) => {\n  const start = window.performance.now();\n  var board = getBoard(node, data.board);\n  var h1 = singleStonesHeuristic(board);\n  var h2 = alignmentsHeuristic(board);\n  const end = window.performance.now();\n  data.heuristicTime += end - start;\n  return h1 + h2;\n};\nexport default getHeuristic;","map":{"version":3,"names":["singleStonesHeuristic","board","heuristic","localHeuristic","freeNeighbour","y","x","data","iaColor","getNeighbour1","orientation","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","getNeighbour2","nb","checkVerticalAlignment","color","checkedBoard","checkHorizontalAlignment","checkDiagonal1Alignment","checkDiagonal2Alignment","checkStones","neighbour1","saveX","saveY","neighbour2","checkAlignment","alignment","ret","c","push","initCheckedBoard","res","alignmentsHeuristic","FORBIDDEN","length","Math","pow","getHeuristic","node","start","window","performance","now","getBoard","h1","h2","end","heuristicTime"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/tools/ia/heuristic.js"],"sourcesContent":["\n\nconst singleStonesHeuristic = board => {\n    var heuristic = 0\n    var localHeuristic\n    var freeNeighbour\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                localHeuristic = 10\n                freeNeighbour = 1\n                if (y - 1 >= 0 && !board[y - 1][x])\n                    freeNeighbour += 1\n                if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && !board[y][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && !board[y + 1][x])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && !board[y][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n                localHeuristic *= freeNeighbour\n                if (localHeuristic > 10)\n                {\n                    if (board[y][x] === data.iaColor)\n                        heuristic += localHeuristic\n                    else\n                        heuristic -= localHeuristic\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getNeighbour1 = (x, y, board, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x]) ||\n        (orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1]) ||\n        (orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) ||\n        (orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1])\n    )\n        return 1\n    return 0\n}\n\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x]) ||\n        (orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb]) ||\n        (orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb]) ||\n        (orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb])\n    )\n        return 1\n    return 0\n}\n\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL){\n        checkedBoard[y][x] = data.VERTICAL\n        nb++\n        y++\n    }\n    return nb\n}\n\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL){\n        checkedBoard[y][x] = data.HORIZONTAL\n        nb++\n        x++\n    }\n    return nb\n}\n\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1){\n        checkedBoard[y][x] = data.DIAGONAL1\n        nb++\n        x++\n        y++\n    }\n    return nb\n}\n\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2){\n        checkedBoard[y][x] = data.DIAGONAL2\n        nb++\n        x--\n        y++\n    }\n    return nb\n}\n\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n    var nb = 0\n    var color = board[y][x]\n    var neighbour1 = getNeighbour1(x, y, board, orientation)\n    var saveX = x\n    var saveY = y\n    if (orientation === data.VERTICAL)\n        nb = checkVerticalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.HORIZONTAL)\n        nb = checkHorizontalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL1)\n        nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL2)\n        nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard)\n    if (nb > 1){\n        var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation)\n        if (nb < 5 && !neighbour1 && !neighbour2)\n            return false\n        return {\n            nb,\n            neighbour1,\n            neighbour2\n        }\n    }\n    return false\n}\n\nconst checkAlignment = (x, y, board, checkedBoard) => {\n    var alignment = []\n    var ret\n    for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++){\n        if ((ret = checkStones(x, y, board, c, checkedBoard)))\n            alignment.push(ret)\n    }\n    return alignment\n}\n\nconst initCheckedBoard = () => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = 0\n        }\n    }\n    return res\n}\n\nconst alignmentsHeuristic = (board) => {\n    var heuristic = 0\n    var alignment\n    var checkedBoard = initCheckedBoard()\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] && board[y][x] !== data.FORBIDDEN){\n                alignment = checkAlignment(x, y, board, checkedBoard)\n                for (var c = 0; c < alignment.length; c++){\n                    if (board[y][x] === data.iaColor)\n                        heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    else\n                        heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getHeuristic = (node, data) => {\n    const start = window.performance.now()\n    var board = getBoard(node, data.board)\n    var h1 = singleStonesHeuristic(board)\n    var h2 = alignmentsHeuristic(board)\n    const end = window.performance.now()\n    data.heuristicTime += end - start\n    return h1 + h2\n}\n\nexport default getHeuristic"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}