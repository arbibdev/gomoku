{"ast":null,"code":"const printBackground = (data, images) => {\n  data.ctx.fillStyle = '#a6683e';\n  data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height);\n  for (var y = 0; y < 18; y++) {\n    for (var x = 0; x < 18; x++) data.ctx.drawImage(images.gomokuBoard, x * images.gomokuBoard.width + images.blackPiece.width / 2, y * images.gomokuBoard.height + images.blackPiece.width / 2);\n  }\n};\nconst initBoard = () => {\n  var board = [];\n  for (var y = 0; y < 19; y++) {\n    board[y] = [];\n    for (var x = 0; x < 19; x++) {\n      board[y][x] = 0;\n    }\n  }\n  return board;\n};\nconst printStones = (data, images) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (data.board[y][x] === 'black' || data.board[y][x] === 'white') {\n        var stone = data.board[y][x] === 'black' ? images.blackPiece : images.whitePiece;\n        data.ctx.drawImage(stone, images.gomokuBoard.width * x, images.gomokuBoard.height * y);\n      }\n    }\n  }\n};\nconst printBoard = (data, images) => {\n  printBackground(data, images);\n  printStones(data, images);\n};\nconst getStonePosition = (data, images, e, canvasOffsetWidth, canvasOffsetHeight) => {\n  var widthSquare = canvasOffsetWidth / 19;\n  var heightSquare = canvasOffsetHeight / 19;\n  console.log(Math.floor(e.offsetX / widthSquare) * widthSquare / (data.canvas.width / canvasOffsetWidth));\n  return {\n    x: Math.floor(e.offsetX / widthSquare) * widthSquare * (data.canvas.width / canvasOffsetWidth) + data.canvas.width / 19 / 2 - images.blackPiece.width / 2,\n    y: Math.floor(e.offsetY / heightSquare) * heightSquare * (data.canvas.height / canvasOffsetHeight) + data.canvas.height / 19 / 2 - images.blackPiece.height / 2\n  };\n};\nconst initGame = (images, playerColor) => {\n  var data = {};\n  data.canvas = document.getElementById('canvas');\n  data.ctx = data.canvas.getContext('2d');\n  data.board = initBoard();\n  printBoard(data, images);\n  data.canvas.onmousemove = e => {\n    var canvasOffsetWidth = data.canvas.offsetWidth;\n    var canvasOffsetHeight = data.canvas.offsetHeight;\n    var stone = getStonePosition(data, images, e, canvasOffsetWidth, canvasOffsetHeight);\n    // var stoneX = (\n    //     (Math.floor(e.offsetX / widthSquare) * widthSquare) *\n    //     (data.canvas.width / canvasOffsetWidth) +\n    //     (data.canvas.width / 19) / 2 - images.blackPiece.width / 2\n    // )\n    // var stoneY = (\n    //     (Math.floor(e.offsetY / heightSquare) * heightSquare) *\n    //     (data.canvas.height / canvasOffsetHeight) +\n    //     (data.canvas.height / 19) / 2 - images.blackPiece.height / 2\n    // )\n    printBoard(data, images);\n    data.ctx.drawImage(playerColor === 'white' ? images.whitePiece : images.blackPiece, stone.x, stone.y);\n  };\n  data.canvas.onclick = e => {\n    var canvasOffsetWidth = data.canvas.offsetWidth;\n    var canvasOffsetHeight = data.canvas.offsetHeight;\n    var stone = getStonePosition(data, images, e, canvasOffsetWidth, canvasOffsetHeight);\n    console.log(stone.y / (data.canvas.height / 19));\n    console.log(playerColor);\n    data.board[Math.floor(stone.y / (data.canvas.height / 19))][Math.floor(stone.x / (data.canvas.width / 19))] = playerColor;\n    printBoard(data, images);\n  };\n  data.canvas.onmouseleave = () => {\n    printBoard(data, images);\n  };\n};\nexport default initGame;","map":{"version":3,"names":["printBackground","data","images","ctx","fillStyle","fillRect","canvas","width","height","y","x","drawImage","gomokuBoard","blackPiece","initBoard","board","printStones","stone","whitePiece","printBoard","getStonePosition","e","canvasOffsetWidth","canvasOffsetHeight","widthSquare","heightSquare","console","log","Math","floor","offsetX","offsetY","initGame","playerColor","document","getElementById","getContext","onmousemove","offsetWidth","offsetHeight","onclick","onmouseleave"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/initGame.js"],"sourcesContent":["const printBackground = (data, images) => {\n    data.ctx.fillStyle = '#a6683e'\n    data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height)\n    for (var y = 0; y < 18; y++){\n        for (var x = 0; x < 18; x++)\n            data.ctx.drawImage(\n                images.gomokuBoard,\n                x * images.gomokuBoard.width + images.blackPiece.width / 2,\n                y * images.gomokuBoard.height + images.blackPiece.width / 2\n            )\n    }\n}\n\nconst initBoard = () => {\n    var board = []\n    for (var y = 0; y < 19; y++){\n        board[y] = []\n        for (var x = 0; x < 19; x++){\n            board[y][x] = 0\n        }\n    }\n    return board\n}\n\nconst printStones = (data, images) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (data.board[y][x] === 'black' || data.board[y][x] === 'white'){\n                var stone = data.board[y][x] === 'black' ? images.blackPiece : images.whitePiece\n                data.ctx.drawImage(\n                    stone,\n                    images.gomokuBoard.width * x,\n                    images.gomokuBoard.height * y\n                )\n            }\n        }\n    }\n}\n\nconst printBoard = (data, images) => {\n    printBackground(data, images)\n    printStones(data, images)\n}\n\nconst getStonePosition = (data, images, e, canvasOffsetWidth, canvasOffsetHeight) => {\n    var widthSquare = canvasOffsetWidth / 19\n    var heightSquare = canvasOffsetHeight / 19\n    console.log((Math.floor(e.offsetX / widthSquare) * widthSquare) / (data.canvas.width / canvasOffsetWidth))\n    \n    return {\n        x : (\n            (Math.floor(e.offsetX / widthSquare) * widthSquare) *\n            (data.canvas.width / canvasOffsetWidth) +\n            (data.canvas.width / 19) / 2 - images.blackPiece.width / 2\n        ),\n        y : (\n            (Math.floor(e.offsetY / heightSquare) * heightSquare) *\n            (data.canvas.height / canvasOffsetHeight) +\n            (data.canvas.height / 19) / 2 - images.blackPiece.height / 2\n        )\n    }\n}\n\nconst initGame = (images, playerColor) => {\n    var data = {}\n    data.canvas = document.getElementById('canvas')\n    data.ctx = data.canvas.getContext('2d')\n    data.board = initBoard()\n    printBoard(data, images)\n    data.canvas.onmousemove = e => {\n        var canvasOffsetWidth = data.canvas.offsetWidth\n        var canvasOffsetHeight = data.canvas.offsetHeight\n        var stone = getStonePosition(data, images, e, canvasOffsetWidth, canvasOffsetHeight)\n        // var stoneX = (\n        //     (Math.floor(e.offsetX / widthSquare) * widthSquare) *\n        //     (data.canvas.width / canvasOffsetWidth) +\n        //     (data.canvas.width / 19) / 2 - images.blackPiece.width / 2\n        // )\n        // var stoneY = (\n        //     (Math.floor(e.offsetY / heightSquare) * heightSquare) *\n        //     (data.canvas.height / canvasOffsetHeight) +\n        //     (data.canvas.height / 19) / 2 - images.blackPiece.height / 2\n        // )\n        printBoard(data, images)\n        data.ctx.drawImage(playerColor === 'white' ? images.whitePiece : images.blackPiece, stone.x, stone.y)\n    }\n    data.canvas.onclick = e => {\n        var canvasOffsetWidth = data.canvas.offsetWidth\n        var canvasOffsetHeight = data.canvas.offsetHeight\n        var stone = getStonePosition(data, images, e, canvasOffsetWidth, canvasOffsetHeight)\n        console.log(stone.y / (data.canvas.height / 19))\n        console.log(playerColor)\n        data.board[Math.floor(stone.y / (data.canvas.height / 19))][Math.floor(stone.x / (data.canvas.width / 19))] = playerColor\n        printBoard(data, images)\n    }\n    data.canvas.onmouseleave = () => {\n        printBoard(data, images)\n    }\n}\n\nexport default initGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}