{"ast":null,"code":"// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\nvar data;\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\n\n// const getBoard = (board, node) => {\n//     var res = []\n//     for (var y = 0; y < 19; y++){\n//         res[y] = []\n//         for (var x = 0; x < 19; x++){\n//             res[y][x] = board\n//         }\n//     }\n//     while (node.parent){\n//         res[node.y][node.x] = node.color\n//         node = node.parent\n//     }\n//     return res\n// }\n\nconst getBestMove = node => {\n  var nbNode = 0;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          // maybe no needed\n          color: !(depth % 2) ? 'black' : 'white',\n          //maybe no needed\n          heuristic: getHeuristic()\n        };\n      }\n    }\n  }\n};\nconst minmax = (node, depth) => {\n  if (depth === 1) return;\n  var nbNode;\n  // var board = getBoard(data.board, node)\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        var color = data.playerColor;\n        if (data.depth % 2 === depth % 2) color = data.iaColor;\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color\n        };\n        minmax(node, depth - 1);\n        nbNode++;\n      }\n    }\n  }\n  if (data.depth % 2 !== depth % 2) node = getBestNode(node, 'min');else node = getBestMove(node, 'max');\n};\nconst initData = playerColor => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.board = board;\n  data.depth = 1;\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(playerColor);\n  var tree = {};\n  minmax(tree, data.depth);\n  getHeuristic(tree);\n  return getBestMove(tree);\n};\nexport default ia;","map":{"version":3,"names":["data","noStones","node","x","y","parent","getBestMove","nbNode","board","color","depth","heuristic","getHeuristic","minmax","playerColor","iaColor","getBestNode","initData","ia","tree"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\nvar data\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL !\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\n// const getBoard = (board, node) => {\n//     var res = []\n//     for (var y = 0; y < 19; y++){\n//         res[y] = []\n//         for (var x = 0; x < 19; x++){\n//             res[y][x] = board\n//         }\n//     }\n//     while (node.parent){\n//         res[node.y][node.x] = node.color\n//         node = node.parent\n//     }\n//     return res\n// }\n\nconst getBestMove = (node) => {\n    var nbNode = 0\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node, // maybe no needed\n                    color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n                    heuristic : getHeuristic()\n                }\n            }\n        }\n    }\n}\n\nconst minmax = (node, depth) => {\n    if (depth === 1)\n        return\n    var nbNode\n    // var board = getBoard(data.board, node)\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                var color = data.playerColor\n                if ((data.depth % 2) === (depth % 2))\n                    color = data.iaColor\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color\n                }\n                minmax(node, depth - 1)\n                nbNode++\n            }\n        }\n    }\n    if ((data.depth % 2) !== (depth % 2))\n        node = getBestNode(node, 'min')\n    else\n        node = getBestMove(node, 'max')\n}\n\nconst initData = (playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.board = board\n    data.depth = 1\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(playerColor)\n    var tree = {}\n    minmax(tree, data.depth)\n    getHeuristic(tree)\n    return (getBestMove(tree))\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}