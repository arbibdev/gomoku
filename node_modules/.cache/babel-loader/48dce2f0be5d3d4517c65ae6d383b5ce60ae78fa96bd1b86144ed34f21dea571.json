{"ast":null,"code":"import getIaPath from \"./getIaPath\";\nimport { checkWinner } from \"../../pages/humanvsia/checkEndGame\";\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board[y][x];\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  var start = window.performance.now();\n  var end;\n  while (node.parent) {\n    if (node.x === x && node.y === y) {\n      end = window.performance.now();\n      data.noStonesTime += end - start;\n      return false;\n    }\n    node = node.parent;\n  }\n  end = window.performance.now();\n  data.noStonesTime += end - start;\n  return true;\n};\nconst singleStonesHeuristic = board => {\n  var heuristic = 0;\n  var localHeuristic;\n  var freeNeighbour;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        localHeuristic = 10;\n        freeNeighbour = 1;\n        if (y - 1 >= 0 && !board[y - 1][x]) freeNeighbour += 1;\n        if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && !board[y][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1]) freeNeighbour += 1;\n        if (y + 1 < 19 && !board[y + 1][x]) freeNeighbour += 1;\n        if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && !board[y][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) localHeuristic *= freeNeighbour;\n        if (localHeuristic > 10) {\n          if (board[y][x] === data.iaColor) heuristic += localHeuristic;else heuristic -= localHeuristic;\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getNeighbour1 = (x, y, board, orientation) => {\n  if (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x] || orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1] || orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1] || orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1]) return 1;\n  return 0;\n};\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n  if (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x] || orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb] || orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb] || orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb]) return 1;\n  return 0;\n};\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL) {\n    checkedBoard[y][x] = data.VERTICAL;\n    nb++;\n    y++;\n  }\n  return nb;\n};\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL) {\n    checkedBoard[y][x] = data.HORIZONTAL;\n    nb++;\n    x++;\n  }\n  return nb;\n};\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1) {\n    checkedBoard[y][x] = data.DIAGONAL1;\n    nb++;\n    x++;\n    y++;\n  }\n  return nb;\n};\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2) {\n    checkedBoard[y][x] = data.DIAGONAL2;\n    nb++;\n    x--;\n    y++;\n  }\n  return nb;\n};\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n  var nb = 0;\n  var color = board[y][x];\n  var neighbour1 = getNeighbour1(x, y, board, orientation);\n  var saveX = x;\n  var saveY = y;\n  if (orientation === data.VERTICAL) nb = checkVerticalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.HORIZONTAL) nb = checkHorizontalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL1) nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL2) nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard);\n  if (nb > 1) {\n    var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation);\n    if (nb < 5 && !neighbour1 && !neighbour2) return false;\n    return {\n      nb,\n      neighbour1,\n      neighbour2\n    };\n  }\n  return false;\n};\nconst checkAlignment = (x, y, board, checkedBoard) => {\n  var alignment = [];\n  var ret;\n  for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++) {\n    if (ret = checkStones(x, y, board, c, checkedBoard)) alignment.push(ret);\n  }\n  return alignment;\n};\nconst initCheckedBoard = () => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = 0;\n    }\n  }\n  return res;\n};\nconst alignmentsHeuristic = board => {\n  var heuristic = 0;\n  var alignment;\n  var checkedBoard = initCheckedBoard();\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] && board[y][x] !== data.FORBIDDEN) {\n        alignment = checkAlignment(x, y, board, checkedBoard);\n        for (var c = 0; c < alignment.length; c++) {\n          if (board[y][x] === data.iaColor) heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);else heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getHeuristic = node => {\n  const start = window.performance.now();\n  var board = getBoard(node);\n  var h1 = singleStonesHeuristic(board);\n  var h2 = alignmentsHeuristic(board);\n  const end = window.performance.now();\n  data.heuristicTime += end - start;\n  return h1 + h2;\n};\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node[nbNode].heuristic > node.alpha) node.alpha = node[nbNode].heuristic;\n  } else {\n    if (node[nbNode].heuristic < node.beta) node.beta = node[nbNode].heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst getChild = (pos, node, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst cancelForward = node => {\n  var start = window.performance.now();\n  var endGame = checkWinner(getBoard(node));\n  var end = window.performance.now();\n  data.cancelForwardTime += end - start;\n  if (endGame === data.iaColor) {\n    node.heuristic = Infinity;\n    return true;\n  }\n  if (endGame === data.playerColor) {\n    node.heuristic = -Infinity;\n    return true;\n  }\n  return false;\n};\nconst uploadHeuristic = (node, child, depth) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node.heuristic === undefined || child.heuristic > node.heuristic) {\n      node.heuristic = child.heuristic;\n      if (data.depth === depth) {\n        node.bestPos = {\n          x: child.x,\n          y: child.y\n        };\n      }\n    }\n  } else {\n    if (node.heuristic === undefined || child.heuristic < node.heuristic) node.heuristic = child.heuristic;\n  }\n};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var color = data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor;\n  if (cancelForward(node)) return;\n  for (var c = 0; c < data.iaPath.length; c++) {\n    if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)) {\n      node[nbNode] = getChild(data.iaPath[c], node, color);\n      if (depth > 1) minmax(node[nbNode], depth - 1);else node[nbNode].heuristic = getHeuristic(node[nbNode]);\n      uploadHeuristic(node, node[nbNode], depth);\n      if (getAlphaBetaPruning(node, depth, nbNode)) break;\n      node[nbNode] = undefined;\n      nbNode++;\n    }\n  }\n};\nconst initData = mainData => {\n  var start = window.performance.now();\n  data = {};\n  data.depth = 3; // CAN BE MODIFIED : DEPTH OF THE TREE\n  data.treatmentSpace = 3; // CAN BE MODIFIED : TREATMENT SPACE AROUND STONES ALREADY PLAYED\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = mainData.playerColor;\n  data.iaColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.board = mainData.board;\n  // data.iaPath = getIaPath(mainData.board, data.treatmentSpace)\n  var resIaPath = getIaPath(mainData.board, data.treatmentSpace); // TMP\n  data.iaPath = resIaPath.iaPath; // TMP\n  mainData.blockedBoard = resIaPath.blockedBoard; // TMP\n  data.heuristicTime = 0; // TMP\n  data.cancelForwardTime = 0; // TMP\n  data.noStonesTime = 0; // TMP\n  var end = window.performance.now();\n  data.initDataTime = end - start; // TMP\n};\n\nconst ia = mainData => {\n  initData(mainData);\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  minmax(tree, data.depth);\n  console.log('----------------');\n  console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`);\n  console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`);\n  console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`);\n  console.log(`init data time: ${Math.floor(data.initDataTime)}ms`);\n  console.log(`total: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`);\n  var pos = {\n    ...tree.bestPos\n  };\n  data = undefined;\n  tree = undefined;\n  return pos;\n};\nexport default ia;","map":{"version":3,"names":["getIaPath","checkWinner","data","getBoard","node","res","y","x","board","parent","color","noStones","start","window","performance","now","end","noStonesTime","singleStonesHeuristic","heuristic","localHeuristic","freeNeighbour","iaColor","getNeighbour1","orientation","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","getNeighbour2","nb","checkVerticalAlignment","checkedBoard","checkHorizontalAlignment","checkDiagonal1Alignment","checkDiagonal2Alignment","checkStones","neighbour1","saveX","saveY","neighbour2","checkAlignment","alignment","ret","c","push","initCheckedBoard","alignmentsHeuristic","FORBIDDEN","length","Math","pow","getHeuristic","h1","h2","heuristicTime","getAlphaBetaPruning","depth","nbNode","alpha","beta","getChild","pos","cancelForward","endGame","cancelForwardTime","Infinity","playerColor","uploadHeuristic","child","undefined","bestPos","minmax","callsToMinMax","iaPath","initData","mainData","treatmentSpace","WHITE","BLACK","MIN","MAX","resIaPath","blockedBoard","initDataTime","ia","tree","console","log","floor"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/tools/ia/ia.js"],"sourcesContent":["import getIaPath from \"./getIaPath\"\nimport { checkWinner } from \"../../pages/humanvsia/checkEndGame\"\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board[y][x]\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    var start = window.performance.now()\n    var end\n    while (node.parent){\n        if (node.x === x && node.y === y){\n            end = window.performance.now()\n            data.noStonesTime += end - start\n            return false\n        }\n        node = node.parent\n    }\n    end = window.performance.now()\n    data.noStonesTime += end - start\n    return true\n}\n\nconst singleStonesHeuristic = board => {\n    var heuristic = 0\n    var localHeuristic\n    var freeNeighbour\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                localHeuristic = 10\n                freeNeighbour = 1\n                if (y - 1 >= 0 && !board[y - 1][x])\n                    freeNeighbour += 1\n                if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && !board[y][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && !board[y + 1][x])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && !board[y][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n                localHeuristic *= freeNeighbour\n                if (localHeuristic > 10)\n                {\n                    if (board[y][x] === data.iaColor)\n                        heuristic += localHeuristic\n                    else\n                        heuristic -= localHeuristic\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getNeighbour1 = (x, y, board, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x]) ||\n        (orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1]) ||\n        (orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) ||\n        (orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1])\n    )\n        return 1\n    return 0\n}\n\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x]) ||\n        (orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb]) ||\n        (orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb]) ||\n        (orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb])\n    )\n        return 1\n    return 0\n}\n\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL){\n        checkedBoard[y][x] = data.VERTICAL\n        nb++\n        y++\n    }\n    return nb\n}\n\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL){\n        checkedBoard[y][x] = data.HORIZONTAL\n        nb++\n        x++\n    }\n    return nb\n}\n\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1){\n        checkedBoard[y][x] = data.DIAGONAL1\n        nb++\n        x++\n        y++\n    }\n    return nb\n}\n\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2){\n        checkedBoard[y][x] = data.DIAGONAL2\n        nb++\n        x--\n        y++\n    }\n    return nb\n}\n\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n    var nb = 0\n    var color = board[y][x]\n    var neighbour1 = getNeighbour1(x, y, board, orientation)\n    var saveX = x\n    var saveY = y\n    if (orientation === data.VERTICAL)\n        nb = checkVerticalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.HORIZONTAL)\n        nb = checkHorizontalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL1)\n        nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL2)\n        nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard)\n    if (nb > 1){\n        var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation)\n        if (nb < 5 && !neighbour1 && !neighbour2)\n            return false\n        return {\n            nb,\n            neighbour1,\n            neighbour2\n        }\n    }\n    return false\n}\n\nconst checkAlignment = (x, y, board, checkedBoard) => {\n    var alignment = []\n    var ret\n    for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++){\n        if ((ret = checkStones(x, y, board, c, checkedBoard)))\n            alignment.push(ret)\n    }\n    return alignment\n}\n\nconst initCheckedBoard = () => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = 0\n        }\n    }\n    return res\n}\n\nconst alignmentsHeuristic = (board) => {\n    var heuristic = 0\n    var alignment\n    var checkedBoard = initCheckedBoard()\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] && board[y][x] !== data.FORBIDDEN){\n                alignment = checkAlignment(x, y, board, checkedBoard)\n                for (var c = 0; c < alignment.length; c++){\n                    if (board[y][x] === data.iaColor)\n                        heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    else\n                        heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getHeuristic = (node) => {\n    const start = window.performance.now()\n    var board = getBoard(node)\n    var h1 = singleStonesHeuristic(board)\n    var h2 = alignmentsHeuristic(board)\n    const end = window.performance.now()\n    data.heuristicTime += end - start\n    return h1 + h2\n}\n\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n    if ((data.depth % 2) === (depth % 2)){\n        if (node[nbNode].heuristic > node.alpha)\n            node.alpha = node[nbNode].heuristic\n    }\n    else{\n        if ((node[nbNode].heuristic < node.beta))\n            node.beta = node[nbNode].heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst getChild = (pos, node, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst cancelForward = (node) => {\n    var start = window.performance.now()\n    var endGame = checkWinner(getBoard(node))\n    var end = window.performance.now()\n    data.cancelForwardTime += end - start\n    if (endGame === data.iaColor){\n        node.heuristic = Infinity\n        return true\n    }\n    if (endGame === data.playerColor){\n        node.heuristic = -Infinity\n        return true\n    }\n    return false\n}\n\nconst uploadHeuristic = (node, child, depth) => {\n    if (data.depth % 2 === depth % 2){\n        if (node.heuristic === undefined || child.heuristic > node.heuristic){\n            node.heuristic = child.heuristic\n            if (data.depth === depth){\n                node.bestPos = {\n                    x : child.x,\n                    y : child.y\n                }\n            }\n        }\n    }\n    else{\n        if (node.heuristic === undefined || child.heuristic < node.heuristic)\n            node.heuristic = child.heuristic\n    }\n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var color = data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor\n    if (cancelForward(node))\n        return\n    for (var c = 0; c < data.iaPath.length; c++){\n        if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n            node[nbNode] = getChild(data.iaPath[c], node, color)\n            if (depth > 1)\n                minmax(node[nbNode], depth - 1)\n            else\n                node[nbNode].heuristic = getHeuristic(node[nbNode])\n            uploadHeuristic(node, node[nbNode], depth)\n            if (getAlphaBetaPruning(node, depth, nbNode))\n                break\n            node[nbNode] = undefined\n            nbNode++\n        }\n    }\n}\n\nconst initData = (mainData) => {\n    var start = window.performance.now()\n    data = {}\n    data.depth = 3 // CAN BE MODIFIED : DEPTH OF THE TREE\n    data.treatmentSpace = 3 // CAN BE MODIFIED : TREATMENT SPACE AROUND STONES ALREADY PLAYED\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = mainData.playerColor\n    data.iaColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n    data.board = mainData.board\n    // data.iaPath = getIaPath(mainData.board, data.treatmentSpace)\n    var resIaPath = getIaPath(mainData.board, data.treatmentSpace) // TMP\n    data.iaPath = resIaPath.iaPath // TMP\n    mainData.blockedBoard = resIaPath.blockedBoard // TMP\n    data.heuristicTime = 0 // TMP\n    data.cancelForwardTime = 0 // TMP\n    data.noStonesTime = 0 // TMP\n    var end = window.performance.now()\n    data.initDataTime = end - start // TMP\n}\n\nconst ia = (mainData) => {\n    initData(mainData)\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    minmax(tree, data.depth)\n    console.log('----------------')\n    console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`)\n    console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`)\n    console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`)\n    console.log(`init data time: ${Math.floor(data.initDataTime)}ms`)\n    console.log(`total: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`)\n    var pos = {...tree.bestPos}\n    data = undefined\n    tree = undefined\n    return pos\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}