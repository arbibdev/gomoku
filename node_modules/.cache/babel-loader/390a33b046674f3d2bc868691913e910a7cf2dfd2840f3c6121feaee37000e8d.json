{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board[y][x];\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst singleStonesHeuristic = board => {\n  var heuristic = 0;\n  var localHeuristic;\n  var freeNeighbour;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        // console.log(x, y, board[y][x])\n        localHeuristic = 10;\n        freeNeighbour = 1;\n        if (y - 1 >= 0 && !board[y - 1][x]) freeNeighbour += 1;\n        if (x + 1 < 19 && !board[y][x + 1]) freeNeighbour += 1;\n        if (y + 1 < 19 && !board[y + 1][x]) freeNeighbour += 1;\n        if (x - 1 >= 0 && !board[y][x - 1]) freeNeighbour += 1;\n        localHeuristic *= freeNeighbour;\n        if (board[y][x] === data.iaColor) heuristic += localHeuristic;else heuristic -= localHeuristic;\n      }\n    }\n  }\n  // console.log(heuristic)\n  return heuristic;\n};\nconst getNeighbour1 = (x, y, board, orientation) => {\n  if (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x]) return 1;else if (orientation === 'horizontal' && x - 1 >= 0 && !board[y][x - 1]) return 1;else if (orientation === 'diagonal1' && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) return 1;else if (orientation === 'diagonal2' && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1]) return 1;\n  return 0;\n};\n\n// const getNeighbour2 = (x, y, board, orientation) => {\n//     if (orientation === data.VERTICAL && y < 19 && !board[y][x])\n//         return 1\n//     else if (orientation === 'horizontal' && x < 19 && !board[y][x])\n//         return 1\n//     else if (orientation === 'diagonal1' && x < 19 && y < 19 && !board[y][x])\n//         return 1\n//     else if (orientation === 'diagnoal2' && x >= 0 && y < 19 && !board[y][x])\n//         return 1\n//     return 0\n// }\n\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n  if (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x]) return 1;else if (orientation === 'horizontal' && x + nb < 19 && !board[y][x + nb]) return 1;else if (orientation === 'diagonal1' && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb]) return 1;else if (orientation === 'diagonal2' && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb]) return 1;\n  return 0;\n};\nconst checkStones = (x, y, board, orientation) => {\n  var nb = 0;\n  var color = board[y][x];\n  var neighbour1 = getNeighbour1(x, y, board, orientation);\n  var saveX = x;\n  var saveY = y;\n  while (orientation === data.VERTICAL && y++ < 19 && board[y - 1][x] === color) nb++;\n  while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color) nb++;\n  while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color) nb++;\n  while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color) nb++;\n  if (nb > 1) {\n    var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation);\n    if (!neighbour1 && !neighbour2) return false;\n    return {\n      nb,\n      neighbour1,\n      neighbour2\n    };\n  }\n  return false;\n};\nconst checkAlignment = (x, y, board) => {\n  var alignment;\n  if ((alignment = checkStones(x, y, board, data.VERTICAL)) || (alignment = checkStones(x, y, board, 'horizontal')) || (alignment = checkStones(x, y, board, 'diagonal1')) || (alignment = checkStones(x, y, board, 'diagonal2'))) return alignment;\n  return false;\n};\nconst alignmentsHeuristic = board => {\n  var heuristic = 0;\n  var alignment;\n  var sizeAlignment = []; // TMP\n  var neighbours = []; // TMP\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] && (alignment = checkAlignment(x, y, board))) {\n        // console.log(`alignement de ${alignment.nb} en ${x} ${y} heuristic : ${heuristic}`)\n        // console.log(alignment.neighbour1, alignment.neighbour2)\n        sizeAlignment.push(alignment.nb); // TMP\n        neighbours.push({\n          neighbour1: alignment.neighbour1,\n          neighbour2: alignment.neighbour2\n        }); // TMP\n        if (board[y][x] === data.iaColor) {\n          if (alignment.nb === 5) heuristic += 100000000000000;else heuristic += Math.pow(10, alignment.nb * 2) * (1 + alignment.neighbour1 + alignment.neighbour2);\n        } else {\n          if (alignment.nb === 5) heuristic -= 100000000000000;else heuristic -= Math.pow(10, alignment.nb * 2) * (1 + alignment.neighbour1 + alignment.neighbour2);\n        }\n      }\n    }\n  }\n  return {\n    heuristic,\n    sizeAlignment,\n    neighbours\n  };\n};\nconst getHeuristic = node => {\n  var board = getBoard(node);\n  // var h1 = singleStonesHeuristic(board)\n  // console.log('---------------------------')\n  // console.log(node.y, node.x)\n  var h2 = alignmentsHeuristic(board);\n  // console.log(`heuristic (${h2})`)\n  // data.boards.push({board, ...h2})\n  return h2.heuristic; // TMP\n  // return h2\n};\n\nconst getBestHeuristic = (node, extrem) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[`${nbNode}`]) {\n    if (bestHeuristic === false || extrem === data.MIN && node[`${nbNode}`].heuristic < bestHeuristic || extrem === data.MAX && node[`${nbNode}`].heuristic > bestHeuristic) {\n      bestHeuristic = node[`${nbNode}`].heuristic;\n    }\n    nbNode++;\n  }\n  return bestHeuristic;\n};\nconst randomChoice = (node, bestHeuristic) => {\n  var nbNode = 0;\n  var bestMove = [];\n  while (node[`${nbNode}`]) {\n    if (node[`${nbNode}`].heuristic === bestHeuristic) {\n      bestMove.push({\n        x: node[`${nbNode}`].x,\n        y: node[`${nbNode}`].y\n      });\n    }\n    nbNode++;\n  }\n  var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length);\n  return {\n    heuristic: bestHeuristic,\n    x: bestMove[moveChoosen].x,\n    y: bestMove[moveChoosen].y\n  };\n};\nconst getBestMove = (node, extrem, depth) => {\n  var bestHeuristic = getBestHeuristic(node, extrem);\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  return randomChoice(node, bestHeuristic);\n};\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node[`${nbNode}`].heuristic > node.alpha) node.alpha = node[`${nbNode}`].heuristic;\n  } else {\n    if (node[`${nbNode}`].heuristic < node.beta) node.beta = node[`${nbNode}`].heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\n\n// const getChilds = (node, depth) => {\n//     var nbNode = 0\n//     var c = 0\n//     var x = 0\n//     var y = 0\n//     while (c < 2){\n//         if (!data.board[y][x] && noStones(node, x, y)){\n//             node[`${nbNode}`] = {\n//                 x, y,\n//                 parent : node,\n//                 color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor,\n//                 alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n//             }\n//             if (depth > 1)\n//                 minmax(node[`${nbNode}`], depth - 1)\n//             else\n//                 node[`${nbNode}`].heuristic = getHeuristic(node)\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 return\n//             nbNode++\n//             c++\n//         }\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y += 1\n//         }\n//     }\n// }\n\nconst increment = pos => {\n  pos.x++;\n  if (pos.x === 19) {\n    pos.x = 0;\n    pos.y++;\n  }\n  if (pos.y === 19) return false;\n  return true;\n};\nconst getChild = (pos, node, depth) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color: data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst uploadHeuristic = (depth, node) => {\n  var bestMove;\n  if (data.depth % 2 !== depth % 2) bestMove = getBestMove(node, data.MIN, depth);else bestMove = getBestMove(node, data.MAX, depth);\n  node.heuristic = bestMove.heuristic;\n  if (depth === data.depth) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n  return false;\n};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var pos = {\n    x: 0,\n    y: 0\n  };\n  while (true) {\n    if (!data.board[pos.y][pos.x] && noStones(node, pos.x, pos.y)) {\n      node[`${nbNode}`] = getChild(pos, node, depth);\n      if (depth > 1) minmax(node[`${nbNode}`], depth - 1);else node[`${nbNode}`].heuristic = getHeuristic(node[`${nbNode}`]);\n      if (getAlphaBetaPruning(node, depth, nbNode)) break;\n      nbNode++;\n    }\n    if (!increment(pos)) break;\n  }\n  var bestMove;\n  if (bestMove = uploadHeuristic(depth, node)) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n};\nconst blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      // if ((\n      //         pos[0].x >= 0 && pos[0].x < 19 &&\n      //         pos[1].x >= 0 && pos[1].x < 19 &&\n      //         pos[2].x >= 0 && pos[2].x < 19 &&\n      //         pos[3].x >= 0 && pos[3].x < 19 &&\n      //         pos[0].y >= 0 && pos[0].y < 19 &&\n      //         pos[1].y >= 0 && pos[1].y < 19 &&\n      //         pos[2].y >= 0 && pos[2].y < 19 &&\n      //         pos[3].y >= 0 && pos[3].y < 19\n      //     ) &&\n      //     (\n      //         (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black') ||\n      //         (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black') ||\n      //         (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black') ||\n      //         (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')\n      //     )\n      // )\n      //     return false\n      if (pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 && (board[pos[0].y][pos[0].x] === data.WHITE || board[pos[0].y][pos[0].x] === data.BLACK) || pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 && (board[pos[1].y][pos[1].x] === data.WHITE || board[pos[1].y][pos[1].x] === data.BLACK) || pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 && (board[pos[2].y][pos[2].x] === data.WHITE || board[pos[2].y][pos[2].x] === data.BLACK) || pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 && (board[pos[3].y][pos[3].x] === data.WHITE || board[pos[3].y][pos[3].x] === data.BLACK)) return false;\n      // console.log('pos[0] ==> ', pos[0].x, pos[0].y)\n      // console.log('pos[1] ==> ', pos[1].x, pos[1].y)\n      // console.log('pos[2] ==> ', pos[2].x, pos[2].y)\n      // console.log('pos[3] ==> ', pos[3].x, pos[3].y)\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && blockCase(x, y, board, offset)) board[y][x] = 3;\n    }\n  }\n};\nconst getStartBoard = (board, offset) => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, offset);\n  return res;\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.MIN = 0;\n  data.MAX = 1;\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  // data.board = getStartBoard(board, 1)\n  data.board = board;\n  data.depth = 3;\n  data.callsToMinMax = 0;\n  data.heuristicIndex = 0;\n  //data.heuristic = [-1, 3, 5, -6, -4]\n  data.heuristic = [8, 5, 6, -4, 3, 8, 4, -6, 1, 5, 2];\n  data.boards = [];\n};\nconst getTreeToPrint = (node, depth) => {\n  var nbNode = 0;\n  var res = {};\n  res.heuristic = node.heuristic;\n  res.x = node.x;\n  res.y = node.y;\n  while (node[`${nbNode}`]) {\n    if (depth > 0) res[`${nbNode}`] = getTreeToPrint(node[`${nbNode}`], depth - 1);\n    nbNode += 1;\n  }\n  return res;\n};\nconst printTree = (tree, indentation) => {\n  var nbNode = 0;\n  var prefix = '';\n  for (var c = 0; c < indentation; c++) {\n    prefix += '----';\n  }\n  console.log(`${prefix}(${tree.heuristic})`);\n  while (tree[`${nbNode}`]) {\n    printTree(tree[`${nbNode}`], indentation + 1);\n    nbNode++;\n  }\n};\nconst printBackground = (ctx, canvas, images) => {\n  ctx.fillStyle = '#a6683e';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  for (var y = 0; y < 18; y++) {\n    for (var x = 0; x < 18; x++) ctx.drawImage(images.gomokuBoard, x * images.gomokuBoard.width + images.blackPiece.width / 2, y * images.gomokuBoard.height + images.blackPiece.width / 2);\n  }\n};\nconst printStones = (board, ctx, images) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        var stone = board[y][x] === data.WHITE ? images.whitePiece : images.blackPiece;\n        ctx.drawImage(stone, images.gomokuBoard.width * x, images.gomokuBoard.height * y);\n      }\n    }\n  }\n};\nconst printBoard = (board, ctx, images, canvas) => {\n  printBackground(ctx, canvas, images);\n  printStones(board, ctx, images);\n};\nconst printBoards = (ctx, images, canvas) => {\n  var c = -1;\n  document.onkeydown = e => {\n    if (e.key === 'Enter') c++;else if (e.key === ' ') c += 100;else return;\n    printBoard(data.boards[c].board, ctx, images, canvas);\n    console.clear();\n    console.log('------------------------');\n    console.log('heuristic:', data.boards[c].heuristic);\n    console.log('sizeAlignment:', data.boards[c].sizeAlignment);\n    console.log('neighbours:', data.boards[c].neighbours);\n    console.log('------------------------');\n  };\n};\nconst ia = (board, playerColor, mainData, images) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  mainData.forbiddenStones = data.board;\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  var pos = minmax(tree, data.depth);\n  printBoards(mainData.ctx, images, mainData.canvas);\n  // var treeToPrint = getTreeToPrint(tree, data.depth)\n  // printTree(tree, 0)\n  console.log('heuristic', tree.heuristic);\n  // console.log(treeToPrint)\n  //var bestChild = tree[tree.bestChild]\n  //var bestLittleChild = bestChild[bestChild.bestChild]\n  //console.log('best child :', bestChild.y, bestChild.x)\n  //console.log('best child :', bestLittleChild.y, bestLittleChild.x)\n  console.log('calls to minmax : ', data.callsToMinMax);\n  return pos;\n};\nexport default ia;","map":{"version":3,"names":["getRandomInt","data","getBoard","node","res","y","x","board","parent","color","noStones","singleStonesHeuristic","heuristic","localHeuristic","freeNeighbour","iaColor","getNeighbour1","orientation","VERTICAL","getNeighbour2","nb","checkStones","neighbour1","saveX","saveY","neighbour2","checkAlignment","alignment","alignmentsHeuristic","sizeAlignment","neighbours","push","Math","pow","getHeuristic","h2","getBestHeuristic","extrem","nbNode","bestHeuristic","MIN","MAX","randomChoice","bestMove","moveChoosen","length","getBestMove","depth","getAlphaBetaPruning","alpha","beta","increment","pos","getChild","playerColor","uploadHeuristic","minmax","callsToMinMax","blockCase","offset","c","i","WHITE","BLACK","blockBoard","getStartBoard","initData","heuristicIndex","boards","getTreeToPrint","printTree","tree","indentation","prefix","console","log","printBackground","ctx","canvas","images","fillStyle","fillRect","width","height","drawImage","gomokuBoard","blackPiece","printStones","stone","whitePiece","printBoard","printBoards","document","onkeydown","e","key","clear","ia","mainData","forbiddenStones","Infinity"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board[y][x]\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst singleStonesHeuristic = board => {\n    var heuristic = 0\n    var localHeuristic\n    var freeNeighbour\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                // console.log(x, y, board[y][x])\n                localHeuristic = 10\n                freeNeighbour = 1\n                if (y - 1 >= 0 && !board[y - 1][x])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && !board[y][x + 1])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && !board[y + 1][x])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && !board[y][x - 1])\n                    freeNeighbour += 1\n                localHeuristic *= freeNeighbour\n                if (board[y][x] === data.iaColor)\n                    heuristic += localHeuristic\n                else\n                    heuristic -= localHeuristic\n            }\n        }\n    }\n    // console.log(heuristic)\n    return heuristic\n}\n\nconst getNeighbour1 = (x, y, board, orientation) => {\n    if (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x])\n        return 1\n    else if (orientation === 'horizontal' && x - 1 >= 0 && !board[y][x - 1])\n        return 1\n    else if (orientation === 'diagonal1' && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n        return 1\n    else if (orientation === 'diagonal2' && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1])\n        return 1\n    return 0\n}\n\n// const getNeighbour2 = (x, y, board, orientation) => {\n//     if (orientation === data.VERTICAL && y < 19 && !board[y][x])\n//         return 1\n//     else if (orientation === 'horizontal' && x < 19 && !board[y][x])\n//         return 1\n//     else if (orientation === 'diagonal1' && x < 19 && y < 19 && !board[y][x])\n//         return 1\n//     else if (orientation === 'diagnoal2' && x >= 0 && y < 19 && !board[y][x])\n//         return 1\n//     return 0\n// }\n\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n    if (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x])\n        return 1\n    else if (orientation === 'horizontal' && x + nb < 19 && !board[y][x + nb])\n        return 1\n    else if (orientation === 'diagonal1' && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb])\n        return 1\n    else if (orientation === 'diagonal2' && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb])\n        return 1\n    return 0\n}\n\nconst checkStones = (x, y, board, orientation) => {\n    var nb = 0\n    var color = board[y][x]\n    var neighbour1 = getNeighbour1(x, y, board, orientation)\n    var saveX = x\n    var saveY = y\n    while (orientation === data.VERTICAL && y++ < 19 && board[y - 1][x] === color)nb++\n    while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color)nb++\n    while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n    while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n    if (nb > 1){\n        var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation)\n        if (!neighbour1 && !neighbour2)\n            return false\n        return {\n            nb,\n            neighbour1,\n            neighbour2\n        }\n    }\n    return false\n}\n\nconst checkAlignment = (x, y, board) => {\n    var alignment\n    if (\n        (alignment = checkStones(x, y, board, data.VERTICAL)) ||\n        (alignment = checkStones(x, y, board, 'horizontal')) ||\n        (alignment = checkStones(x, y, board, 'diagonal1')) ||\n        (alignment = checkStones(x, y, board, 'diagonal2'))\n    )\n        return alignment\n    return false\n}\n\nconst alignmentsHeuristic = (board) => {\n    var heuristic = 0\n    var alignment\n    var sizeAlignment = [] // TMP\n    var neighbours = [] // TMP\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] && (alignment = checkAlignment(x, y, board))){\n                // console.log(`alignement de ${alignment.nb} en ${x} ${y} heuristic : ${heuristic}`)\n                // console.log(alignment.neighbour1, alignment.neighbour2)\n                sizeAlignment.push(alignment.nb) // TMP\n                neighbours.push({neighbour1 : alignment.neighbour1, neighbour2 : alignment.neighbour2}) // TMP\n                if (board[y][x] === data.iaColor){\n                    if (alignment.nb === 5)\n                        heuristic += 100000000000000\n                    else\n                        heuristic += Math.pow(10, alignment.nb * 2) * (1 + alignment.neighbour1 + alignment.neighbour2)\n                }\n                else{\n                    if (alignment.nb === 5)\n                        heuristic -= 100000000000000\n                    else\n                        heuristic -= Math.pow(10, alignment.nb * 2) * (1 + alignment.neighbour1 + alignment.neighbour2)\n                }\n            }\n        }\n    }\n    return {heuristic, sizeAlignment, neighbours}\n}\n\nconst getHeuristic = (node) => {\n    var board = getBoard(node)\n    // var h1 = singleStonesHeuristic(board)\n    // console.log('---------------------------')\n    // console.log(node.y, node.x)\n    var h2 = alignmentsHeuristic(board)\n    // console.log(`heuristic (${h2})`)\n    // data.boards.push({board, ...h2})\n    return h2.heuristic // TMP\n    // return h2\n}\n\nconst getBestHeuristic = (node, extrem) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[`${nbNode}`]){\n        if (\n            bestHeuristic === false ||\n            (extrem === data.MIN && node[`${nbNode}`].heuristic < bestHeuristic) ||\n            (extrem === data.MAX && node[`${nbNode}`].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[`${nbNode}`].heuristic\n        }\n        nbNode++\n    }\n    return bestHeuristic\n}\n\nconst randomChoice = (node, bestHeuristic) => {\n    var nbNode = 0\n    var bestMove = []\n    while (node[`${nbNode}`]){\n        if (node[`${nbNode}`].heuristic === bestHeuristic){\n            bestMove.push({\n                x : node[`${nbNode}`].x,\n                y : node[`${nbNode}`].y,\n            })\n        }\n        nbNode++\n    }\n    var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length)\n    return {\n        heuristic : bestHeuristic,\n        x : bestMove[moveChoosen].x,\n        y : bestMove[moveChoosen].y\n    }\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var bestHeuristic = getBestHeuristic(node, extrem)\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    return randomChoice(node, bestHeuristic)\n    \n}\n\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n    if ((data.depth % 2) === (depth % 2)){\n        if (node[`${nbNode}`].heuristic > node.alpha)\n            node.alpha = node[`${nbNode}`].heuristic\n    }\n    else{\n        if ((node[`${nbNode}`].heuristic < node.beta))\n            node.beta = node[`${nbNode}`].heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\n// const getChilds = (node, depth) => {\n//     var nbNode = 0\n//     var c = 0\n//     var x = 0\n//     var y = 0\n//     while (c < 2){\n//         if (!data.board[y][x] && noStones(node, x, y)){\n//             node[`${nbNode}`] = {\n//                 x, y,\n//                 parent : node,\n//                 color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor,\n//                 alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n//             }\n//             if (depth > 1)\n//                 minmax(node[`${nbNode}`], depth - 1)\n//             else\n//                 node[`${nbNode}`].heuristic = getHeuristic(node)\n//             if (getAlphaBetaPruning(node, depth, nbNode))\n//                 return\n//             nbNode++\n//             c++\n//         }\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y += 1\n//         }\n//     }\n// }\n\nconst increment = (pos) => {\n    pos.x++\n    if (pos.x === 19){\n        pos.x = 0\n        pos.y++\n    }\n    if (pos.y === 19)\n        return false\n    return true\n}\n\nconst getChild = (pos, node, depth) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst uploadHeuristic = (depth, node) => {\n    var bestMove\n    if ((data.depth % 2) !== (depth % 2))\n        bestMove = getBestMove(node, data.MIN, depth)\n    else\n        bestMove = getBestMove(node, data.MAX, depth)\n    node.heuristic = bestMove.heuristic\n    if (depth === data.depth)\n        return {x : bestMove.x, y : bestMove.y}\n    return false\n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var pos = {x : 0, y : 0}\n    while (true){\n        if (!data.board[pos.y][pos.x] && noStones(node, pos.x, pos.y)){\n            node[`${nbNode}`] = getChild(pos, node, depth)\n            if (depth > 1)\n                minmax(node[`${nbNode}`], depth - 1)\n            else\n                node[`${nbNode}`].heuristic = getHeuristic(node[`${nbNode}`])\n            if (getAlphaBetaPruning(node, depth, nbNode))\n                break\n            nbNode++\n        }\n        if (!increment(pos))\n            break\n    }\n    var bestMove\n    if ((bestMove = uploadHeuristic(depth, node)))\n        return {x : bestMove.x, y : bestMove.y}\n}\n\n\nconst blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            // if ((\n            //         pos[0].x >= 0 && pos[0].x < 19 &&\n            //         pos[1].x >= 0 && pos[1].x < 19 &&\n            //         pos[2].x >= 0 && pos[2].x < 19 &&\n            //         pos[3].x >= 0 && pos[3].x < 19 &&\n            //         pos[0].y >= 0 && pos[0].y < 19 &&\n            //         pos[1].y >= 0 && pos[1].y < 19 &&\n            //         pos[2].y >= 0 && pos[2].y < 19 &&\n            //         pos[3].y >= 0 && pos[3].y < 19\n            //     ) &&\n            //     (\n            //         (board[pos[0].y][pos[0].x] === 'white' || board[pos[0].y][pos[0].x] === 'black') ||\n            //         (board[pos[1].y][pos[1].x] === 'white' || board[pos[1].y][pos[1].x] === 'black') ||\n            //         (board[pos[2].y][pos[2].x] === 'white' || board[pos[2].y][pos[2].x] === 'black') ||\n            //         (board[pos[3].y][pos[3].x] === 'white' || board[pos[3].y][pos[3].x] === 'black')\n            //     )\n            // )\n            //     return false\n            if (\n                (\n                    pos[0].x >= 0 && pos[0].x < 19 && pos[0].y >= 0 && pos[0].y < 19 &&\n                    (board[pos[0].y][pos[0].x] === data.WHITE || board[pos[0].y][pos[0].x] === data.BLACK)\n                ) ||\n                (\n                    pos[1].x >= 0 && pos[1].x < 19 && pos[1].y >= 0 && pos[1].y < 19 &&\n                    (board[pos[1].y][pos[1].x] === data.WHITE || board[pos[1].y][pos[1].x] === data.BLACK)\n                ) ||\n                (\n                    pos[2].x >= 0 && pos[2].x < 19 && pos[2].y >= 0 && pos[2].y < 19 &&\n                    (board[pos[2].y][pos[2].x] === data.WHITE || board[pos[2].y][pos[2].x] === data.BLACK)\n                ) ||\n                (\n                    pos[3].x >= 0 && pos[3].x < 19 && pos[3].y >= 0 && pos[3].y < 19 &&\n                    (board[pos[3].y][pos[3].x] === data.WHITE || board[pos[3].y][pos[3].x] === data.BLACK)\n                )\n            )\n                    return false\n            // console.log('pos[0] ==> ', pos[0].x, pos[0].y)\n            // console.log('pos[1] ==> ', pos[1].x, pos[1].y)\n            // console.log('pos[2] ==> ', pos[2].x, pos[2].y)\n            // console.log('pos[3] ==> ', pos[3].x, pos[3].y)\n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n            \n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && blockCase(x, y, board, offset))\n                board[y][x] = 3\n        }\n    }\n}\n\nconst getStartBoard = (board, offset) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, offset)\n    return res\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.MIN = 0\n    data.MAX = 1\n    data.WHITE = 1\n    data.BLACK = 2\n    data.playerColor = playerColor\n    data.iaColor = playerColor === data.WHITE ? data.BLACK : data.WHITE\n    // data.board = getStartBoard(board, 1)\n    data.board = board\n    data.depth = 3\n    data.callsToMinMax = 0\n    data.heuristicIndex = 0\n    //data.heuristic = [-1, 3, 5, -6, -4]\n    data.heuristic = [8, 5, 6, -4, 3, 8, 4, -6, 1, 5, 2]\n    data.boards = []\n}\n\nconst getTreeToPrint = (node, depth) => {\n    var nbNode = 0\n    var res = {}\n    res.heuristic = node.heuristic\n    res.x = node.x\n    res.y = node.y\n    while (node[`${nbNode}`]){\n        if (depth > 0)\n            res[`${nbNode}`] = getTreeToPrint(node[`${nbNode}`], depth - 1)\n        nbNode += 1\n    }\n    return res\n}\n\nconst printTree = (tree, indentation) => {\n    var nbNode = 0\n    var prefix = ''\n    for (var c = 0; c < indentation; c++){\n        prefix += '----'\n    }\n    console.log(`${prefix}(${tree.heuristic})`)\n    while (tree[`${nbNode}`]){\n        printTree(tree[`${nbNode}`], indentation + 1)\n        nbNode++\n    }\n}\n\nconst printBackground = (ctx, canvas, images) => {\n    ctx.fillStyle = '#a6683e'\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n    for (var y = 0; y < 18; y++){\n        for (var x = 0; x < 18; x++)\n            ctx.drawImage(\n                images.gomokuBoard,\n                x * images.gomokuBoard.width + images.blackPiece.width / 2,\n                y * images.gomokuBoard.height + images.blackPiece.width / 2\n            )\n    }\n}\n\nconst printStones = (board, ctx, images) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                var stone = board[y][x] === data.WHITE ? images.whitePiece : images.blackPiece\n                ctx.drawImage(\n                    stone,\n                    images.gomokuBoard.width * x,\n                    images.gomokuBoard.height * y\n                )\n            }\n        }\n    }\n}\n\nconst printBoard = (board, ctx, images, canvas) => {\n    printBackground(ctx, canvas, images)\n    printStones(board, ctx, images)\n}\n\nconst printBoards = (ctx, images, canvas) => {\n    var c = -1\n    document.onkeydown = e => {\n        if (e.key === 'Enter')\n            c++\n        else if (e.key === ' ')\n            c += 100\n        else\n            return\n        printBoard(data.boards[c].board, ctx, images, canvas)\n        console.clear()\n        console.log('------------------------')\n        console.log('heuristic:', data.boards[c].heuristic)\n        console.log('sizeAlignment:', data.boards[c].sizeAlignment)\n        console.log('neighbours:', data.boards[c].neighbours)\n        console.log('------------------------')\n        \n    }\n}\n\nconst ia = (board, playerColor, mainData, images) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    mainData.forbiddenStones = data.board\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    var pos = minmax(tree, data.depth)\n    printBoards(mainData.ctx, images, mainData.canvas)\n    // var treeToPrint = getTreeToPrint(tree, data.depth)\n    // printTree(tree, 0)\n    console.log('heuristic', tree.heuristic)\n    // console.log(treeToPrint)\n    //var bestChild = tree[tree.bestChild]\n    //var bestLittleChild = bestChild[bestChild.bestChild]\n    //console.log('best child :', bestChild.y, bestChild.x)\n    //console.log('best child :', bestLittleChild.y, bestLittleChild.x)\n    console.log('calls to minmax : ', data.callsToMinMax)\n    return pos\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}