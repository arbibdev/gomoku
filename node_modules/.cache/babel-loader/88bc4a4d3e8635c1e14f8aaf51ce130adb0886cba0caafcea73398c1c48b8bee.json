{"ast":null,"code":"import getRandomInt from \"../../tools/getRandomInt\";\nconst printBackground = (data, images) => {\n  data.ctx.fillStyle = '#a6683e';\n  data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height);\n  for (var y = 0; y < 18; y++) {\n    for (var x = 0; x < 18; x++) data.ctx.drawImage(images.gomokuBoard, x * images.gomokuBoard.width + images.blackPiece.width / 2, y * images.gomokuBoard.height + images.blackPiece.width / 2);\n  }\n};\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board;\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  while (node.parent) {\n    if (node.x === x && node.y === y) return false;\n    node = node.parent;\n  }\n  return true;\n};\nconst getHeuristic = node => {\n  var board = getBoard(node);\n  return 10;\n};\nconst getBestMove = (node, extrem, depth) => {\n  var nbNode = 0;\n  var bestHeuristic = false;\n  while (node[`${nbNode}`]) {\n    if (bestHeuristic === false || extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic || extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic) {\n      bestHeuristic = node[`${nbNode}`].heuristic;\n    }\n    nbNode++;\n  }\n  if (depth !== data.depth) return {\n    heuristic: bestHeuristic\n  };\n  nbNode = 0;\n  var bestMove = [];\n  while (node[`${nbNode}`]) {\n    if (node[`${nbNode}`].heuristic === bestHeuristic) {\n      bestMove.push({\n        x: node[`${nbNode}`].x,\n        y: node[`${nbNode}`].y\n      });\n    }\n    nbNode++;\n  }\n  var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length);\n  return {\n    heuristic: bestHeuristic,\n    x: bestMove[moveChoosen].x,\n    y: bestMove[moveChoosen].y\n  };\n};\nconst minmax = (node, depth) => {\n  var nbNode = 0;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color: data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor\n        };\n        if (depth > 1) {\n          minmax(node, depth - 1);\n        } else node[`${nbNode}`].heuristic = getHeuristic(node);\n        nbNode++;\n      }\n    }\n  }\n  var bestMove;\n  if (data.depth % 2 !== depth % 2) bestMove = getBestMove(node, 'min', depth);else bestMove = getBestMove(node, 'max', depth);\n  if (depth === data.depth) return {\n    x: bestMove.x,\n    y: bestMove.y\n  };\n  node.heuristic = bestMove.heuristic;\n};\nconst blockCase = (x, y, board, offset) => {\n  var pos;\n  for (var c = 0; c < offset; c++) {\n    pos = [{\n      x: x - (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y - (c + 1)\n    }, {\n      x: x + (c + 1),\n      y: y + (c + 1)\n    }, {\n      x: x - (c + 1),\n      y: y + (c + 1)\n    }];\n    for (var i = 0; i < 3 + c * 2 - 1; i++) {\n      if (board[pos[0].y][pos[0].x] || board[pos[1].y][pos[1].x] || board[pos[2].y][pos[2].x] || board[pos[3].y][pos[3].x]) return false;\n      pos[0].x++;\n      pos[1].y++;\n      pos[2].x--;\n      pos[3].y--;\n    }\n  }\n  return true;\n};\nconst blockBoard = (board, offset) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (blockCase(x, y, board, offset)) board[y][x] = 1;\n    }\n  }\n};\nconst getStartBoard = board => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  blockBoard(res, 2);\n};\nconst initData = (board, playerColor) => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.board = getStartBoard(board);\n  data.depth = 1;\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(board, playerColor);\n  printBoard();\n  return;\n  var tree = {};\n  return minmax(tree, data.depth);\n};\nexport default ia;","map":{"version":3,"names":["getRandomInt","printBackground","data","images","ctx","fillStyle","fillRect","canvas","width","height","y","x","drawImage","gomokuBoard","blackPiece","getBoard","node","res","board","parent","color","noStones","getHeuristic","getBestMove","extrem","depth","nbNode","bestHeuristic","heuristic","bestMove","push","moveChoosen","length","minmax","iaColor","playerColor","blockCase","offset","pos","c","i","blockBoard","getStartBoard","initData","ia","printBoard","tree"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["import getRandomInt from \"../../tools/getRandomInt\"\n\nconst printBackground = (data, images) => {\n    data.ctx.fillStyle = '#a6683e'\n    data.ctx.fillRect(0, 0, data.canvas.width, data.canvas.height)\n    for (var y = 0; y < 18; y++){\n        for (var x = 0; x < 18; x++)\n            data.ctx.drawImage(\n                images.gomokuBoard,\n                x * images.gomokuBoard.width + images.blackPiece.width / 2,\n                y * images.gomokuBoard.height + images.blackPiece.width / 2\n            )\n    }\n}\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    while (node.parent){\n        if (node.x === x && node.y === y)\n            return false\n        node = node.parent\n    }\n    return true\n}\n\nconst getHeuristic = (node) => {\n    var board = getBoard(node)\n    return 10\n}\n\nconst getBestMove = (node, extrem, depth) => {\n    var nbNode = 0\n    var bestHeuristic = false\n    while (node[`${nbNode}`]){\n        if (\n            bestHeuristic === false ||\n            (extrem === 'min' && node[`${nbNode}`].heuristic < bestHeuristic) ||\n            (extrem === 'max' && node[`${nbNode}`].heuristic > bestHeuristic)\n        ){\n            bestHeuristic = node[`${nbNode}`].heuristic\n        }\n        nbNode++\n    }\n    if (depth !== data.depth)\n        return {heuristic : bestHeuristic}\n    nbNode = 0\n    var bestMove = []\n    while (node[`${nbNode}`]){\n        if (node[`${nbNode}`].heuristic === bestHeuristic){\n            bestMove.push({\n                x : node[`${nbNode}`].x,\n                y : node[`${nbNode}`].y\n            })\n        }\n        nbNode++\n    }\n    var moveChoosen = bestMove.length === 1 ? 0 : getRandomInt(bestMove.length)\n    return {\n        heuristic : bestHeuristic,\n        x : bestMove[moveChoosen].x,\n        y : bestMove[moveChoosen].y\n    }\n}\n\nconst minmax = (node, depth) => {\n    var nbNode = 0\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color : (data.depth % 2) === (depth % 2) ? data.iaColor : data.playerColor\n                }\n                if (depth > 1){\n                    minmax(node, depth - 1)\n                }\n                else\n                    node[`${nbNode}`].heuristic = getHeuristic(node)\n                nbNode++\n            }\n        }\n    }\n    var bestMove\n    if ((data.depth % 2) !== (depth % 2))\n        bestMove = getBestMove(node, 'min', depth)\n    else\n        bestMove = getBestMove(node, 'max', depth)\n    if (depth === data.depth)\n        return {x : bestMove.x, y : bestMove.y}\n    node.heuristic = bestMove.heuristic\n}\n\n\nconst blockCase = (x, y, board, offset) => {\n    var pos\n    for (var c = 0; c < offset; c++){\n        pos = [\n            {x : x - (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y - (c + 1)},\n            {x : x + (c + 1), y : y + (c + 1)},\n            {x : x - (c + 1), y : y + (c + 1)}\n        ]\n        for (var i = 0; i < 3 + c * 2 - 1; i++){\n            if (\n                board[pos[0].y][pos[0].x] ||\n                board[pos[1].y][pos[1].x] ||\n                board[pos[2].y][pos[2].x] ||\n                board[pos[3].y][pos[3].x]\n            )\n                return false \n            pos[0].x++\n            pos[1].y++\n            pos[2].x--\n            pos[3].y--\n        }\n    }\n    return true\n}\n\nconst blockBoard = (board, offset) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (blockCase(x, y, board, offset))\n                board[y][x] = 1\n        }\n    }\n}\n\nconst getStartBoard = board => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    blockBoard(res, 2)\n}\n\nconst initData = (board, playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.board = getStartBoard(board)\n    data.depth = 1\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(board, playerColor)\n    printBoard()\n    return\n    var tree = {}\n    return(minmax(tree, data.depth))\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}