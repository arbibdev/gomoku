{"ast":null,"code":"import getIaPath from \"./getIaPath\";\nconst checkEndGame = board => {\n  const checkStones = (x, y, board, orientation) => {\n    var nb = 0;\n    var color = board[y][x];\n    while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color) nb++;\n    while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color) nb++;\n    while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color) nb++;\n    while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color) nb++;\n    if (nb >= 5) return color;\n    return false;\n  };\n  const checkAlignment = (x, y, board) => {\n    var winner;\n    if ((winner = checkStones(x, y, board, 'vertical')) || (winner = checkStones(x, y, board, 'horizontal')) || (winner = checkStones(x, y, board, 'diagonal1')) || (winner = checkStones(x, y, board, 'diagonal2'))) return winner;\n    return false;\n  };\n  const checkWinner = board => {\n    var winner;\n    for (var y = 0; y < 19; y++) {\n      for (var x = 0; x < 19; x++) {\n        if (board[y][x] && (winner = checkAlignment(x, y, board))) return winner;\n      }\n    }\n    return false;\n  };\n  var winner = checkWinner(board);\n  if (winner) return winner;\n  return false;\n};\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\nvar data;\nconst getBoard = node => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = data.board[y][x];\n    }\n  }\n  while (node.parent) {\n    res[node.y][node.x] = node.color;\n    node = node.parent;\n  }\n  return res;\n};\nconst noStones = (node, x, y) => {\n  var start = window.performance.now();\n  var end;\n  while (node.parent) {\n    if (node.x === x && node.y === y) {\n      end = window.performance.now();\n      data.noStonesTime += end - start;\n      return false;\n    }\n    node = node.parent;\n  }\n  end = window.performance.now();\n  data.noStonesTime += end - start;\n  return true;\n};\nconst singleStonesHeuristic = board => {\n  var heuristic = 0;\n  var localHeuristic;\n  var freeNeighbour;\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x]) {\n        localHeuristic = 10;\n        freeNeighbour = 1;\n        if (y - 1 >= 0 && !board[y - 1][x]) freeNeighbour += 1;\n        if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && !board[y][x + 1]) freeNeighbour += 1;\n        if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1]) freeNeighbour += 1;\n        if (y + 1 < 19 && !board[y + 1][x]) freeNeighbour += 1;\n        if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && !board[y][x - 1]) freeNeighbour += 1;\n        if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) localHeuristic *= freeNeighbour;\n        if (localHeuristic > 10) {\n          if (board[y][x] === data.iaColor) heuristic += localHeuristic;else heuristic -= localHeuristic;\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getNeighbour1 = (x, y, board, orientation) => {\n  if (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x] || orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1] || orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1] || orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1]) return 1;\n  return 0;\n};\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n  if (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x] || orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb] || orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb] || orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb]) return 1;\n  return 0;\n};\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL) {\n    checkedBoard[y][x] = data.VERTICAL;\n    nb++;\n    y++;\n  }\n  return nb;\n};\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL) {\n    checkedBoard[y][x] = data.HORIZONTAL;\n    nb++;\n    x++;\n  }\n  return nb;\n};\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1) {\n    checkedBoard[y][x] = data.DIAGONAL1;\n    nb++;\n    x++;\n    y++;\n  }\n  return nb;\n};\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n  var nb = 0;\n  while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2) {\n    checkedBoard[y][x] = data.DIAGONAL2;\n    nb++;\n    x--;\n    y++;\n  }\n  return nb;\n};\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n  var nb = 0;\n  var color = board[y][x];\n  var neighbour1 = getNeighbour1(x, y, board, orientation);\n  var saveX = x;\n  var saveY = y;\n  if (orientation === data.VERTICAL) nb = checkVerticalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.HORIZONTAL) nb = checkHorizontalAlignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL1) nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard);else if (orientation === data.DIAGONAL2) nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard);\n  if (nb > 1) {\n    var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation);\n    if (nb < 5 && !neighbour1 && !neighbour2) return false;\n    return {\n      nb,\n      neighbour1,\n      neighbour2\n    };\n  }\n  return false;\n};\nconst checkAlignment = (x, y, board, checkedBoard) => {\n  var alignment = [];\n  var ret;\n  for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++) {\n    if (ret = checkStones(x, y, board, c, checkedBoard)) alignment.push(ret);\n  }\n  return alignment;\n};\nconst initCheckedBoard = () => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = 0;\n    }\n  }\n  return res;\n};\nconst alignmentsHeuristic = board => {\n  var heuristic = 0;\n  var alignment;\n  var checkedBoard = initCheckedBoard();\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (board[y][x] && board[y][x] !== data.FORBIDDEN) {\n        alignment = checkAlignment(x, y, board, checkedBoard);\n        for (var c = 0; c < alignment.length; c++) {\n          if (board[y][x] === data.iaColor) heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);else heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2);\n        }\n      }\n    }\n  }\n  return heuristic;\n};\nconst getHeuristic = node => {\n  const start = window.performance.now();\n  var board = getBoard(node);\n  var h1 = singleStonesHeuristic(board);\n  var h2 = alignmentsHeuristic(board);\n  const end = window.performance.now();\n  data.heuristicTime += end - start;\n  return h1 + h2;\n};\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node[nbNode].heuristic > node.alpha) node.alpha = node[nbNode].heuristic;\n  } else {\n    if (node[nbNode].heuristic < node.beta) node.beta = node[nbNode].heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst getChild = (pos, node, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst cancelForward = node => {\n  var start = window.performance.now();\n  var endGame = checkEndGame(getBoard(node));\n  var end = window.performance.now();\n  data.cancelForwardTime += end - start;\n  if (endGame === data.iaColor) {\n    node.heuristic = Infinity;\n    return true;\n  }\n  if (endGame === data.playerColor) {\n    node.heuristic = -Infinity;\n    return true;\n  }\n  return false;\n};\nconst uploadHeuristic = (node, child, depth) => {\n  if (data.depth % 2 === depth % 2) {\n    if (node.heuristic === undefined || child.heuristic > node.heuristic) {\n      node.heuristic = child.heuristic;\n      if (data.depth === depth) {\n        node.bestPos = {\n          x: child.x,\n          y: child.y\n        };\n      }\n    }\n  } else {\n    if (node.heuristic === undefined || child.heuristic < node.heuristic) node.heuristic = child.heuristic;\n  }\n};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var color = data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor;\n  if (cancelForward(node)) return;\n  for (var c = 0; c < data.iaPath.length; c++) {\n    if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)) {\n      node[nbNode] = getChild(data.iaPath[c], node, color);\n      if (depth > 1) minmax(node[nbNode], depth - 1);else node[nbNode].heuristic = getHeuristic(node[nbNode]);\n      uploadHeuristic(node, node[nbNode], depth);\n      if (getAlphaBetaPruning(node, depth, nbNode)) break;\n      node[nbNode] = undefined;\n      nbNode++;\n    }\n  }\n};\nconst initData = mainData => {\n  var start = window.performance.now();\n  data = {};\n  data.depth = 3; // CAN BE MODIFIED : DEPTH OF THE TREE\n  data.treatmentSpace = 4; // CAN BE MODIFIED : TREATMENT SPACE AROUND STONES ALREADY PLAYED\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = mainData.playerColor;\n  data.iaColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.board = mainData.board;\n  // data.iaPath = getIaPath(mainData.board, data.treatmentSpace)\n  data = data.heuristicTime = 0; // TMP\n  data.cancelForwardTime = 0; // TMP\n  data.noStonesTime = 0; // TMP\n  var end = window.performance.now();\n  data.initDataTime = end - start; // TMP\n};\n\nconst ia = mainData => {\n  initData(mainData);\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  minmax(tree, data.depth);\n  console.log('----------------');\n  console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`);\n  console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`);\n  console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`);\n  console.log(`init data time: ${Math.floor(data.initDataTime)}ms`);\n  console.log(`total: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`);\n  var pos = {\n    ...tree.bestPos\n  };\n  data = undefined;\n  tree = undefined;\n  return pos;\n};\nexport default ia;","map":{"version":3,"names":["getIaPath","checkEndGame","board","checkStones","x","y","orientation","nb","color","checkAlignment","winner","checkWinner","data","getBoard","node","res","parent","noStones","start","window","performance","now","end","noStonesTime","singleStonesHeuristic","heuristic","localHeuristic","freeNeighbour","iaColor","getNeighbour1","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","getNeighbour2","checkVerticalAlignment","checkedBoard","checkHorizontalAlignment","checkDiagonal1Alignment","checkDiagonal2Alignment","neighbour1","saveX","saveY","neighbour2","alignment","ret","c","push","initCheckedBoard","alignmentsHeuristic","FORBIDDEN","length","Math","pow","getHeuristic","h1","h2","heuristicTime","getAlphaBetaPruning","depth","nbNode","alpha","beta","getChild","pos","cancelForward","endGame","cancelForwardTime","Infinity","playerColor","uploadHeuristic","child","undefined","bestPos","minmax","callsToMinMax","iaPath","initData","mainData","treatmentSpace","WHITE","BLACK","MIN","MAX","initDataTime","ia","tree","console","log","floor"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/tools/ia/ia.js"],"sourcesContent":["import getIaPath from \"./getIaPath\"\n\nconst checkEndGame = (board) => {\n\n    const checkStones = (x, y, board, orientation) => {\n        var nb = 0\n        var color = board[y][x]\n        while (orientation === 'vertical' && y++ < 19 && board[y - 1][x] === color)nb++\n        while (orientation === 'horizontal' && x++ < 19 && board[y][x - 1] === color)nb++\n        while (orientation === 'diagonal1' && x++ < 19 && y++ < 19 && board[y - 1][x - 1] === color)nb++\n        while (orientation === 'diagonal2' && x-- >= 0 && y++ < 19 && board[y - 1][x + 1] === color)nb++\n        if (nb >= 5)\n            return color\n        return false\n    }\n    \n    const checkAlignment = (x, y, board) => {\n        var winner\n        if (\n            (winner = checkStones(x, y, board, 'vertical')) ||\n            (winner = checkStones(x, y, board, 'horizontal')) ||\n            (winner = checkStones(x, y, board, 'diagonal1')) ||\n            (winner = checkStones(x, y, board, 'diagonal2'))\n        )\n            return winner\n        return false\n    }\n    \n    const checkWinner = (board) => {\n        var winner\n        for (var y = 0; y < 19; y++){\n            for (var x = 0; x < 19; x++){\n                if (board[y][x] && (winner = checkAlignment(x, y, board)))\n                    return winner\n            }\n        }\n        return false\n    }\n\n    var winner = checkWinner(board)\n    if (winner)\n        return winner\n    return false\n}\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\nvar data\n\nconst getBoard = (node) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = data.board[y][x]\n        }\n    }\n    while (node.parent){\n        res[node.y][node.x] = node.color\n        node = node.parent\n    }\n    return res\n}\n\nconst noStones = (node, x, y) => {\n    var start = window.performance.now()\n    var end\n    while (node.parent){\n        if (node.x === x && node.y === y){\n            end = window.performance.now()\n            data.noStonesTime += end - start\n            return false\n        }\n        node = node.parent\n    }\n    end = window.performance.now()\n    data.noStonesTime += end - start\n    return true\n}\n\nconst singleStonesHeuristic = board => {\n    var heuristic = 0\n    var localHeuristic\n    var freeNeighbour\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x]){\n                localHeuristic = 10\n                freeNeighbour = 1\n                if (y - 1 >= 0 && !board[y - 1][x])\n                    freeNeighbour += 1\n                if (y - 1 >= 0 && x + 1 < 19 && !board[y - 1][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && !board[y][x + 1])\n                    freeNeighbour += 1\n                if (x + 1 < 19 && y + 1 < 19 && !board[y + 1][x + 1])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && !board[y + 1][x])\n                    freeNeighbour += 1\n                if (y + 1 < 19 && x - 1 >= 0 && !board[y + 1][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && !board[y][x - 1])\n                    freeNeighbour += 1\n                if (x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1])\n                localHeuristic *= freeNeighbour\n                if (localHeuristic > 10)\n                {\n                    if (board[y][x] === data.iaColor)\n                        heuristic += localHeuristic\n                    else\n                        heuristic -= localHeuristic\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getNeighbour1 = (x, y, board, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y - 1 >= 0 && !board[y - 1][x]) ||\n        (orientation === data.HORIZONTAL && x - 1 >= 0 && !board[y][x - 1]) ||\n        (orientation === data.DIAGONAL1 && x - 1 >= 0 && y - 1 >= 0 && !board[y - 1][x - 1]) ||\n        (orientation === data.DIAGONAL2 && x + 1 < 19 && y - 1 >= 0 && !board[y - 1][x + 1])\n    )\n        return 1\n    return 0\n}\n\nconst getNeighbour2 = (x, y, board, nb, orientation) => {\n    if (\n        (orientation === data.VERTICAL && y + nb < 19 && !board[y + nb][x]) ||\n        (orientation === data.HORIZONTAL && x + nb < 19 && !board[y][x + nb]) ||\n        (orientation === data.DIAGONAL1 && x + nb < 19 && y + nb < 19 && !board[y + nb][x + nb]) ||\n        (orientation === data.DIAGONAL2 && x - nb >= 0 && y + nb < 19 && !board[y + nb][x - nb])\n    )\n        return 1\n    return 0\n}\n\nconst checkVerticalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.VERTICAL){\n        checkedBoard[y][x] = data.VERTICAL\n        nb++\n        y++\n    }\n    return nb\n}\n\nconst checkHorizontalAlignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && board[y][x] === color && checkedBoard[y][x] !== data.HORIZONTAL){\n        checkedBoard[y][x] = data.HORIZONTAL\n        nb++\n        x++\n    }\n    return nb\n}\n\nconst checkDiagonal1Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x < 19 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL1){\n        checkedBoard[y][x] = data.DIAGONAL1\n        nb++\n        x++\n        y++\n    }\n    return nb\n}\n\nconst checkDiagonal2Alignment = (x, y, board, color, checkedBoard) => {\n    var nb = 0\n    while (x >= 0 && y < 19 && board[y][x] === color && checkedBoard[y][x] !== data.DIAGONAL2){\n        checkedBoard[y][x] = data.DIAGONAL2\n        nb++\n        x--\n        y++\n    }\n    return nb\n}\n\nconst checkStones = (x, y, board, orientation, checkedBoard) => {\n    var nb = 0\n    var color = board[y][x]\n    var neighbour1 = getNeighbour1(x, y, board, orientation)\n    var saveX = x\n    var saveY = y\n    if (orientation === data.VERTICAL)\n        nb = checkVerticalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.HORIZONTAL)\n        nb = checkHorizontalAlignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL1)\n        nb = checkDiagonal1Alignment(x, y, board, color, checkedBoard)\n    else if (orientation === data.DIAGONAL2)\n        nb = checkDiagonal2Alignment(x, y, board, color, checkedBoard)\n    if (nb > 1){\n        var neighbour2 = getNeighbour2(saveX, saveY, board, nb, orientation)\n        if (nb < 5 && !neighbour1 && !neighbour2)\n            return false\n        return {\n            nb,\n            neighbour1,\n            neighbour2\n        }\n    }\n    return false\n}\n\nconst checkAlignment = (x, y, board, checkedBoard) => {\n    var alignment = []\n    var ret\n    for (var c = data.VERTICAL; c <= data.DIAGONAL2; c++){\n        if ((ret = checkStones(x, y, board, c, checkedBoard)))\n            alignment.push(ret)\n    }\n    return alignment\n}\n\nconst initCheckedBoard = () => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = 0\n        }\n    }\n    return res\n}\n\nconst alignmentsHeuristic = (board) => {\n    var heuristic = 0\n    var alignment\n    var checkedBoard = initCheckedBoard()\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (board[y][x] && board[y][x] !== data.FORBIDDEN){\n                alignment = checkAlignment(x, y, board, checkedBoard)\n                for (var c = 0; c < alignment.length; c++){\n                    if (board[y][x] === data.iaColor)\n                        heuristic += Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                    else\n                        heuristic -= Math.pow(10, alignment[c].nb) * (1 + alignment[c].neighbour1 + alignment[c].neighbour2)\n                }\n            }\n        }\n    }\n    return heuristic\n}\n\nconst getHeuristic = (node) => {\n    const start = window.performance.now()\n    var board = getBoard(node)\n    var h1 = singleStonesHeuristic(board)\n    var h2 = alignmentsHeuristic(board)\n    const end = window.performance.now()\n    data.heuristicTime += end - start\n    return h1 + h2\n}\n\nconst getAlphaBetaPruning = (node, depth, nbNode) => {\n    if ((data.depth % 2) === (depth % 2)){\n        if (node[nbNode].heuristic > node.alpha)\n            node.alpha = node[nbNode].heuristic\n    }\n    else{\n        if ((node[nbNode].heuristic < node.beta))\n            node.beta = node[nbNode].heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst getChild = (pos, node, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst cancelForward = (node) => {\n    var start = window.performance.now()\n    var endGame = checkEndGame(getBoard(node))\n    var end = window.performance.now()\n    data.cancelForwardTime += end - start\n    if (endGame === data.iaColor){\n        node.heuristic = Infinity\n        return true\n    }\n    if (endGame === data.playerColor){\n        node.heuristic = -Infinity\n        return true\n    }\n    return false\n}\n\nconst uploadHeuristic = (node, child, depth) => {\n    if (data.depth % 2 === depth % 2){\n        if (node.heuristic === undefined || child.heuristic > node.heuristic){\n            node.heuristic = child.heuristic\n            if (data.depth === depth){\n                node.bestPos = {\n                    x : child.x,\n                    y : child.y\n                }\n            }\n        }\n    }\n    else{\n        if (node.heuristic === undefined || child.heuristic < node.heuristic)\n            node.heuristic = child.heuristic\n    }\n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var color = data.depth % 2 === depth % 2 ? data.iaColor : data.playerColor\n    if (cancelForward(node))\n        return\n    for (var c = 0; c < data.iaPath.length; c++){\n        if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n            node[nbNode] = getChild(data.iaPath[c], node, color)\n            if (depth > 1)\n                minmax(node[nbNode], depth - 1)\n            else\n                node[nbNode].heuristic = getHeuristic(node[nbNode])\n            uploadHeuristic(node, node[nbNode], depth)\n            if (getAlphaBetaPruning(node, depth, nbNode))\n                break\n            node[nbNode] = undefined\n            nbNode++\n        }\n    }\n}\n\nconst initData = (mainData) => {\n    var start = window.performance.now()\n    data = {}\n    data.depth = 3 // CAN BE MODIFIED : DEPTH OF THE TREE\n    data.treatmentSpace = 4 // CAN BE MODIFIED : TREATMENT SPACE AROUND STONES ALREADY PLAYED\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = mainData.playerColor\n    data.iaColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n    data.board = mainData.board\n    // data.iaPath = getIaPath(mainData.board, data.treatmentSpace)\n    data = \n    data.heuristicTime = 0 // TMP\n    data.cancelForwardTime = 0 // TMP\n    data.noStonesTime = 0 // TMP\n    var end = window.performance.now()\n    data.initDataTime = end - start // TMP\n}\n\nconst ia = (mainData) => {\n    initData(mainData)\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    minmax(tree, data.depth)\n    console.log('----------------')\n    console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`)\n    console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`)\n    console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`)\n    console.log(`init data time: ${Math.floor(data.initDataTime)}ms`)\n    console.log(`total: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`)\n    var pos = {...tree.bestPos}\n    data = undefined\n    tree = undefined\n    return pos\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}