{"ast":null,"code":"// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\nvar data;\nconst minmax = (treeLine, treeNode, stones, depth) => {\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!board[y][x] && !stones[`${x},${y}`]) {\n        if (depth > 0) data.treeminmax(depth - 1);else h = heuristic(actualBoard(board, stones));\n      }\n    }\n  }\n};\nconst copyBoard = board => {\n  const array = [];\n  for (var c = 0; c < 19; c++) {\n    array[c] = [...board[c]];\n  }\n  return array;\n};\nconst initData = playerColor => {\n  data = {};\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.tree = [];\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(playerColor);\n  var tree = [];\n  minmax(0, 0, {}, 2);\n  getHeuristic(tree);\n  return getBestMove(tree);\n};\nexport default ia;","map":{"version":3,"names":["data","minmax","treeLine","treeNode","stones","depth","y","x","board","treeminmax","h","heuristic","actualBoard","copyBoard","array","c","initData","playerColor","iaColor","tree","ia","getHeuristic","getBestMove"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\nvar data\n\nconst minmax = (treeLine, treeNode, stones, depth) => {\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!board[y][x] && !stones[`${x},${y}`]){\n                if (depth > 0)\n                    data.treeminmax(depth - 1)\n                else\n                \n                h = heuristic(actualBoard(board, stones))\n            }\n        }\n    }\n}\n\nconst copyBoard = (board) => {\n    const array = []\n    for (var c = 0; c < 19; c++){\n        array[c] = [...board[c]]\n    }\n    return array\n}\n\nconst initData = (playerColor) => {\n    data = {}\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.tree = []\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(playerColor)\n    var tree = []\n    minmax(0, 0, {}, 2)\n    getHeuristic(tree)\n    return (getBestMove(tree))\n}\n\nexport default ia"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI;AAER,MAAMC,MAAM,GAAG,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAClD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;MACxB,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC,CAACC,CAAC,CAAC,IAAI,CAACH,MAAM,CAAE,GAAEG,CAAE,IAAGD,CAAE,EAAC,CAAC,EAAC;QACrC,IAAID,KAAK,GAAG,CAAC,EACTL,IAAI,CAACS,UAAU,CAACJ,KAAK,GAAG,CAAC,CAAC,MAG9BK,CAAC,GAAGC,SAAS,CAACC,WAAW,CAACJ,KAAK,EAAEJ,MAAM,CAAC,CAAC;MAC7C;IACJ;EACJ;AACJ,CAAC;AAED,MAAMS,SAAS,GAAIL,KAAK,IAAK;EACzB,MAAMM,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;IACxBD,KAAK,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGP,KAAK,CAACO,CAAC,CAAC,CAAC;EAC5B;EACA,OAAOD,KAAK;AAChB,CAAC;AAED,MAAME,QAAQ,GAAIC,WAAW,IAAK;EAC9BjB,IAAI,GAAG,CAAC,CAAC;EACTA,IAAI,CAACkB,OAAO,GAAGD,WAAW,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO;EAC1DjB,IAAI,CAACmB,IAAI,GAAG,EAAE;AAClB,CAAC;AAED,MAAMC,EAAE,GAAG,CAACZ,KAAK,EAAES,WAAW,KAAK;EAC/B;EACA;EACAD,QAAQ,CAACC,WAAW,CAAC;EACrB,IAAIE,IAAI,GAAG,EAAE;EACblB,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACnBoB,YAAY,CAACF,IAAI,CAAC;EAClB,OAAQG,WAAW,CAACH,IAAI,CAAC;AAC7B,CAAC;AAED,eAAeC,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}