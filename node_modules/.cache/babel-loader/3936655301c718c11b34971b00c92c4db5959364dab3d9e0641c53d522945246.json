{"ast":null,"code":"import getIaPath from \"./getIaPath\";\nimport { checkWinner } from \"../../pages/humanvsia/checkEndGame\";\nimport getHeuristic from \"./heuristic2\";\nimport { getBoard, freeBufferMemory } from \"./tools\";\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\nvar data;\nconst noStones = (node, x, y) => {\n  var start = window.performance.now();\n  var end;\n  while (node.parent) {\n    if (node.x === x && node.y === y) {\n      end = window.performance.now();\n      data.noStonesTime += end - start;\n      return false;\n    }\n    node = node.parent;\n  }\n  end = window.performance.now();\n  data.noStonesTime += end - start;\n  return true;\n};\nconst getAlphaBetaPruning = (node, heuristic, iaTurn) => {\n  if (iaTurn) {\n    if (heuristic > node.alpha) node.alpha = heuristic;\n  } else {\n    if (node[nbNode].heuristic < node.beta) node.beta = heuristic;\n  }\n  if (node.beta <= node.alpha) return true;\n  return false;\n};\nconst getChild = (pos, node, color) => {\n  return {\n    x: pos.x,\n    y: pos.y,\n    parent: node,\n    color,\n    alpha: node.alpha,\n    beta: node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n  };\n};\n\nconst cancelForward = node => {\n  var start = window.performance.now();\n  getBoard(node, data.bufferMemory);\n  var endGame = checkWinner(data.bufferMemory);\n  freeBufferMemory(node, data.bufferMemory);\n  var end = window.performance.now();\n  data.cancelForwardTime += end - start;\n  if (endGame === data.iaColor) {\n    node.heuristic = Infinity;\n    return true;\n  }\n  if (endGame === data.playerColor) {\n    node.heuristic = -Infinity;\n    return true;\n  }\n  return false;\n};\nconst uploadHeuristic = (node, child, depth, iaTurn) => {\n  if (iaTurn) {\n    if (node.heuristic === undefined || child.heuristic > node.heuristic) {\n      node.heuristic = child.heuristic;\n      if (data.depth === depth) {\n        node.bestPos = {\n          x: child.x,\n          y: child.y\n        };\n      }\n    }\n  } else {\n    if (node.heuristic === undefined || child.heuristic < node.heuristic) node.heuristic = child.heuristic;\n  }\n};\nconst minmax = (node, depth) => {\n  data.callsToMinMax += 1;\n  var nbNode = 0;\n  var iaTurn = data.depth % 2 === depth % 2 ? true : false;\n  var color = iaTurn ? data.iaColor : data.playerColor;\n  if (cancelForward(node)) return;\n  for (var c = 0; c < data.iaPath.length; c++) {\n    if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)) {\n      node[nbNode] = getChild(data.iaPath[c], node, color);\n      if (depth > 1) minmax(node[nbNode], depth - 1);else node[nbNode].heuristic = getHeuristic(node[nbNode], data);\n      uploadHeuristic(node, node[nbNode], depth, iaTurn);\n      if (getAlphaBetaPruning(node, depth, nbNode, iaTurn)) break;\n      node[nbNode] = undefined;\n      nbNode++;\n    }\n  }\n};\nconst getBufferMemory = board => {\n  var res = [];\n  for (var y = 0; y < 19; y++) {\n    res[y] = [];\n    for (var x = 0; x < 19; x++) {\n      res[y][x] = board[y][x];\n    }\n  }\n  return res;\n};\nconst initData = mainData => {\n  var start = window.performance.now();\n  data = {};\n  data.depth = 3;\n  data.treatmentSpace = 3;\n  if (361 - data.piecesOnBoard < data.depth) data.depth = 361 - data.piecesOnBoard;\n  data.WHITE = 1;\n  data.BLACK = 2;\n  data.MIN = 3;\n  data.MAX = 4;\n  data.VERTICAL = 5;\n  data.HORIZONTAL = 6;\n  data.DIAGONAL1 = 7;\n  data.DIAGONAL2 = 8;\n  data.FORBIDDEN = 9;\n  data.playerColor = mainData.playerColor;\n  data.iaColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE;\n  data.board = mainData.board;\n  data.iaPath = getIaPath(mainData.board, data.treatmentSpace);\n  data.bufferMemory = getBufferMemory(mainData.board);\n  data.heuristicIaDiviser = 1;\n  if (data.depth % 2) data.heuristicIaDiviser = (data.depth - Math.floor(data.depth / 2)) / Math.floor(data.depth / 2);\n  data.heuristicTime = 0; // TMP\n  data.cancelForwardTime = 0; // TMP\n  data.noStonesTime = 0; // TMP\n  var end = window.performance.now();\n  data.initDataTime = end - start; // TMP\n};\n\nconst ia = mainData => {\n  initData(mainData);\n  var tree = {\n    alpha: -Infinity,\n    beta: +Infinity\n  };\n  minmax(tree, data.depth);\n  console.log('----------------');\n  console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`);\n  console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`);\n  console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`);\n  console.log(`init data time: ${Math.floor(data.initDataTime)}ms`);\n  console.log(`total time: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`);\n  console.log(`heuristic: ${tree.heuristic}`);\n  var pos = {\n    ...tree.bestPos\n  };\n  data = undefined;\n  tree = undefined;\n  return pos;\n};\nexport default ia;","map":{"version":3,"names":["getIaPath","checkWinner","getHeuristic","getBoard","freeBufferMemory","data","noStones","node","x","y","start","window","performance","now","end","parent","noStonesTime","getAlphaBetaPruning","heuristic","iaTurn","alpha","nbNode","beta","getChild","pos","color","cancelForward","bufferMemory","endGame","cancelForwardTime","iaColor","Infinity","playerColor","uploadHeuristic","child","depth","undefined","bestPos","minmax","callsToMinMax","c","iaPath","length","board","getBufferMemory","res","initData","mainData","treatmentSpace","piecesOnBoard","WHITE","BLACK","MIN","MAX","VERTICAL","HORIZONTAL","DIAGONAL1","DIAGONAL2","FORBIDDEN","heuristicIaDiviser","Math","floor","heuristicTime","initDataTime","ia","tree","console","log"],"sources":["/Users/adauchy/work/ft/myGomokuGit/gomoku/src/tools/ia/ia.js"],"sourcesContent":["import getIaPath from \"./getIaPath\"\nimport { checkWinner } from \"../../pages/humanvsia/checkEndGame\"\nimport getHeuristic from \"./heuristic2\"\nimport { getBoard, freeBufferMemory } from \"./tools\"\n\n// À FAIRE :\n// IMPLEMENTER POUR LE CAS OU BOARD EST FULL\n// IMPLEMENTER LA POSSIBILITÉ DE CHOISIR UNE DEPTH PAIRE OU IMPAIRE\n// PEUT ETRE REMPLACER NOSTONES PAR UN TABLEAU CRÉÉ EN DEBUT DE FONCTION\n// VOIR CE QU'ON A RÉELLEMENT BESOIN DE METTRE DANS LE NOUVEAU NODE\n// PRENDRE EN COMPTE LES ALIGNEMENTS QUI N'ONT PAS DE BLOCAGES\n// LIMITER LA ZONE D'ANALYSE DE L'IA. POUR CELA PLACER DES 1 DANS BOARD AUTOUR DES ZONES PRISES\n// AU FUR ET A MESURE DE L'ALGORITHME, AGRANDIR LA ZONE, DE TOUTE FAÇON LE PRUNING AURA LIEU\n// FAIRE DES STRUCTURES POUR LES DIFFÉRENTES COMPOSITIONS DU PLATEAU\n// POUR OPTIMISER, COMMENCER LA SIMULATION TOUJOURS PRÈS DE LA ZONE DE JEU\n// CHANGER LES VALEUR WHITE ET BLACK POUR DES VALEURS NUMERIQUES POUR ACCELERER LES COMPARAISONS\n// CHANGER LES INDEX DE TREE PAR DES NOMBRES\n// RÉGLER LE PROBLÈME OÙ L'IA VEUT FAIRE 6 ET NE BLOQUE PAS LE 5 DE L'ADVERSAIRE\n// CHANGER TOUS LES IA PAR DES AI.......\n// RÉGLER LE PROBLÈME OÙ L'IA NE VEUT PAS TOUT DE SUITE GAGNER MAIS S'AMUSE\nvar data\n\nconst noStones = (node, x, y) => {\n    var start = window.performance.now()\n    var end\n    while (node.parent){\n        if (node.x === x && node.y === y){\n            end = window.performance.now()\n            data.noStonesTime += end - start\n            return false\n        }\n        node = node.parent\n    }\n    end = window.performance.now()\n    data.noStonesTime += end - start\n    return true\n}\n\nconst getAlphaBetaPruning = (node, heuristic, iaTurn) => {\n    if (iaTurn){\n        if (heuristic > node.alpha)\n            node.alpha = heuristic\n    }\n    else{\n        if ((node[nbNode].heuristic < node.beta))\n            node.beta = heuristic\n    }\n    if (node.beta <= node.alpha)\n        return true\n    return false\n}\n\nconst getChild = (pos, node, color) => {\n    return {\n        x : pos.x, y : pos.y,\n        parent : node,\n        color,\n        alpha : node.alpha, beta : node.beta // A SUPPRIMER POUR LA DERNIERE LIGNE DE L'ARBRE\n    }\n}\n\nconst cancelForward = (node) => {\n    var start = window.performance.now()\n    getBoard(node, data.bufferMemory)\n    var endGame = checkWinner(data.bufferMemory)\n    freeBufferMemory(node, data.bufferMemory)\n    var end = window.performance.now()\n    data.cancelForwardTime += end - start\n    if (endGame === data.iaColor){\n        node.heuristic = Infinity\n        return true\n    }\n    if (endGame === data.playerColor){\n        node.heuristic = -Infinity\n        return true\n    }\n    return false\n}\n\nconst uploadHeuristic = (node, child, depth, iaTurn) => {\n    if (iaTurn){\n        if (node.heuristic === undefined || child.heuristic > node.heuristic){\n            node.heuristic = child.heuristic\n            if (data.depth === depth){\n                node.bestPos = {\n                    x : child.x,\n                    y : child.y\n                }\n            }\n        }\n    }\n    else{\n        if (node.heuristic === undefined || child.heuristic < node.heuristic)\n            node.heuristic = child.heuristic\n    }\n}\n\nconst minmax = (node, depth) => {\n    data.callsToMinMax += 1\n    var nbNode = 0\n    var iaTurn = data.depth % 2 === depth % 2 ? true : false\n    var color = iaTurn ? data.iaColor : data.playerColor\n    if (cancelForward(node))\n        return\n    for (var c = 0; c < data.iaPath.length; c++){\n        if (!data.board[data.iaPath[c].y][data.iaPath[c].x] && noStones(node, data.iaPath[c].x, data.iaPath[c].y)){\n            node[nbNode] = getChild(data.iaPath[c], node, color)\n            if (depth > 1)\n                minmax(node[nbNode], depth - 1)\n            else\n                node[nbNode].heuristic = getHeuristic(node[nbNode], data)\n            uploadHeuristic(node, node[nbNode], depth, iaTurn)\n            if (getAlphaBetaPruning(node, depth, nbNode, iaTurn))\n                break\n            node[nbNode] = undefined\n            nbNode++\n        }\n    }\n}\n\nconst getBufferMemory = (board) => {\n    var res = []\n    for (var y = 0; y < 19; y++){\n        res[y] = []\n        for (var x = 0; x < 19; x++){\n            res[y][x] = board[y][x]\n        }\n    }\n    return res\n}\n\nconst initData = (mainData) => {\n    var start = window.performance.now()\n    data = {}\n    data.depth = 3\n    data.treatmentSpace = 3\n    if (361 - data.piecesOnBoard < data.depth)\n        data.depth = 361 - data.piecesOnBoard\n    data.WHITE = 1\n    data.BLACK = 2\n    data.MIN = 3\n    data.MAX = 4\n    data.VERTICAL = 5\n    data.HORIZONTAL = 6\n    data.DIAGONAL1 = 7\n    data.DIAGONAL2 = 8\n    data.FORBIDDEN = 9\n    data.playerColor = mainData.playerColor\n    data.iaColor = data.playerColor === data.WHITE ? data.BLACK : data.WHITE\n    data.board = mainData.board\n    data.iaPath = getIaPath(mainData.board, data.treatmentSpace)\n    data.bufferMemory = getBufferMemory(mainData.board)\n    data.heuristicIaDiviser = 1\n    if (data.depth % 2)\n        data.heuristicIaDiviser = (data.depth - Math.floor(data.depth / 2)) / (Math.floor(data.depth / 2))\n    data.heuristicTime = 0 // TMP\n    data.cancelForwardTime = 0 // TMP\n    data.noStonesTime = 0 // TMP\n    var end = window.performance.now()\n    data.initDataTime = end - start // TMP\n}\n\nconst ia = (mainData) => {\n    initData(mainData)\n    var tree = {alpha : -Infinity, beta : +Infinity}\n    minmax(tree, data.depth)\n    console.log('----------------')\n    console.log(`heuristic time: ${Math.floor(data.heuristicTime)}ms`)\n    console.log(`cancel forward time: ${Math.floor(data.cancelForwardTime)}ms`)\n    console.log(`no stones time: ${Math.floor(data.noStonesTime)}ms`)\n    console.log(`init data time: ${Math.floor(data.initDataTime)}ms`)\n    console.log(`total time: ${Math.floor(data.heuristicTime + data.cancelForwardTime + data.noStonesTime + data.initDataTime)}ms`)\n    console.log(`heuristic: ${tree.heuristic}`)\n    var pos = {...tree.bestPos}\n    data = undefined\n    tree = undefined\n    return pos\n}\n\nexport default ia"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}