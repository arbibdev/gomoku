{"ast":null,"code":"// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n// const getBoard = (board, node) => {\n//     var res = []\n//     for (var y = 0; y < 19; y++){\n//         res[y] = []\n//         for (var x = 0; x < 19; x++){\n//             res[y][x] = board\n//         }\n//     }\n//     while (node.parent){\n//         res[node.y][node.x] = node.color\n//         node = node.parent\n//     }\n//     return res\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\nconst minmax = (node, depth) => {\n  if (depth === 1) return;\n  var nbNode;\n  // var board = getBoard(data.board, node)\n  for (var y = 0; y < 19; y++) {\n    for (var x = 0; x < 19; x++) {\n      if (!data.board[y][x] && noStones(node, x, y)) {\n        var color = data.playerColor;\n        if (data.depth % 2 === depth % 2) color = data.iaColor;\n        node[`${nbNode}`] = {\n          x,\n          y,\n          parent: node,\n          color\n        };\n        minmax(node, depth - 1);\n        nbNode++;\n      }\n    }\n  }\n  if (data.depth % 2 !== depth % 2) node = getBestNode(node, 'min');else node = getBestNode(node, 'max');\n};\nconst initData = playerColor => {\n  data = {};\n  data.playerColor = playerColor;\n  data.iaColor = playerColor === 'white' ? 'black' : 'white';\n  data.board = board;\n  data.depth = 1;\n};\nconst ia = (board, playerColor) => {\n  // return (playRandom(data, playerColor))\n  // for (var c = 0; c < 500000000; c++);\n  initData(playerColor);\n  var tree = {};\n  minmax(tree, data.depth);\n  getHeuristic(tree);\n  return getBestMove(tree);\n};\nexport default ia;","map":{"version":3,"names":["minmax","node","depth","nbNode","y","x","data","board","noStones","color","playerColor","iaColor","parent","getBestNode","initData","ia","tree","getHeuristic","getBestMove"],"sources":["/Users/adauchy/work/ft/gomokuGit/gomoku/src/pages/humanvsia/ia.js"],"sourcesContent":["// import getRandomInt from \"../../tools/getRandomInt\"\n\n// const playRandom = (data, playerColor) => {\n//     var x = getRandomInt(19)\n//     var y = getRandomInt(19)\n//     while (data.board[y][x]){\n//         x++\n//         if (x === 19){\n//             x = 0\n//             y++\n//         }\n//         if (y === 19)\n//             y = 0\n//     }\n//     return {x, y}\n// }\n\n\n\n// const getBoard = (board, node) => {\n//     var res = []\n//     for (var y = 0; y < 19; y++){\n//         res[y] = []\n//         for (var x = 0; x < 19; x++){\n//             res[y][x] = board\n//         }\n//     }\n//     while (node.parent){\n//         res[node.y][node.x] = node.color\n//         node = node.parent\n//     }\n//     return res\n// }\n\n// const getBestMove = (node) => {\n//     var nbNode = 0\n//     for (var y = 0; y < 19; y++){\n//         for (var x = 0; x < 19; x++){\n//             if (!data.board[y][x] && noStones(node, x, y)){\n//                 node[`${nbNode}`] = {\n//                     x, y,\n//                     parent : node, // maybe no needed\n//                     color : !(depth % 2) ? 'black' : 'white', //maybe no needed\n//                     heuristic : getHeuristic()\n//                 }\n//             }\n//         }\n//     }\n// }\n\nconst minmax = (node, depth) => {\n    if (depth === 1)\n        return\n    var nbNode\n    // var board = getBoard(data.board, node)\n    for (var y = 0; y < 19; y++){\n        for (var x = 0; x < 19; x++){\n            if (!data.board[y][x] && noStones(node, x, y)){\n                var color = data.playerColor\n                if ((data.depth % 2) === (depth % 2))\n                    color = data.iaColor\n                node[`${nbNode}`] = {\n                    x, y,\n                    parent : node,\n                    color\n                }\n                minmax(node, depth - 1)\n                nbNode++\n            }\n        }\n    }\n    if ((data.depth % 2) !== (depth % 2))\n        node = getBestNode(node, 'min')\n    else\n        node = getBestNode(node, 'max')\n}\n\nconst initData = (playerColor) => {\n    data = {}\n    data.playerColor = playerColor\n    data.iaColor = playerColor === 'white' ? 'black' : 'white'\n    data.board = board\n    data.depth = 1\n}\n\nconst ia = (board, playerColor) => {\n    // return (playRandom(data, playerColor))\n    // for (var c = 0; c < 500000000; c++);\n    initData(playerColor)\n    var tree = {}\n    minmax(tree, data.depth)\n    getHeuristic(tree)\n    return (getBestMove(tree))\n}\n\nexport default ia"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAG,CAACC,IAAI,EAAEC,KAAK,KAAK;EAC5B,IAAIA,KAAK,KAAK,CAAC,EACX;EACJ,IAAIC,MAAM;EACV;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;MACxB,IAAI,CAACC,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC,CAACC,CAAC,CAAC,IAAIG,QAAQ,CAACP,IAAI,EAAEI,CAAC,EAAED,CAAC,CAAC,EAAC;QAC1C,IAAIK,KAAK,GAAGH,IAAI,CAACI,WAAW;QAC5B,IAAKJ,IAAI,CAACJ,KAAK,GAAG,CAAC,KAAOA,KAAK,GAAG,CAAE,EAChCO,KAAK,GAAGH,IAAI,CAACK,OAAO;QACxBV,IAAI,CAAE,GAAEE,MAAO,EAAC,CAAC,GAAG;UAChBE,CAAC;UAAED,CAAC;UACJQ,MAAM,EAAGX,IAAI;UACbQ;QACJ,CAAC;QACDT,MAAM,CAACC,IAAI,EAAEC,KAAK,GAAG,CAAC,CAAC;QACvBC,MAAM,EAAE;MACZ;IACJ;EACJ;EACA,IAAKG,IAAI,CAACJ,KAAK,GAAG,CAAC,KAAOA,KAAK,GAAG,CAAE,EAChCD,IAAI,GAAGY,WAAW,CAACZ,IAAI,EAAE,KAAK,CAAC,MAE/BA,IAAI,GAAGY,WAAW,CAACZ,IAAI,EAAE,KAAK,CAAC;AACvC,CAAC;AAED,MAAMa,QAAQ,GAAIJ,WAAW,IAAK;EAC9BJ,IAAI,GAAG,CAAC,CAAC;EACTA,IAAI,CAACI,WAAW,GAAGA,WAAW;EAC9BJ,IAAI,CAACK,OAAO,GAAGD,WAAW,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO;EAC1DJ,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClBD,IAAI,CAACJ,KAAK,GAAG,CAAC;AAClB,CAAC;AAED,MAAMa,EAAE,GAAG,CAACR,KAAK,EAAEG,WAAW,KAAK;EAC/B;EACA;EACAI,QAAQ,CAACJ,WAAW,CAAC;EACrB,IAAIM,IAAI,GAAG,CAAC,CAAC;EACbhB,MAAM,CAACgB,IAAI,EAAEV,IAAI,CAACJ,KAAK,CAAC;EACxBe,YAAY,CAACD,IAAI,CAAC;EAClB,OAAQE,WAAW,CAACF,IAAI,CAAC;AAC7B,CAAC;AAED,eAAeD,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}